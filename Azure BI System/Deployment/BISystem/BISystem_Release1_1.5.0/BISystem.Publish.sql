/*
Deployment script for BISystemTest

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "BISystemTest"
:setvar DefaultFilePrefix "BISystemTest"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
PRINT N'Creating [Audit]...';


GO
CREATE SCHEMA [Audit]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Azure]...';


GO
CREATE SCHEMA [Azure]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Config]...';


GO
CREATE SCHEMA [Config]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Control]...';


GO
CREATE SCHEMA [Control]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [DataQuality]...';


GO
CREATE SCHEMA [DataQuality]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Metadata]...';


GO
CREATE SCHEMA [Metadata]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Monitor]...';


GO
CREATE SCHEMA [Monitor]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [OLAPControl]...';


GO
CREATE SCHEMA [OLAPControl]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Reporting]...';


GO
CREATE SCHEMA [Reporting]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Secure]...';


GO
CREATE SCHEMA [Secure]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [SSIS]...';


GO
CREATE SCHEMA [SSIS]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Test]...';


GO
CREATE SCHEMA [Test]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Audit].[DataQuality]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Audit].[DataQuality] (
    [DataQualityId] BIGINT          IDENTITY (1, 1) NOT NULL,
    [RowId]         BIGINT          NOT NULL,
    [SourceColumn]  VARCHAR (50)    NULL,
    [OriginalValue] NVARCHAR (1000) NULL,
    [NewValue]      NVARCHAR (1000) NULL,
    [ScreenId]      INT             NOT NULL,
    [ProcessStream] VARCHAR (10)    NOT NULL,
    [EntityId]      INT             NOT NULL,
    [LoadId]        INT             NOT NULL,
    CONSTRAINT [pkcDataQuality] PRIMARY KEY CLUSTERED ([DataQualityId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Audit].[SourceFileProcessStream]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Audit].[SourceFileProcessStream] (
    [SourceFileProcessStreamId] INT          IDENTITY (1, 1) NOT NULL,
    [SourceFileId]              INT          NOT NULL,
    [ProcessStream]             VARCHAR (50) NOT NULL,
    [LoadProcess]               VARCHAR (50) NULL,
    [LoadStatusTypeId]          INT          NOT NULL,
    [LoadId]                    INT          NOT NULL,
    [CreatedBy]                 [sysname]    NOT NULL,
    [CreatedDate]               DATETIME     NOT NULL,
    [UpdatedBy]                 [sysname]    NOT NULL,
    [UpdatedDate]               DATETIME     NOT NULL,
    [RowVersion]                ROWVERSION   NOT NULL,
    CONSTRAINT [pkcSourceFileProcessStreamId] PRIMARY KEY CLUSTERED ([SourceFileProcessStreamId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Audit].[ExecutionLogs]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Audit].[ExecutionLogs] (
    [ExecutionLogId]            UNIQUEIDENTIFIER NOT NULL,
    [ReportKey]                 INT              NOT NULL,
    [UserKey]                   INT              NOT NULL,
    [MachineKey]                INT              NOT NULL,
    [RequestType]               INT              NOT NULL,
    [FormatType]                INT              NOT NULL,
    [StatusCode]                INT              NOT NULL,
    [SourceType]                INT              NOT NULL,
    [TimeStart]                 DATETIME         NOT NULL,
    [TimeEnd]                   DATETIME         NOT NULL,
    [TimeDataRetrieval]         INT              NOT NULL,
    [TimeProcessing]            INT              NOT NULL,
    [TimeRendering]             INT              NOT NULL,
    [ByteCount]                 BIGINT           NOT NULL,
    [RowCount]                  BIGINT           NOT NULL,
    [ExecutionId]               NVARCHAR (64)    NOT NULL,
    [TotalExecTime]             INT              NOT NULL,
    [ActionType]                INT              NOT NULL,
    [ScalabilityTimePaging]     INT              NOT NULL,
    [ScalabilityTimeProcessing] INT              NOT NULL,
    [EstMemoryKBPaging]         INT              NOT NULL,
    [EstMemoryKBProcessing]     INT              NOT NULL,
    [CreatedBy]                 [sysname]        NOT NULL,
    [CreatedDate]               DATETIME         NOT NULL,
    [UpdatedBy]                 [sysname]        NOT NULL,
    [UpdatedDate]               DATETIME         NOT NULL,
    [RowVersion]                ROWVERSION       NOT NULL,
    CONSTRAINT [pkcExecutionLogs] PRIMARY KEY CLUSTERED ([ExecutionLogId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Audit].[ErrorRows]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Audit].[ErrorRows] (
    [ErrorRowId]       INT              IDENTITY (1, 1) NOT NULL,
    [LoadId]           INT              NULL,
    [RowId]            BIGINT           NULL,
    [RowNumber]        INT              NULL,
    [EntityId]         INT              NULL,
    [TaskId]           UNIQUEIDENTIFIER NULL,
    [TaskName]         VARCHAR (200)    NULL,
    [PackageId]        UNIQUEIDENTIFIER NULL,
    [PackageName]      VARCHAR (200)    NULL,
    [ErrorCode]        INT              NULL,
    [ErrorDescription] VARCHAR (2000)   NULL,
    [XmlRow]           XML              NULL,
    [CreatedBy]        [sysname]        NOT NULL,
    [CreatedDate]      DATETIME         NOT NULL,
    [UpdatedBy]        [sysname]        NOT NULL,
    [UpdatedDate]      DATETIME         NOT NULL,
    [RowVersion]       ROWVERSION       NOT NULL,
    CONSTRAINT [pkcErrorRows] PRIMARY KEY CLUSTERED ([ErrorRowId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Audit].[EventFact]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Audit].[EventFact] (
    [EventFactId] INT    IDENTITY (1, 1) NOT NULL,
    [DateId]      INT    NULL,
    [ScreenId]    INT    NULL,
    [LoadId]      INT    NULL,
    [RowId]       BIGINT NULL,
    [EntityId]    INT    NULL,
    [FileId]      INT    NULL,
    CONSTRAINT [pkcEventFact] PRIMARY KEY CLUSTERED ([EventFactId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Audit].[RunLogs]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Audit].[RunLogs] (
    [RunLogId]    INT             IDENTITY (1, 1) NOT NULL,
    [Event]       NVARCHAR (4000) NOT NULL,
    [When]        DATETIME        NOT NULL,
    [RecCount]    INT             NULL,
    [CreatedBy]   [sysname]       NOT NULL,
    [CreatedDate] DATETIME        NOT NULL,
    [UpdatedBy]   [sysname]       NOT NULL,
    [UpdatedDate] DATETIME        NOT NULL,
    [RowVersion]  ROWVERSION      NOT NULL
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Audit].[RowThroughput]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Audit].[RowThroughput] (
    [RowThroughputId] INT           IDENTITY (1, 1) NOT NULL,
    [ExecutionId]     INT           NULL,
    [ExecutableId]    INT           NULL,
    [EnvironmentId]   INT           NULL,
    [EntityId]        INT           NULL,
    [LoadProcess]     VARCHAR (20)  NULL,
    [TaskName]        VARCHAR (100) NULL,
    [ProcessStream]   VARCHAR (50)  NULL,
    [ExtractedRows]   INT           NULL,
    [InsertedRows]    INT           NULL,
    [UpdatedRows]     INT           NULL,
    [DeletedRows]     INT           NULL,
    [FailedRows]      INT           NULL,
    [ArchivedRows]    INT           NULL,
    [BadRows]         INT           NULL,
    [LoadId]          INT           NOT NULL,
    [CreatedBy]       [sysname]     NOT NULL,
    [CreatedDate]     DATETIME      NOT NULL,
    [UpdatedBy]       [sysname]     NOT NULL,
    [UpdatedDate]     DATETIME      NOT NULL,
    [RowVersion]      ROWVERSION    NOT NULL,
    [ApplicationId]   SMALLINT      NULL,
    [SourceFileName]  VARCHAR (100) NULL,
    [EntityTypeTable] VARCHAR (100) NULL
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Audit].[PackageLoad]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Audit].[PackageLoad] (
    [LoadId]             INT              IDENTITY (1, 1) NOT NULL,
    [ParentLoadId]       INT              NULL,
    [ExecutionId]        INT              NULL,
    [EnvironmentId]      INT              NULL,
    [ProjectId]          INT              NULL,
    [ExecutionGUID]      UNIQUEIDENTIFIER NULL,
    [PackageVersionGUID] UNIQUEIDENTIFIER NULL,
    [PackageGUID]        UNIQUEIDENTIFIER NULL,
    [PackageName]        VARCHAR (250)    NULL,
    [LoadProcess]        VARCHAR (20)     NULL,
    [LoadStatusId]       INT              NULL,
    [StartTime]          DATETIME         NULL,
    [EndTime]            DATETIME         NULL,
    [Duration]           BIGINT           NULL,
    [CreatedBy]          [sysname]        NOT NULL,
    [CreatedDate]        DATETIME         NOT NULL,
    [UpdatedBy]          [sysname]        NOT NULL,
    [UpdatedDate]        DATETIME         NOT NULL,
    [RowVersion]         ROWVERSION       NOT NULL,
    CONSTRAINT [pkcPackageLoad] PRIMARY KEY CLUSTERED ([LoadId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Audit].[ExecutionPath]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Audit].[ExecutionPath] (
    [ExecutionLogId]            UNIQUEIDENTIFIER NOT NULL,
    [ExecutionId]               NVARCHAR (64)    NULL,
    [ActionType]                INT              NULL,
    [FormatType]                INT              NULL,
    [StatusCode]                INT              NULL,
    [TimeStart]                 DATETIME         NULL,
    [TimeEnd]                   DATETIME         NULL,
    [TimeDataRetrieval]         INT              NULL,
    [TimeProcessing]            INT              NULL,
    [TimeRendering]             INT              NULL,
    [ByteCount]                 BIGINT           NULL,
    [RowCount]                  BIGINT           NULL,
    [TotalExecTime]             INT              NULL,
    [ScalabilityTimePaging]     INT              NULL,
    [ScalabilityTimeProcessing] INT              NULL,
    [EstMemoryKBPaging]         INT              NULL,
    [EstMemoryKBProcessing]     INT              NULL,
    [CreatedBy]                 [sysname]        NOT NULL,
    [CreatedDate]               DATETIME         NOT NULL,
    [UpdatedBy]                 [sysname]        NOT NULL,
    [UpdatedDate]               DATETIME         NOT NULL,
    [RowVersion]                ROWVERSION       NOT NULL,
    CONSTRAINT [pkcExecutionPath] PRIMARY KEY CLUSTERED ([ExecutionLogId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Audit].[ExecutionParameters]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Audit].[ExecutionParameters] (
    [ExecutionParameterId] UNIQUEIDENTIFIER NOT NULL,
    [Name]                 NVARCHAR (2000)  NOT NULL,
    [Value]                NVARCHAR (MAX)   NOT NULL,
    [ExecutionLogId]       UNIQUEIDENTIFIER NOT NULL,
    [CreatedBy]            [sysname]        NOT NULL,
    [CreatedDate]          DATETIME         NOT NULL,
    [UpdatedBy]            [sysname]        NOT NULL,
    [UpdatedDate]          DATETIME         NOT NULL,
    [RowVersion]           ROWVERSION       NOT NULL,
    CONSTRAINT [pkcExecutionParameters] PRIMARY KEY CLUSTERED ([ExecutionParameterId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Audit].[ErrorLog]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Audit].[ErrorLog] (
    [ErrorLogId]            INT              NOT NULL,
    [QueueTaskId]           INT              NULL,
    [EventType]             VARCHAR (50)     NULL,
    [EventName]             VARCHAR (100)    NULL,
    [ErrorCount]            INT              NULL,
    [StatusId]              TINYINT          NULL,
    [EntityId]              INT              NULL,
    [RowNumber]             INT              NULL,
    [RowId]                 BIGINT           NULL,
    [Technology]            VARCHAR (100)    NULL,
    [Component]             VARCHAR (100)    NULL,
    [Version]               VARCHAR (100)    NULL,
    [ProcessStream]         VARCHAR (100)    NULL,
    [MachineName]           VARCHAR (100)    NULL,
    [PackageId]             UNIQUEIDENTIFIER NULL,
    [ExecutionInstanceGUID] UNIQUEIDENTIFIER NULL,
    [CreatedDate]           DATETIME         NOT NULL,
    [CreatedBy]             INT              NOT NULL,
    [UpdatedBy]             [sysname]        NOT NULL,
    [UpdatedDate]           DATETIME         NOT NULL,
    [RowVersion]            ROWVERSION       NOT NULL,
    PRIMARY KEY CLUSTERED ([ErrorLogId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Audit].[ErrorInstanceLog]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Audit].[ErrorInstanceLog] (
    [ErrorInstanceLogId] INT             IDENTITY (1, 1) NOT NULL,
    [EventInstanceType]  VARCHAR (50)    NOT NULL,
    [ErrorLogId]         INT             NOT NULL,
    [ErrorCode]          VARCHAR (100)   NOT NULL,
    [ErrorString]        NVARCHAR (4000) NOT NULL,
    [StatusId]           TINYINT         NOT NULL,
    [RuleNumber]         INT             NOT NULL,
    [TableInError]       VARCHAR (100)   NOT NULL,
    [FiledInError]       VARCHAR (100)   NOT NULL,
    [ValueInError]       NVARCHAR (100)  NOT NULL,
    [CreatedBy]          [sysname]       NOT NULL,
    [CreatedDate]        DATETIME        NOT NULL,
    [UpdatedBy]          [sysname]       NOT NULL,
    [UpdatedDate]        DATETIME        NOT NULL,
    [RowVersion]         ROWVERSION      NOT NULL,
    PRIMARY KEY CLUSTERED ([ErrorInstanceLogId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Azure].[AutomationActionLog]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Azure].[AutomationActionLog] (
    [ActionId]          INT              IDENTITY (1, 1) NOT NULL,
    [ObjectName]        VARCHAR (255)    NOT NULL,
    [ActionName]        VARCHAR (255)    NOT NULL,
    [ActionDescription] VARCHAR (255)    NOT NULL,
    [InsertedDate]      DATETIME         NULL,
    [UpdatedDate]       DATETIME         NULL,
    [Result]            INT              NULL,
    [OperationID]       UNIQUEIDENTIFIER NULL,
    PRIMARY KEY CLUSTERED ([ActionId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Azure].[AutomationLogs]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Azure].[AutomationLogs] (
    [PId]            INT              IDENTITY (1, 1) NOT NULL,
    [LogLevel]       INT              NULL,
    [MessageDetails] NVARCHAR (MAX)   NULL,
    [RunbookName]    NVARCHAR (MAX)   NULL,
    [Timestamp]      DATETIME         NULL,
    [OperationID]    UNIQUEIDENTIFIER NULL
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Azure].[AutomationLogs].[AzureLogs_IDX]...';


GO
CREATE CLUSTERED INDEX [AzureLogs_IDX]
    ON [Azure].[AutomationLogs]([PId] ASC);


GO
PRINT N'Creating [Config].[Variable]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Config].[Variable] (
    [VariableId] INT           NOT NULL,
    [Name]       VARCHAR (100) NOT NULL,
    [Value]      VARCHAR (50)  NOT NULL,
    [Type]       VARCHAR (20)  NOT NULL,
    PRIMARY KEY CLUSTERED ([VariableId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Config].[Parameter]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Config].[Parameter] (
    [ParmaterId]         INT           IDENTITY (1, 1) NOT NULL,
    [ParamaterCode]      VARCHAR (10)  NULL,
    [ParamaterShortDesc] VARCHAR (20)  NULL,
    [ParamaterDesc]      VARCHAR (50)  NULL,
    [ParameterType]      VARCHAR (20)  NULL,
    [ParameterValue]     NVARCHAR (50) NULL,
    [ParameterDataType]  VARCHAR (30)  NULL,
    CONSTRAINT [pkcParameter] PRIMARY KEY CLUSTERED ([ParmaterId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[LoadStatusType]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[LoadStatusType] (
    [LoadStatusTypeId] INT           IDENTITY (1, 1) NOT NULL,
    [Name]             VARCHAR (50)  NOT NULL,
    [Description]      VARCHAR (100) NOT NULL,
    [ShortName]        VARCHAR (10)  NULL,
    [UpdateUser]       VARCHAR (150) NULL,
    [UpdateTime]       DATETIME      NULL,
    CONSTRAINT [pkcLoadStatusType] PRIMARY KEY CLUSTERED ([LoadStatusTypeId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[EntityProcessStream]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[EntityProcessStream] (
    [EntityProcessStreamId] INT          IDENTITY (1, 1) NOT NULL,
    [EntityId]              INT          NOT NULL,
    [ProcessStream]         VARCHAR (50) NOT NULL,
    [LoadProcess]           VARCHAR (50) NULL,
    [LoadStatusTypeId]      INT          NOT NULL,
    [LoadId]                INT          NOT NULL,
    CONSTRAINT [pkcEntityProcessStreamId] PRIMARY KEY CLUSTERED ([EntityProcessStreamId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[ProcessStream]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[ProcessStream] (
    [ProcessStreamId]    TINYINT        IDENTITY (1, 1) NOT NULL,
    [Code]               CHAR (10)      NOT NULL,
    [Name]               VARCHAR (100)  NULL,
    [Description]        VARCHAR (2000) NULL,
    [ProcessStreamOrder] TINYINT        NOT NULL,
    [DateColumnName]     VARCHAR (25)   NULL
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[Entity]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[Entity] (
    [EntityId]       INT      IDENTITY (1, 1) NOT NULL,
    [ParentEntityId] INT      NULL,
    [SourceFileId]   INT      NOT NULL,
    [EntityTypeId]   SMALLINT NOT NULL,
    [LoadId]         INT      NOT NULL,
    [ApplicationId]  SMALLINT NULL,
    CONSTRAINT [pkcEntityId] PRIMARY KEY CLUSTERED ([EntityId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[SourceFile]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[SourceFile] (
    [SourceFileId]              INT            IDENTITY (1, 1) NOT NULL,
    [ParentSourceFileId]        INT            NULL,
    [SourceFileName]            NVARCHAR (255) NOT NULL,
    [SourceFileTypeId]          INT            NULL,
    [FileExtensionTypeId]       SMALLINT       NULL,
    [ApplicationId]             SMALLINT       NULL,
    [OriginalFileId]            INT            NULL,
    [ModifiedDate]              DATETIME       NOT NULL,
    [FileSizeBytes]             BIGINT         NOT NULL,
    [DataSourceType]            VARCHAR (100)  NULL,
    [IsCompressed]              BIT            NULL,
    [Source]                    VARCHAR (400)  NULL,
    [FileExtractedDate]         DATETIME       NULL,
    [FileExtractedParentLoadId] INT            NULL,
    [BlobUploadDate]            DATETIME       NULL,
    [StageDate]                 DATETIME       NULL,
    [StageParentLoadId]         INT            NULL,
    [CleanDate]                 DATETIME       NULL,
    [CleanParentLoadId]         INT            NULL,
    [TransformDate]             DATETIME       NULL,
    [TransformParentLoadId]     INT            NULL,
    [WarehouseDate]             DATETIME       NULL,
    [OLAPDate]                  DATETIME       NULL,
    [ArchivePath]               NVARCHAR (400) NULL,
    [ArchiveDate]               DATETIME       NULL,
    [UnloadFile]                BIT            NULL,
    [FileUnloaded]              BIT            NULL,
    [FileUnloadedDate]          DATETIME       NULL,
    [LoadId]                    INT            NULL,
    [CreatedBy]                 [sysname]      NOT NULL,
    [CreatedDate]               DATETIME       NOT NULL,
    [TotalNoOfUses]             BIGINT         NULL,
    [32BitStageRequired]        BIT            NULL,
    [MDSDate]                   DATETIME       NULL,
    [ScrubDate]                 DATETIME       NULL,
    [LDSDate]                   DATETIME       NULL,
    [PartitionKey]              INT            NULL,
    [PurgeFromArchive]          BIT            NULL,
    [ArchivePurged]             BIT            NULL,
    [ArchivePurgedDate]         DATETIME       NULL,
    [PreStageDate]              DATETIME       NULL,
    [IsLoaded]                  BIT            NULL,
    [IsToBeLoaded]              BIT            NULL,
    [SourceFileType]            NVARCHAR (255) NULL,
    CONSTRAINT [pkcSourceFileId] PRIMARY KEY CLUSTERED ([SourceFileId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[Status]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[Status] (
    [StatusId]    TINYINT        IDENTITY (1, 1) NOT NULL,
    [Code]        CHAR (3)       NOT NULL,
    [Name]        VARCHAR (100)  NULL,
    [Description] VARCHAR (2000) NULL,
    CONSTRAINT [pkcStatusId] PRIMARY KEY CLUSTERED ([StatusId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[Status].[ixuCode]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [ixuCode]
    ON [Control].[Status]([Code] ASC);


GO
PRINT N'Creating [Control].[FileExtensionType]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[FileExtensionType] (
    [FileExtensionTypeId] SMALLINT       IDENTITY (1, 1) NOT NULL,
    [FileTypeGroupId]     INT            NOT NULL,
    [FileExtension]       NVARCHAR (255) NULL,
    [Description]         VARCHAR (100)  NOT NULL,
    [IsCompressed]        BIT            NOT NULL,
    [CreatedBy]           [sysname]      NOT NULL,
    [CreatedDate]         DATETIME       NOT NULL,
    [UpdatedBy]           [sysname]      NOT NULL,
    [UpdatedDate]         DATETIME       NOT NULL,
    [RowVersion]          ROWVERSION     NOT NULL,
    CONSTRAINT [pkcFileExtensionType] PRIMARY KEY CLUSTERED ([FileExtensionTypeId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[FileTypeGroup]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[FileTypeGroup] (
    [FileTypeGroupId] INT            IDENTITY (1, 1) NOT NULL,
    [Name]            VARCHAR (100)  NULL,
    [Code]            VARCHAR (5)    NULL,
    [Description]     VARCHAR (2000) NULL,
    PRIMARY KEY CLUSTERED ([FileTypeGroupId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[SourceFileType]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[SourceFileType] (
    [SourceFileTypeId]   INT            IDENTITY (1, 1) NOT NULL,
    [Code]               VARCHAR (10)   NOT NULL,
    [Description]        VARCHAR (2000) NOT NULL,
    [Name]               VARCHAR (100)  NOT NULL,
    [Direction]          VARCHAR (4)    NOT NULL,
    [32BitStageRequired] SMALLINT       NULL,
    [Collection]         VARCHAR (10)   NULL,
    CONSTRAINT [pkcSourceFileTypeId] PRIMARY KEY CLUSTERED ([SourceFileTypeId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[SourceFileType].[ixuCode]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [ixuCode]
    ON [Control].[SourceFileType]([Code] ASC);


GO
PRINT N'Creating [Control].[EventActionType]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[EventActionType] (
    [EventActionTypeId] INT            IDENTITY (1, 1) NOT NULL,
    [Name]              VARCHAR (100)  NULL,
    [Description]       VARCHAR (1000) NULL,
    [CreatedBy]         [sysname]      NOT NULL,
    [CreatedDate]       DATETIME       NOT NULL,
    [UpdatedBy]         [sysname]      NOT NULL,
    [UpdatedDate]       DATETIME       NOT NULL,
    [RowVersion]        ROWVERSION     NOT NULL,
    CONSTRAINT [pkcEventActionTypeId] PRIMARY KEY CLUSTERED ([EventActionTypeId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[DistributionGroup]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[DistributionGroup] (
    [DistributionGroupId] INT            IDENTITY (1, 1) NOT NULL,
    [Name]                VARCHAR (100)  NOT NULL,
    [Description]         VARCHAR (2000) NULL,
    CONSTRAINT [pkcDistributionGroupId] PRIMARY KEY CLUSTERED ([DistributionGroupId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[DistributionGroupUser]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[DistributionGroupUser] (
    [DistributionGroupUserId] INT IDENTITY (1, 1) NOT NULL,
    [DistributionGroupId]     INT NOT NULL,
    [UserId]                  INT NOT NULL,
    CONSTRAINT [pkcDistributionGroupUserId] PRIMARY KEY CLUSTERED ([DistributionGroupUserId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[Notification]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[Notification] (
    [NotificationId]            INT            IDENTITY (1, 1) NOT NULL,
    [NotificationTypeId]        INT            NULL,
    [ExecutionInstanceGuid]     NVARCHAR (100) NULL,
    [LoadId]                    INT            NULL,
    [ShortDescription]          NVARCHAR (250) NULL,
    [Description]               NVARCHAR (MAX) NULL,
    [ErrorCode]                 NVARCHAR (128) NULL,
    [VerboseDescription]        NVARCHAR (MAX) NULL,
    [NotificationSeverityId]    INT            NULL,
    [NotificationStatusId]      INT            NULL,
    [NotificationProcessTypeId] INT            NULL,
    [LoadStatusType]            VARCHAR (20)   NULL,
    [FeedName]                  NVARCHAR (256) NULL,
    [Stage]                     NVARCHAR (200) NULL,
    [EntityName]                VARCHAR (50)   NULL,
    [SourceFileName]            NVARCHAR (256) NULL,
    [SuccessRows]               INT            NULL,
    [FailedRows]                INT            NULL,
    [BadRows]                   INT            NULL,
    [FeedStartTime]             DATETIME       NULL,
    [TimeOfCompletion]          DATETIME       NULL,
    [CreatedBy]                 [sysname]      NOT NULL,
    [RetryOnFailure]            INT            NULL,
    CONSTRAINT [pkcNotification] PRIMARY KEY CLUSTERED ([NotificationId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[NotificationType]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[NotificationType] (
    [NotificationTypeId] INT            IDENTITY (1, 1) NOT NULL,
    [Name]               VARCHAR (100)  NULL,
    [Description]        VARCHAR (2000) NULL,
    [Recipients]         NVARCHAR (MAX) NULL,
    CONSTRAINT [pkcNotificationTypeId] PRIMARY KEY CLUSTERED ([NotificationTypeId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[NotificationGroups]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[NotificationGroups] (
    [NotificationGroupID] INT            IDENTITY (1, 1) NOT NULL,
    [IsDeleted]           BIT            NULL,
    [GroupName]           NVARCHAR (25)  NOT NULL,
    [GroupDescription]    NVARCHAR (200) NOT NULL,
    CONSTRAINT [pkcNotificationGroupID] PRIMARY KEY CLUSTERED ([NotificationGroupID] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[NotificationGroupMembers]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[NotificationGroupMembers] (
    [NotificationGroupMemberID] INT IDENTITY (1, 1) NOT NULL,
    [IsDeleted]                 BIT NULL,
    [NotificationGroupID]       INT NOT NULL,
    [NotificationSubscriberID]  INT NOT NULL,
    CONSTRAINT [pkcNotificationGroupMemberID] PRIMARY KEY CLUSTERED ([NotificationGroupMemberID] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[NotificationMessageType]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[NotificationMessageType] (
    [NotificationMessageTypeId] INT            IDENTITY (1, 1) NOT NULL,
    [Name]                      VARCHAR (100)  NULL,
    [Description]               VARCHAR (2000) NULL,
    CONSTRAINT [pkcNotificationMessageTypeId] PRIMARY KEY CLUSTERED ([NotificationMessageTypeId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[NotificationEmailMessageFormats]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[NotificationEmailMessageFormats] (
    [NotificationMessageFormatId] INT            IDENTITY (1, 1) NOT NULL,
    [IsDeleted]                   BIT            NULL,
    [NotificationMessageTypeId]   INT            NOT NULL,
    [MessageTypeName]             NVARCHAR (200) NULL,
    [MessageHTML]                 NVARCHAR (MAX) NOT NULL,
    CONSTRAINT [pkcNotificationMessageFormatId] PRIMARY KEY CLUSTERED ([NotificationMessageFormatId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[NotificationSubscribers]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[NotificationSubscribers] (
    [NotificationSubscriberID]  INT            IDENTITY (1, 1) NOT NULL,
    [IsDeleted]                 BIT            NULL,
    [FirstName]                 NVARCHAR (25)  NOT NULL,
    [LastName]                  NVARCHAR (25)  NULL,
    [EmailId]                   NVARCHAR (255) NOT NULL,
    [TextMessageNumber]         VARCHAR (20)   NULL,
    [InstantMessageID]          NVARCHAR (50)  NULL,
    [NotificationMessageTypeId] INT            NULL,
    CONSTRAINT [pkcNotificationSubscribers] PRIMARY KEY CLUSTERED ([NotificationSubscriberID] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[NotificationProcessTypes]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[NotificationProcessTypes] (
    [NotificationProcessTypeId]   INT           IDENTITY (1, 1) NOT NULL,
    [NotificationProcessType]     NVARCHAR (25) NOT NULL,
    [NotificationProcessTypeCode] NVARCHAR (5)  NULL,
    CONSTRAINT [pkcNotificationProcessTypeId] PRIMARY KEY CLUSTERED ([NotificationProcessTypeId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[IncrementalLoad]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[IncrementalLoad] (
    [PackageName]      VARCHAR (100) NOT NULL,
    [LoadDate]         DATETIME      NOT NULL,
    [PreviousLoadDate] DATETIME      NULL,
    [LoadStatus]       BIT           NULL
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[RuleSet]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[RuleSet] (
    [RuleSetId] INT           IDENTITY (1, 1) NOT NULL,
    [Name]      NVARCHAR (20) NOT NULL,
    [Version]   INT           NOT NULL,
    CONSTRAINT [pkcRuleSet] PRIMARY KEY CLUSTERED ([RuleSetId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[DataQualityRule]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[DataQualityRule] (
    [DataQualityRuleId] INT           IDENTITY (1, 1) NOT NULL,
    [Name]              NVARCHAR (25) NOT NULL,
    [Logic]             NVARCHAR (50) NOT NULL,
    [RuleTypeId]        INT           NOT NULL,
    CONSTRAINT [pkcDateQualityRule] PRIMARY KEY CLUSTERED ([DataQualityRuleId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[DataQualityRuleType]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[DataQualityRuleType] (
    [DataQualityRuleTypeId] INT           IDENTITY (1, 1) NOT NULL,
    [Name]                  NVARCHAR (20) NOT NULL,
    CONSTRAINT [pkcDateQualityRuleType] PRIMARY KEY CLUSTERED ([DataQualityRuleTypeId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[CleanseRuleType]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[CleanseRuleType] (
    [CleanseRuleTypeId] INT           IDENTITY (1, 1) NOT NULL,
    [Name]              NVARCHAR (20) NOT NULL,
    CONSTRAINT [pkcCleanseRuleType] PRIMARY KEY CLUSTERED ([CleanseRuleTypeId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[PatternMatchType]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[PatternMatchType] (
    [PatternMatchTypeId] INT           IDENTITY (1, 1) NOT NULL,
    [Name]               NVARCHAR (20) NOT NULL,
    CONSTRAINT [pkcPatternMatchType] PRIMARY KEY CLUSTERED ([PatternMatchTypeId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[CleanseRule]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[CleanseRule] (
    [CleanseRuleId]      INT            IDENTITY (1, 1) NOT NULL,
    [DataQualityRuleId]  INT            NOT NULL,
    [Name]               NVARCHAR (20)  NOT NULL,
    [ObjectId]           INT            NOT NULL,
    [PatternMatchTypeId] INT            NOT NULL,
    [CleanseTypeId]      INT            NOT NULL,
    [Criteria]           NVARCHAR (255) NULL,
    [CleanseTypeValue]   NVARCHAR (255) NULL,
    CONSTRAINT [pkcCleanseRule] PRIMARY KEY CLUSTERED ([CleanseRuleId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[NotificationDistibutionConfig]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[NotificationDistibutionConfig] (
    [NotificationDistibutionConfigId] INT IDENTITY (1, 1) NOT NULL,
    [IsDeleted]                       BIT NULL,
    [NotificationGroupID]             INT NULL,
    [NotificationSubscriberID]        INT NULL,
    [NotificationSeverityId]          INT NOT NULL,
    [IsGroupMessage]                  BIT NOT NULL,
    CONSTRAINT [pkcNotificationDistibutionConfigId] PRIMARY KEY CLUSTERED ([NotificationDistibutionConfigId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[SourceFileTypeIdentification]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[SourceFileTypeIdentification] (
    [SourceFileTypeIdentificationId] SMALLINT      IDENTITY (1, 1) NOT NULL,
    [SourceFileTypeId]               INT           NOT NULL,
    [StringMatch]                    VARCHAR (500) NOT NULL,
    [Operator]                       VARCHAR (50)  NOT NULL,
    [RuleOrder]                      INT           NULL,
    [BitwiseOperator]                VARCHAR (10)  NULL,
    [RowVersion]                     ROWVERSION    NOT NULL,
    CONSTRAINT [pkcSourceFileTypeIdentificationId] PRIMARY KEY CLUSTERED ([SourceFileTypeIdentificationId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[NotificationStatus]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[NotificationStatus] (
    [NotificationStatusId] INT            IDENTITY (1, 1) NOT NULL,
    [Name]                 NVARCHAR (50)  NOT NULL,
    [Description]          NVARCHAR (100) NULL,
    CONSTRAINT [pkcNotificationStatusId] PRIMARY KEY CLUSTERED ([NotificationStatusId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[NotificationSeverity]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[NotificationSeverity] (
    [NotificationSeverityId] INT           IDENTITY (1, 1) NOT NULL,
    [Name]                   NVARCHAR (20) NOT NULL,
    CONSTRAINT [pkcNotificationSeverityId] PRIMARY KEY CLUSTERED ([NotificationSeverityId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[RuleType]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[RuleType] (
    [RuleTypeId] INT           IDENTITY (1, 1) NOT NULL,
    [Name]       NVARCHAR (50) NOT NULL,
    CONSTRAINT [pkcRuleTypeId] PRIMARY KEY CLUSTERED ([RuleTypeId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[RuleSetObject]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[RuleSetObject] (
    [RuleSetObjectId] INT IDENTITY (1, 1) NOT NULL,
    [RuleSetId]       INT NOT NULL,
    [ObjectId]        INT NOT NULL,
    CONSTRAINT [pkcRuleSetObject] PRIMARY KEY CLUSTERED ([RuleSetObjectId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[Users]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[Users] (
    [UserKey]       INT            IDENTITY (100, 1) NOT NULL,
    [UserName]      NVARCHAR (260) NOT NULL,
    [UserNameShort] NVARCHAR (260) NOT NULL,
    CONSTRAINT [pkcUsers] PRIMARY KEY CLUSTERED ([UserKey] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[PartitionLoad]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[PartitionLoad] (
    [PartitionLoadId]   INT          IDENTITY (1, 1) NOT NULL,
    [Source]            VARCHAR (50) NULL,
    [PartitionFunction] VARCHAR (50) NULL,
    [PartitionLoadDate] DATETIME     NULL,
    [MinLoadDate]       INT          NULL,
    [MaxLoadDate]       INT          NULL,
    [PartitionsCreated] INT          NULL,
    [LoadSuccessful]    BIT          NULL,
    [LoadId]            INT          NULL,
    CONSTRAINT [pkcPartitionLoad] PRIMARY KEY CLUSTERED ([PartitionLoadId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[BatchControl]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[BatchControl] (
    [GlobalLoadId]      INT              IDENTITY (1, 1) NOT NULL,
    [GlobalExecutionId] UNIQUEIDENTIFIER NULL,
    [StartTime]         DATETIME         NULL,
    [EndTime]           DATETIME         NULL,
    [SourceFileId]      INT              NULL
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[Application]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[Application] (
    [ApplicationId] SMALLINT       IDENTITY (1, 1) NOT NULL,
    [Name]          VARCHAR (250)  NOT NULL,
    [Code]          VARCHAR (80)   NOT NULL,
    [Description]   VARCHAR (4000) NULL,
    [Priority]      VARCHAR (80)   NULL,
    [UpTimeHours]   INT            NULL,
    [ETLType]       VARCHAR (80)   NULL,
    [WarehouseType] VARCHAR (80)   NULL,
    [Prefix]        VARCHAR (80)   NOT NULL,
    [CreatedBy]     [sysname]      NOT NULL,
    [CreatedDate]   DATETIME       NOT NULL,
    [UpdatedBy]     [sysname]      NOT NULL,
    [UpdatedDate]   DATETIME       NOT NULL,
    CONSTRAINT [pkcApplication] PRIMARY KEY CLUSTERED ([ApplicationId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[EntityType]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[EntityType] (
    [EntityTypeId]          SMALLINT       IDENTITY (1, 1) NOT NULL,
    [ParentEntityTypeId]    SMALLINT       NULL,
    [ApplicationId]         SMALLINT       NOT NULL,
    [IsSourceEntity]        BIT            NOT NULL,
    [HasMultipleSourceFile] BIT            NOT NULL,
    [Name]                  VARCHAR (50)   NOT NULL,
    [Code]                  VARCHAR (80)   NOT NULL,
    [Description]           VARCHAR (4000) NULL,
    [Schema]                VARCHAR (80)   NULL,
    [Table]                 VARCHAR (80)   NOT NULL,
    [CreatedBy]             [sysname]      NOT NULL,
    [CreatedDate]           DATETIME       NOT NULL,
    [UpdatedBy]             [sysname]      NOT NULL,
    [UpdatedDate]           DATETIME       NOT NULL,
    [RowVersion]            ROWVERSION     NOT NULL,
    CONSTRAINT [pkcEntityType] PRIMARY KEY CLUSTERED ([EntityTypeId] ASC),
    CONSTRAINT [uc_CodeApplicationId] UNIQUE NONCLUSTERED ([Code] ASC, [ApplicationId] ASC, [IsSourceEntity] ASC),
    CONSTRAINT [uc_NameApplicationId] UNIQUE NONCLUSTERED ([Name] ASC, [ApplicationId] ASC, [IsSourceEntity] ASC),
    CONSTRAINT [uc_TableNameApplicationId] UNIQUE NONCLUSTERED ([Table] ASC, [ApplicationId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [DataQuality].[HarmoniseRule]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [DataQuality].[HarmoniseRule] (
    [HarmoniseRuleId] INT          NOT NULL,
    [ColumnName]      VARCHAR (50) NOT NULL,
    [CleanseType]     VARCHAR (20) NOT NULL,
    [EntityTypeID]    VARCHAR (20) NOT NULL,
    PRIMARY KEY CLUSTERED ([HarmoniseRuleId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [DataQuality].[StandardiseRule]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [DataQuality].[StandardiseRule] (
    [StandardiseRuleId]    INT           NOT NULL,
    [DataQualityRuleId]    VARCHAR (100) NOT NULL,
    [ColumnName]           VARCHAR (50)  NOT NULL,
    [PatternMatchType]     VARCHAR (20)  NOT NULL,
    [Criteria]             VARCHAR (50)  NOT NULL,
    [StandardiseType]      VARCHAR (20)  NOT NULL,
    [StandardiseTypeValue] VARCHAR (20)  NOT NULL,
    [EntityTypeID]         VARCHAR (20)  NOT NULL,
    PRIMARY KEY CLUSTERED ([StandardiseRuleId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [DataQuality].[ScreenSeverity]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [DataQuality].[ScreenSeverity] (
    [ScreenSeverityID] TINYINT      NOT NULL,
    [SeverityName]     VARCHAR (20) NOT NULL,
    [SeverityCategory] VARCHAR (20) NOT NULL,
    CONSTRAINT [pkcScreenSeverity] PRIMARY KEY CLUSTERED ([ScreenSeverityID] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [DataQuality].[Screen]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [DataQuality].[Screen] (
    [ScreenId]           INT            IDENTITY (1, 1) NOT NULL,
    [ScreenName]         VARCHAR (50)   NOT NULL,
    [ScreenDescription]  VARCHAR (200)  NOT NULL,
    [ProjectId]          INT            NULL,
    [EnvironmentId]      INT            NULL,
    [ObjectId]           VARCHAR (50)   NULL,
    [ScreenSeverityID]   TINYINT        NULL,
    [ScreenSQL]          VARCHAR (3000) NULL,
    [ReportSQL]          VARCHAR (3000) NULL,
    [ScreenReferenceSQL] VARCHAR (3000) NULL,
    [ReportTableName]    VARCHAR (50)   NULL,
    [CleanseSQL]         VARCHAR (3000) NULL,
    [Domain]             VARCHAR (10)   NULL,
    CONSTRAINT [pkcScreen] PRIMARY KEY CLUSTERED ([ScreenId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [DataQuality].[DataIntegrityType]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [DataQuality].[DataIntegrityType] (
    [IntegrityTypeId] INT            IDENTITY (1, 1) NOT NULL,
    [Code]            CHAR (1)       NULL,
    [Name]            VARCHAR (100)  NULL,
    [Description]     VARCHAR (2000) NULL,
    PRIMARY KEY CLUSTERED ([IntegrityTypeId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Metadata].[ObjectIdentifier]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Metadata].[ObjectIdentifier] (
    [IdentifierId] INT             NOT NULL,
    [ObjectId]     INT             NOT NULL,
    [Title]        VARCHAR (50)    NOT NULL,
    [Value]        NVARCHAR (4000) NOT NULL,
    CONSTRAINT [pkcIdentifier] PRIMARY KEY CLUSTERED ([IdentifierId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Metadata].[ObjectAttribute]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Metadata].[ObjectAttribute] (
    [ObjectAttritributeId] INT            IDENTITY (1, 1) NOT NULL,
    [ObjectId]             INT            NOT NULL,
    [Name]                 VARCHAR (50)   NOT NULL,
    [Value]                NVARCHAR (100) NOT NULL,
    CONSTRAINT [pkObjectAttribute] PRIMARY KEY CLUSTERED ([ObjectAttritributeId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Metadata].[Object]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Metadata].[Object] (
    [ObjectId]          INT            IDENTITY (1, 1) NOT NULL,
    [Title]             VARCHAR (50)   NULL,
    [Subject]           VARCHAR (500)  NULL,
    [Description]       VARCHAR (4000) NULL,
    [TypeId]            INT            NULL,
    [SourceId]          INT            NULL,
    [Creator]           NVARCHAR (150) NULL,
    [Publisher]         NVARCHAR (150) NULL,
    [ModifiedDate]      DATETIME       NULL,
    [SourceKey]         NVARCHAR (10)  NULL,
    [ObjectContainerId] INT            NULL,
    CONSTRAINT [pkObjectId] PRIMARY KEY CLUSTERED ([ObjectId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Metadata].[Source]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Metadata].[Source] (
    [SourceId]    INT            NOT NULL,
    [Title]       VARCHAR (50)   NULL,
    [Description] VARCHAR (4000) NULL,
    CONSTRAINT [pkcSource] PRIMARY KEY CLUSTERED ([SourceId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Metadata].[RelationshipType]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Metadata].[RelationshipType] (
    [RelationshipTypeId] INT            IDENTITY (1, 1) NOT NULL,
    [Title]              VARCHAR (50)   NOT NULL,
    [Description]        VARCHAR (4000) NOT NULL,
    CONSTRAINT [pkcRelationType] PRIMARY KEY CLUSTERED ([RelationshipTypeId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Metadata].[ObjectType]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Metadata].[ObjectType] (
    [ObjectTypeId] INT            IDENTITY (1, 1) NOT NULL,
    [Title]        VARCHAR (50)   NULL,
    [Description]  VARCHAR (4000) NULL,
    CONSTRAINT [pkcObjectType] PRIMARY KEY CLUSTERED ([ObjectTypeId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Metadata].[ObjectRelationship]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Metadata].[ObjectRelationship] (
    [ObjectectRelationshipId] INT IDENTITY (1, 1) NOT NULL,
    [RelationshipTypeId]      INT NOT NULL,
    [FromObjectId]            INT NOT NULL,
    [ToObjectId]              INT NOT NULL,
    CONSTRAINT [pkcObjectRelationshipId] PRIMARY KEY CLUSTERED ([ObjectectRelationshipId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Monitor].[DimCounters]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Monitor].[DimCounters] (
    [CounterKey]      INT             NULL,
    [PerfGroup]       VARCHAR (50)    NULL,
    [PerfCounter]     VARCHAR (50)    NULL,
    [FullCounterName] VARCHAR (125)   NULL,
    [CounterScript]   NVARCHAR (4000) NULL,
    [EnvironmentKey]  INT             NULL
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Monitor].[DimEnvironment]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Monitor].[DimEnvironment] (
    [EnvironmentKey]  INT          NULL,
    [ServerName]      VARCHAR (25) NULL,
    [ServiceName]     VARCHAR (25) NULL,
    [EnvironmentName] VARCHAR (25) NULL
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Monitor].[DimTime]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Monitor].[DimTime] (
    [TimeKey]     INT          NULL,
    [DayPart]     VARCHAR (25) NULL,
    [Time]        TIME (7)     NULL,
    [QuarterHour] VARCHAR (5)  NULL
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Monitor].[FactCounters]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Monitor].[FactCounters] (
    [DateKey]        INT             NULL,
    [TimeKey]        INT             NULL,
    [EnvironmentKey] INT             NULL,
    [CounterKey]     INT             NULL,
    [CounterValue]   DECIMAL (18, 6) NULL
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [OLAPControl].[MeasureGroupPartition]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [OLAPControl].[MeasureGroupPartition] (
    [MeasureGroupPartitionId] SMALLINT     IDENTITY (1, 1) NOT NULL,
    [MeasureGroupId]          SMALLINT     NOT NULL,
    [PartitionID]             VARCHAR (20) NOT NULL,
    [PartitionDefinitionId]   TINYINT      NOT NULL,
    [FromDateId]              INT          NOT NULL,
    [ToDateId]                INT          NOT NULL,
    [PartitionSliceDimension] VARCHAR (50) NULL,
    [PartitionSliceAttribute] VARCHAR (50) NULL,
    [PartitionSliceKey]       INT          NULL,
    [Active]                  BIT          NOT NULL,
    [Dirty]                   BIT          NOT NULL,
    CONSTRAINT [pkcMeasureGroupPartition] PRIMARY KEY CLUSTERED ([MeasureGroupPartitionId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [OLAPControl].[MeasureGroupDimension]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [OLAPControl].[MeasureGroupDimension] (
    [MeasureGroupDimensionId] SMALLINT IDENTITY (1, 1) NOT NULL,
    [DimensionId]             SMALLINT NOT NULL,
    [MeasureGroupId]          SMALLINT NOT NULL,
    CONSTRAINT [pkcMeasureGroupDimension] PRIMARY KEY CLUSTERED ([MeasureGroupDimensionId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [OLAPControl].[PartitionDefinition]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [OLAPControl].[PartitionDefinition] (
    [PartitionDefinitionId]   SMALLINT     IDENTITY (1, 1) NOT NULL,
    [PartitionDefinitionName] VARCHAR (50) NOT NULL,
    [PartitionPrefix]         VARCHAR (50) NOT NULL,
    CONSTRAINT [pkcPartitionDefinition] PRIMARY KEY CLUSTERED ([PartitionDefinitionId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [OLAPControl].[Database]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [OLAPControl].[Database] (
    [DatabaseId]   TINYINT       IDENTITY (1, 1) NOT NULL,
    [DatabaseName] VARCHAR (128) NOT NULL,
    CONSTRAINT [pkcDatabase] PRIMARY KEY CLUSTERED ([DatabaseId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [OLAPControl].[Cube]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [OLAPControl].[Cube] (
    [CubeId]           TINYINT       IDENTITY (1, 1) NOT NULL,
    [DatabaseId]       TINYINT       NOT NULL,
    [CubeName]         VARCHAR (128) NOT NULL,
    [RequiresProcess]  BIT           NULL,
    [AnalyticsProcess] BIT           NULL,
    CONSTRAINT [pkcCube] PRIMARY KEY CLUSTERED ([CubeId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [OLAPControl].[Dimension]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [OLAPControl].[Dimension] (
    [DimensionId]   SMALLINT      IDENTITY (1, 1) NOT NULL,
    [DimensionName] VARCHAR (128) NOT NULL,
    CONSTRAINT [pkcDimension] PRIMARY KEY CLUSTERED ([DimensionId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [OLAPControl].[MeasureGroup]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [OLAPControl].[MeasureGroup] (
    [MeasureGroupId]   SMALLINT      IDENTITY (1, 1) NOT NULL,
    [CubeId]           TINYINT       NOT NULL,
    [MeasureGroupName] VARCHAR (128) NOT NULL,
    [CreatedBy]        [sysname]     NOT NULL,
    CONSTRAINT [pkcMeasureGroup] PRIMARY KEY CLUSTERED ([MeasureGroupId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [OLAPControl].[OlapQueryLogArchive]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [OLAPControl].[OlapQueryLogArchive] (
    [MSOLAP_Database]   NVARCHAR (255)  COLLATE Latin1_General_CI_AS_KS_WS NULL,
    [MSOLAP_ObjectPath] NVARCHAR (4000) COLLATE Latin1_General_CI_AS_KS_WS NULL,
    [MSOLAP_User]       NVARCHAR (255)  COLLATE Latin1_General_CI_AS_KS_WS NULL,
    [Dataset]           NVARCHAR (4000) COLLATE Latin1_General_CI_AS_KS_WS NULL,
    [StartTime]         DATETIME        NULL,
    [Duration]          BIGINT          NULL
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Reporting].[Users]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Reporting].[Users] (
    [UserKey]       INT            IDENTITY (100, 1) NOT NULL,
    [UserName]      NVARCHAR (260) NOT NULL,
    [UserNameShort] NVARCHAR (260) NOT NULL,
    CONSTRAINT [PK__Users] PRIMARY KEY CLUSTERED ([UserKey] ASC) ON [PRIMARY]
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Reporting].[StatusCodes]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Reporting].[StatusCodes] (
    [StatusCode] INT           IDENTITY (100, 1) NOT NULL,
    [Status]     NVARCHAR (40) NOT NULL,
    CONSTRAINT [PK_StatusCode] PRIMARY KEY CLUSTERED ([StatusCode] ASC) ON [PRIMARY]
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Reporting].[SourceTypes]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Reporting].[SourceTypes] (
    [SourceType] INT           IDENTITY (1, 1) NOT NULL,
    [Name]       NVARCHAR (20) NOT NULL,
    CONSTRAINT [PK__SourceType] PRIMARY KEY CLUSTERED ([SourceType] ASC) ON [PRIMARY]
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Reporting].[RequestTypes]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Reporting].[RequestTypes] (
    [RequestType] INT           IDENTITY (100, 1) NOT NULL,
    [Name]        NVARCHAR (20) NOT NULL,
    CONSTRAINT [PK__RequestTypes] PRIMARY KEY CLUSTERED ([RequestType] ASC) ON [PRIMARY]
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Reporting].[ReportTypes]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Reporting].[ReportTypes] (
    [ReportType] INT           NOT NULL,
    [Name]       NVARCHAR (20) NOT NULL,
    CONSTRAINT [pkcReportTypes] PRIMARY KEY CLUSTERED ([ReportType] ASC) ON [PRIMARY]
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Reporting].[Reports]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Reporting].[Reports] (
    [ReportKey]       INT              IDENTITY (1, 1) NOT NULL,
    [ReportId]        UNIQUEIDENTIFIER NOT NULL,
    [Path]            NVARCHAR (425)   NOT NULL,
    [SPSite]          NVARCHAR (425)   NULL,
    [SPDocLibrary]    NVARCHAR (425)   NULL,
    [ReportNameShort] NVARCHAR (425)   NOT NULL,
    [Name]            NVARCHAR (425)   NOT NULL,
    [ReportType]      INT              NOT NULL,
    [MachineKey]      INT              NULL,
    CONSTRAINT [pkcReports] PRIMARY KEY CLUSTERED ([ReportKey] ASC) ON [PRIMARY]
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Reporting].[ReportActions]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Reporting].[ReportActions] (
    [ActionType] INT           IDENTITY (1, 1) NOT NULL,
    [Action]     NVARCHAR (26) NULL,
    CONSTRAINT [pkcReportActions] PRIMARY KEY CLUSTERED ([ActionType] ASC) ON [PRIMARY]
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Reporting].[Machines]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Reporting].[Machines] (
    [MachineKey]   INT           IDENTITY (100, 1) NOT NULL,
    [InstanceName] NVARCHAR (38) NOT NULL,
    CONSTRAINT [PK_Machines] PRIMARY KEY CLUSTERED ([MachineKey] ASC) ON [PRIMARY]
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Reporting].[FormatTypes]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Reporting].[FormatTypes] (
    [FormatType] INT           IDENTITY (100, 1) NOT NULL,
    [Format]     NVARCHAR (26) NULL,
    CONSTRAINT [PK__FormatTypes] PRIMARY KEY CLUSTERED ([FormatType] ASC) ON [PRIMARY]
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Reporting].[ExecutionPath]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Reporting].[ExecutionPath] (
    [ExecutionLogID]             UNIQUEIDENTIFIER NOT NULL,
    [ExecutionID]                NVARCHAR (64)    NULL,
    [ActionType]                 INT              NULL,
    [FormatType]                 INT              NULL,
    [StatusCode]                 INT              NULL,
    [TimeStart]                  DATETIME         NULL,
    [TimeEnd]                    DATETIME         NULL,
    [TimeDataRetrieval]          INT              NULL,
    [TimeProcessing]             INT              NULL,
    [TimeRendering]              INT              NULL,
    [ByteCount]                  BIGINT           NULL,
    [RowCount]                   BIGINT           NULL,
    [TotalExecTime]              INT              NULL,
    [ScalabilityTime_Paging]     INT              NULL,
    [ScalabilityTime_Processing] INT              NULL,
    [EstMemoryKB_Paging]         INT              NULL,
    [EstMemoryKB_Processing]     INT              NULL,
    CONSTRAINT [PK__Execution] PRIMARY KEY CLUSTERED ([ExecutionLogID] ASC) ON [PRIMARY]
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Reporting].[ExecutionParameters]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Reporting].[ExecutionParameters] (
    [ExecutionParameterID] UNIQUEIDENTIFIER NOT NULL,
    [Name]                 NVARCHAR (2000)  NOT NULL,
    [Value]                NVARCHAR (MAX)   NOT NULL,
    [ExecutionLogID]       UNIQUEIDENTIFIER NOT NULL,
    PRIMARY KEY CLUSTERED ([ExecutionParameterID] ASC) ON [PRIMARY]
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Reporting].[ExecutionLogs]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Reporting].[ExecutionLogs] (
    [ExecutionLogID]             UNIQUEIDENTIFIER NOT NULL,
    [ReportKey]                  INT              NOT NULL,
    [UserKey]                    INT              NOT NULL,
    [MachineKey]                 INT              NOT NULL,
    [RequestType]                INT              NOT NULL,
    [FormatType]                 INT              NOT NULL,
    [StatusCode]                 INT              NOT NULL,
    [SourceType]                 INT              NOT NULL,
    [TimeStart]                  DATETIME         NOT NULL,
    [TimeEnd]                    DATETIME         NOT NULL,
    [TimeDataRetrieval]          INT              NOT NULL,
    [TimeProcessing]             INT              NOT NULL,
    [TimeRendering]              INT              NOT NULL,
    [ByteCount]                  BIGINT           NOT NULL,
    [RowCount]                   BIGINT           NOT NULL,
    [ExecutionID]                NVARCHAR (64)    NOT NULL,
    [TotalExecTime]              INT              NOT NULL,
    [ActionType]                 INT              NOT NULL,
    [ScalabilityTime_Paging]     INT              NOT NULL,
    [ScalabilityTime_Processing] INT              NOT NULL,
    [EstMemoryKB_Paging]         INT              NOT NULL,
    [EstMemoryKB_Processing]     INT              NOT NULL,
    CONSTRAINT [PK__ExecutionLogs] PRIMARY KEY CLUSTERED ([ExecutionLogID] ASC) ON [PRIMARY]
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Reporting].[Date]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Reporting].[Date] (
    [DateKey]                 INT           NOT NULL,
    [CalendarDate]            VARCHAR (20)  NOT NULL,
    [DayNumberOfWeek]         VARCHAR (10)  NOT NULL,
    [DayNameOfWeek]           VARCHAR (20)  NOT NULL,
    [DayNumberOfMonth]        VARCHAR (10)  NOT NULL,
    [DayNumberOfYear]         VARCHAR (10)  NOT NULL,
    [CalendarWeekId]          INT           NOT NULL,
    [CalendarWeek]            VARCHAR (20)  NOT NULL,
    [CalendarWeekNumberId]    SMALLINT      NOT NULL,
    [CalendarWeekNumber]      VARCHAR (10)  NOT NULL,
    [CalendarMonthId]         INT           NOT NULL,
    [CalendarMonthNumber]     SMALLINT      NOT NULL,
    [CalendarMonthName]       VARCHAR (30)  NOT NULL,
    [CalendarShortMonthName]  VARCHAR (10)  NOT NULL,
    [CalendarMonthYearName]   VARCHAR (30)  NOT NULL,
    [CalendarQuarterId]       INT           NOT NULL,
    [CalendarQuarterName]     VARCHAR (30)  NOT NULL,
    [CalendarQuarterNumber]   SMALLINT      NOT NULL,
    [CalendarQuarterYearName] VARCHAR (30)  NOT NULL,
    [CalendarYear]            INT           NOT NULL,
    [CalendarYearName]        VARCHAR (20)  NOT NULL,
    [FiscalWeekNumber]        VARCHAR (10)  NOT NULL,
    [FiscalMonthId]           INT           NOT NULL,
    [FiscalMonthName]         VARCHAR (30)  NOT NULL,
    [FiscalQuarterId]         INT           NOT NULL,
    [FiscalQuarterName]       VARCHAR (30)  NOT NULL,
    [FiscalYearId]            INT           NOT NULL,
    [FiscalYearName]          VARCHAR (30)  NOT NULL,
    [AnacapWeekNumberId]      INT           NULL,
    [AnacapWeekNumber]        VARCHAR (10)  NULL,
    [IsWeekend]               BIT           NOT NULL,
    [IsHoliday]               BIT           NOT NULL,
    [HolidayName]             VARCHAR (50)  NULL,
    [IsLeapYear]              BIT           NOT NULL,
    [IsWorkingDay]            BIT           NOT NULL,
    [CreatedBy]               VARCHAR (40)  NOT NULL,
    [CreatedDate]             SMALLDATETIME NOT NULL,
    [UpdatedBy]               VARCHAR (40)  NOT NULL,
    [UpdatedDate]             SMALLDATETIME NOT NULL,
    CONSTRAINT [PK_Date] PRIMARY KEY CLUSTERED ([DateKey] ASC) ON [PRIMARY]
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Secure].[Configurations]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Secure].[Configurations] (
    [ConfigurationId] INT           IDENTITY (1, 1) NOT NULL,
    [Name]            VARCHAR (100) NOT NULL,
    [Description]     VARCHAR (250) NOT NULL,
    [Value]           VARCHAR (250) NOT NULL,
    [CreatedAt]       DATETIME      NOT NULL,
    [Value_Enc]       VARCHAR (250) NULL
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [SSIS].[event_messages]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [SSIS].[event_messages] (
    [event_message_id]    BIGINT             NOT NULL,
    [operation_id]        BIGINT             NOT NULL,
    [message_time]        DATETIMEOFFSET (7) NOT NULL,
    [message_type]        SMALLINT           NOT NULL,
    [message_source_type] SMALLINT           NULL,
    [message]             NVARCHAR (MAX)     NULL,
    [extended_info_id]    BIGINT             NULL,
    [package_name]        NVARCHAR (260)     NULL,
    [event_name]          NVARCHAR (1024)    NULL,
    [message_source_name] NVARCHAR (4000)    NULL,
    [message_source_id]   NVARCHAR (38)      NULL,
    [subcomponent_name]   NVARCHAR (4000)    NULL,
    [package_path]        NVARCHAR (MAX)     NULL,
    [execution_path]      NVARCHAR (MAX)     NULL,
    [threadID]            INT                NULL,
    [message_code]        INT                NULL
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [SSIS].[environments]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [SSIS].[environments] (
    [environment_id]   BIGINT          IDENTITY (1, 1) NOT NULL,
    [environment_name] [sysname]       NOT NULL,
    [folder_id]        BIGINT          NOT NULL,
    [description]      NVARCHAR (1024) NULL
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [SSIS].[execution_parameter_values]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [SSIS].[execution_parameter_values] (
    [execution_parameter_id] BIGINT         IDENTITY (1, 1) NOT NULL,
    [execution_id]           BIGINT         NOT NULL,
    [object_type]            SMALLINT       NOT NULL,
    [parameter_data_type]    NVARCHAR (128) NOT NULL,
    [parameter_name]         [sysname]      NOT NULL,
    [parameter_value]        SQL_VARIANT    NULL,
    [sensitive]              BIT            NOT NULL,
    [required]               BIT            NOT NULL,
    [value_set]              BIT            NOT NULL,
    [runtime_override]       BIT            NOT NULL
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [SSIS].[packages]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [SSIS].[packages] (
    [package_id]   BIGINT           NULL,
    [project_id]   BIGINT           NOT NULL,
    [name]         NVARCHAR (260)   NOT NULL,
    [package_guid] UNIQUEIDENTIFIER NOT NULL,
    [description]  NVARCHAR (1024)  NULL
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [SSIS].[projects]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [SSIS].[projects] (
    [project_id]             BIGINT             IDENTITY (1, 1) NOT NULL,
    [folder_id]              BIGINT             NOT NULL,
    [name]                   [sysname]          NOT NULL,
    [description]            NVARCHAR (1024)    NULL,
    [project_format_version] INT                NULL,
    [deployed_by_sid]        VARBINARY (85)     NOT NULL,
    [deployed_by_name]       NVARCHAR (128)     NOT NULL,
    [last_deployed_time]     DATETIMEOFFSET (7) NOT NULL,
    [created_time]           DATETIMEOFFSET (7) NOT NULL,
    [object_version_lsn]     BIGINT             NOT NULL,
    [validation_status]      CHAR (1)           NOT NULL,
    [last_validation_time]   DATETIMEOFFSET (7) NULL
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Test].[UnitDataTester]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Test].[UnitDataTester] (
    [ExecutionParameterId] INT             NOT NULL,
    [Name]                 NVARCHAR (2000) NOT NULL,
    [Value]                NVARCHAR (MAX)  NOT NULL,
    [ExecutionLogId]       INT             NOT NULL,
    [CreatedBy]            VARCHAR (25)    NOT NULL,
    [CreatedDate]          DATETIME        NOT NULL,
    [UpdatedBy]            VARCHAR (25)    NOT NULL,
    [UpdatedDate]          DATETIME        NOT NULL,
    [RowVersion]           VARCHAR (25)    NOT NULL
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Test].[ValidationTest]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Test].[ValidationTest] (
    [ValidationTestId]    SMALLINT       NOT NULL,
    [ValidationTypeId]    TINYINT        NOT NULL,
    [ValidationSourceId]  TINYINT        NOT NULL,
    [SourceObject]        VARCHAR (4000) NOT NULL,
    [TargetObject]        VARCHAR (4000) NOT NULL,
    [PackageName]         VARCHAR (200)  NOT NULL,
    [WarningPercent]      DECIMAL (5, 2) NOT NULL,
    [HaltPercent]         DECIMAL (5, 2) NOT NULL,
    [EnableWarning]       BIT            NOT NULL,
    [EnableHalt]          BIT            NOT NULL,
    [ValidationTestName]  VARCHAR (200)  NULL,
    [ValidationTestNotes] VARCHAR (500)  NULL,
    [CreatedBy]           NVARCHAR (128) NOT NULL,
    [CreatedDate]         DATETIME       NOT NULL,
    [UpdatedBy]           NVARCHAR (128) NOT NULL,
    [UpdatedDate]         DATETIME       NOT NULL,
    PRIMARY KEY CLUSTERED ([ValidationTestId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Test].[ValidationTestExecution]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Test].[ValidationTestExecution] (
    [ValidationTestExecutionId] INT           IDENTITY (1, 1) NOT NULL,
    [LoadId]                    INT           NOT NULL,
    [ValidationTestId]          SMALLINT      NOT NULL,
    [TestStatus]                VARCHAR (4)   NOT NULL,
    [SourceResult]              VARCHAR (30)  NOT NULL,
    [TargetResult]              VARCHAR (30)  NOT NULL,
    [ExecutionTime]             DATETIME      NOT NULL,
    [CreatedBy]                 VARCHAR (128) NOT NULL
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Test].[ValidationType]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Test].[ValidationType] (
    [ValidationTypeId]   TINYINT        NOT NULL,
    [ValidationTypeName] VARCHAR (200)  NOT NULL,
    [CreatedBy]          NVARCHAR (128) NOT NULL,
    [CreatedDate]        DATETIME       NOT NULL,
    [UpdatedBy]          NVARCHAR (128) NOT NULL,
    [UpdatedDate]        DATETIME       NOT NULL,
    PRIMARY KEY CLUSTERED ([ValidationTypeId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Test].[ValidationSource]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Test].[ValidationSource] (
    [ValidationSourceId]   TINYINT        NOT NULL,
    [ValidationSourceName] VARCHAR (50)   NOT NULL,
    [CreatedBy]            NVARCHAR (128) NOT NULL,
    [CreatedDate]          DATETIME       NOT NULL,
    [UpdatedBy]            NVARCHAR (128) NOT NULL,
    [UpdatedDate]          DATETIME       NOT NULL,
    PRIMARY KEY CLUSTERED ([ValidationSourceId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating unnamed constraint on [Audit].[SourceFileProcessStream]...';


GO
ALTER TABLE [Audit].[SourceFileProcessStream]
    ADD DEFAULT (suser_sname()) FOR [CreatedBy];


GO
PRINT N'Creating unnamed constraint on [Audit].[SourceFileProcessStream]...';


GO
ALTER TABLE [Audit].[SourceFileProcessStream]
    ADD DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [Audit].[SourceFileProcessStream]...';


GO
ALTER TABLE [Audit].[SourceFileProcessStream]
    ADD DEFAULT (suser_sname()) FOR [UpdatedBy];


GO
PRINT N'Creating unnamed constraint on [Audit].[SourceFileProcessStream]...';


GO
ALTER TABLE [Audit].[SourceFileProcessStream]
    ADD DEFAULT (getdate()) FOR [UpdatedDate];


GO
PRINT N'Creating unnamed constraint on [Audit].[ExecutionLogs]...';


GO
ALTER TABLE [Audit].[ExecutionLogs]
    ADD DEFAULT (suser_sname()) FOR [CreatedBy];


GO
PRINT N'Creating unnamed constraint on [Audit].[ExecutionLogs]...';


GO
ALTER TABLE [Audit].[ExecutionLogs]
    ADD DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [Audit].[ExecutionLogs]...';


GO
ALTER TABLE [Audit].[ExecutionLogs]
    ADD DEFAULT (suser_sname()) FOR [UpdatedBy];


GO
PRINT N'Creating unnamed constraint on [Audit].[ExecutionLogs]...';


GO
ALTER TABLE [Audit].[ExecutionLogs]
    ADD DEFAULT (getdate()) FOR [UpdatedDate];


GO
PRINT N'Creating unnamed constraint on [Audit].[ErrorRows]...';


GO
ALTER TABLE [Audit].[ErrorRows]
    ADD DEFAULT (suser_sname()) FOR [CreatedBy];


GO
PRINT N'Creating unnamed constraint on [Audit].[ErrorRows]...';


GO
ALTER TABLE [Audit].[ErrorRows]
    ADD DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [Audit].[ErrorRows]...';


GO
ALTER TABLE [Audit].[ErrorRows]
    ADD DEFAULT (suser_sname()) FOR [UpdatedBy];


GO
PRINT N'Creating unnamed constraint on [Audit].[ErrorRows]...';


GO
ALTER TABLE [Audit].[ErrorRows]
    ADD DEFAULT (getdate()) FOR [UpdatedDate];


GO
PRINT N'Creating unnamed constraint on [Audit].[RunLogs]...';


GO
ALTER TABLE [Audit].[RunLogs]
    ADD DEFAULT (suser_sname()) FOR [CreatedBy];


GO
PRINT N'Creating unnamed constraint on [Audit].[RunLogs]...';


GO
ALTER TABLE [Audit].[RunLogs]
    ADD DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [Audit].[RunLogs]...';


GO
ALTER TABLE [Audit].[RunLogs]
    ADD DEFAULT (suser_sname()) FOR [UpdatedBy];


GO
PRINT N'Creating unnamed constraint on [Audit].[RunLogs]...';


GO
ALTER TABLE [Audit].[RunLogs]
    ADD DEFAULT (getdate()) FOR [UpdatedDate];


GO
PRINT N'Creating unnamed constraint on [Audit].[RowThroughput]...';


GO
ALTER TABLE [Audit].[RowThroughput]
    ADD DEFAULT (suser_sname()) FOR [CreatedBy];


GO
PRINT N'Creating unnamed constraint on [Audit].[RowThroughput]...';


GO
ALTER TABLE [Audit].[RowThroughput]
    ADD DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [Audit].[RowThroughput]...';


GO
ALTER TABLE [Audit].[RowThroughput]
    ADD DEFAULT (suser_sname()) FOR [UpdatedBy];


GO
PRINT N'Creating unnamed constraint on [Audit].[RowThroughput]...';


GO
ALTER TABLE [Audit].[RowThroughput]
    ADD DEFAULT (getdate()) FOR [UpdatedDate];


GO
PRINT N'Creating unnamed constraint on [Audit].[PackageLoad]...';


GO
ALTER TABLE [Audit].[PackageLoad]
    ADD DEFAULT (suser_sname()) FOR [CreatedBy];


GO
PRINT N'Creating unnamed constraint on [Audit].[PackageLoad]...';


GO
ALTER TABLE [Audit].[PackageLoad]
    ADD DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [Audit].[PackageLoad]...';


GO
ALTER TABLE [Audit].[PackageLoad]
    ADD DEFAULT (suser_sname()) FOR [UpdatedBy];


GO
PRINT N'Creating unnamed constraint on [Audit].[PackageLoad]...';


GO
ALTER TABLE [Audit].[PackageLoad]
    ADD DEFAULT (getdate()) FOR [UpdatedDate];


GO
PRINT N'Creating unnamed constraint on [Audit].[ExecutionPath]...';


GO
ALTER TABLE [Audit].[ExecutionPath]
    ADD DEFAULT (suser_sname()) FOR [CreatedBy];


GO
PRINT N'Creating unnamed constraint on [Audit].[ExecutionPath]...';


GO
ALTER TABLE [Audit].[ExecutionPath]
    ADD DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [Audit].[ExecutionPath]...';


GO
ALTER TABLE [Audit].[ExecutionPath]
    ADD DEFAULT (suser_sname()) FOR [UpdatedBy];


GO
PRINT N'Creating unnamed constraint on [Audit].[ExecutionPath]...';


GO
ALTER TABLE [Audit].[ExecutionPath]
    ADD DEFAULT (getdate()) FOR [UpdatedDate];


GO
PRINT N'Creating unnamed constraint on [Audit].[ExecutionParameters]...';


GO
ALTER TABLE [Audit].[ExecutionParameters]
    ADD DEFAULT (suser_sname()) FOR [CreatedBy];


GO
PRINT N'Creating unnamed constraint on [Audit].[ExecutionParameters]...';


GO
ALTER TABLE [Audit].[ExecutionParameters]
    ADD DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [Audit].[ExecutionParameters]...';


GO
ALTER TABLE [Audit].[ExecutionParameters]
    ADD DEFAULT (suser_sname()) FOR [UpdatedBy];


GO
PRINT N'Creating unnamed constraint on [Audit].[ExecutionParameters]...';


GO
ALTER TABLE [Audit].[ExecutionParameters]
    ADD DEFAULT (getdate()) FOR [UpdatedDate];


GO
PRINT N'Creating unnamed constraint on [Audit].[ErrorLog]...';


GO
ALTER TABLE [Audit].[ErrorLog]
    ADD DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [Audit].[ErrorLog]...';


GO
ALTER TABLE [Audit].[ErrorLog]
    ADD DEFAULT ((-1)) FOR [CreatedBy];


GO
PRINT N'Creating unnamed constraint on [Audit].[ErrorLog]...';


GO
ALTER TABLE [Audit].[ErrorLog]
    ADD DEFAULT (suser_sname()) FOR [UpdatedBy];


GO
PRINT N'Creating unnamed constraint on [Audit].[ErrorLog]...';


GO
ALTER TABLE [Audit].[ErrorLog]
    ADD DEFAULT (getdate()) FOR [UpdatedDate];


GO
PRINT N'Creating unnamed constraint on [Audit].[ErrorInstanceLog]...';


GO
ALTER TABLE [Audit].[ErrorInstanceLog]
    ADD DEFAULT (suser_sname()) FOR [CreatedBy];


GO
PRINT N'Creating unnamed constraint on [Audit].[ErrorInstanceLog]...';


GO
ALTER TABLE [Audit].[ErrorInstanceLog]
    ADD DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [Audit].[ErrorInstanceLog]...';


GO
ALTER TABLE [Audit].[ErrorInstanceLog]
    ADD DEFAULT (suser_sname()) FOR [UpdatedBy];


GO
PRINT N'Creating unnamed constraint on [Audit].[ErrorInstanceLog]...';


GO
ALTER TABLE [Audit].[ErrorInstanceLog]
    ADD DEFAULT (getdate()) FOR [UpdatedDate];


GO
PRINT N'Creating unnamed constraint on [Control].[SourceFile]...';


GO
ALTER TABLE [Control].[SourceFile]
    ADD DEFAULT ((0)) FOR [UnloadFile];


GO
PRINT N'Creating unnamed constraint on [Control].[SourceFile]...';


GO
ALTER TABLE [Control].[SourceFile]
    ADD DEFAULT (suser_sname()) FOR [CreatedBy];


GO
PRINT N'Creating unnamed constraint on [Control].[SourceFile]...';


GO
ALTER TABLE [Control].[SourceFile]
    ADD DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [Control].[SourceFile]...';


GO
ALTER TABLE [Control].[SourceFile]
    ADD DEFAULT ((0)) FOR [32BitStageRequired];


GO
PRINT N'Creating unnamed constraint on [Control].[SourceFile]...';


GO
ALTER TABLE [Control].[SourceFile]
    ADD DEFAULT ((0)) FOR [PurgeFromArchive];


GO
PRINT N'Creating unnamed constraint on [Control].[FileExtensionType]...';


GO
ALTER TABLE [Control].[FileExtensionType]
    ADD DEFAULT (suser_sname()) FOR [CreatedBy];


GO
PRINT N'Creating unnamed constraint on [Control].[FileExtensionType]...';


GO
ALTER TABLE [Control].[FileExtensionType]
    ADD DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [Control].[FileExtensionType]...';


GO
ALTER TABLE [Control].[FileExtensionType]
    ADD DEFAULT (suser_sname()) FOR [UpdatedBy];


GO
PRINT N'Creating unnamed constraint on [Control].[FileExtensionType]...';


GO
ALTER TABLE [Control].[FileExtensionType]
    ADD DEFAULT (getdate()) FOR [UpdatedDate];


GO
PRINT N'Creating unnamed constraint on [Control].[SourceFileType]...';


GO
ALTER TABLE [Control].[SourceFileType]
    ADD DEFAULT ((0)) FOR [32BitStageRequired];


GO
PRINT N'Creating unnamed constraint on [Control].[EventActionType]...';


GO
ALTER TABLE [Control].[EventActionType]
    ADD DEFAULT (suser_sname()) FOR [CreatedBy];


GO
PRINT N'Creating unnamed constraint on [Control].[EventActionType]...';


GO
ALTER TABLE [Control].[EventActionType]
    ADD DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [Control].[EventActionType]...';


GO
ALTER TABLE [Control].[EventActionType]
    ADD DEFAULT (suser_sname()) FOR [UpdatedBy];


GO
PRINT N'Creating unnamed constraint on [Control].[EventActionType]...';


GO
ALTER TABLE [Control].[EventActionType]
    ADD DEFAULT (getdate()) FOR [UpdatedDate];


GO
PRINT N'Creating unnamed constraint on [Control].[Notification]...';


GO
ALTER TABLE [Control].[Notification]
    ADD DEFAULT (suser_sname()) FOR [CreatedBy];


GO
PRINT N'Creating unnamed constraint on [Control].[Application]...';


GO
ALTER TABLE [Control].[Application]
    ADD DEFAULT (suser_sname()) FOR [CreatedBy];


GO
PRINT N'Creating unnamed constraint on [Control].[Application]...';


GO
ALTER TABLE [Control].[Application]
    ADD DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [Control].[Application]...';


GO
ALTER TABLE [Control].[Application]
    ADD DEFAULT (suser_sname()) FOR [UpdatedBy];


GO
PRINT N'Creating unnamed constraint on [Control].[Application]...';


GO
ALTER TABLE [Control].[Application]
    ADD DEFAULT (getdate()) FOR [UpdatedDate];


GO
PRINT N'Creating unnamed constraint on [Control].[EntityType]...';


GO
ALTER TABLE [Control].[EntityType]
    ADD DEFAULT (suser_sname()) FOR [CreatedBy];


GO
PRINT N'Creating unnamed constraint on [Control].[EntityType]...';


GO
ALTER TABLE [Control].[EntityType]
    ADD DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [Control].[EntityType]...';


GO
ALTER TABLE [Control].[EntityType]
    ADD DEFAULT (suser_sname()) FOR [UpdatedBy];


GO
PRINT N'Creating unnamed constraint on [Control].[EntityType]...';


GO
ALTER TABLE [Control].[EntityType]
    ADD DEFAULT (getdate()) FOR [UpdatedDate];


GO
PRINT N'Creating unnamed constraint on [OLAPControl].[MeasureGroup]...';


GO
ALTER TABLE [OLAPControl].[MeasureGroup]
    ADD DEFAULT (suser_sname()) FOR [CreatedBy];


GO
PRINT N'Creating <unnamed>...';


GO
ALTER TABLE [Reporting].[ExecutionParameters]
    ADD DEFAULT (newid()) FOR [ExecutionParameterID];


GO
PRINT N'Creating [Reporting].[DF__Execution__Execu__22AA2996]...';


GO
ALTER TABLE [Reporting].[ExecutionLogs]
    ADD CONSTRAINT [DF__Execution__Execu__22AA2996] DEFAULT (newid()) FOR [ExecutionLogID];


GO
PRINT N'Creating unnamed constraint on [Test].[ValidationTest]...';


GO
ALTER TABLE [Test].[ValidationTest]
    ADD DEFAULT (suser_sname()) FOR [CreatedBy];


GO
PRINT N'Creating unnamed constraint on [Test].[ValidationTest]...';


GO
ALTER TABLE [Test].[ValidationTest]
    ADD DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [Test].[ValidationTest]...';


GO
ALTER TABLE [Test].[ValidationTest]
    ADD DEFAULT (suser_sname()) FOR [UpdatedBy];


GO
PRINT N'Creating unnamed constraint on [Test].[ValidationTest]...';


GO
ALTER TABLE [Test].[ValidationTest]
    ADD DEFAULT (getdate()) FOR [UpdatedDate];


GO
PRINT N'Creating unnamed constraint on [Test].[ValidationType]...';


GO
ALTER TABLE [Test].[ValidationType]
    ADD DEFAULT (suser_sname()) FOR [CreatedBy];


GO
PRINT N'Creating unnamed constraint on [Test].[ValidationType]...';


GO
ALTER TABLE [Test].[ValidationType]
    ADD DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [Test].[ValidationType]...';


GO
ALTER TABLE [Test].[ValidationType]
    ADD DEFAULT (suser_sname()) FOR [UpdatedBy];


GO
PRINT N'Creating unnamed constraint on [Test].[ValidationType]...';


GO
ALTER TABLE [Test].[ValidationType]
    ADD DEFAULT (getdate()) FOR [UpdatedDate];


GO
PRINT N'Creating unnamed constraint on [Test].[ValidationSource]...';


GO
ALTER TABLE [Test].[ValidationSource]
    ADD DEFAULT (suser_sname()) FOR [CreatedBy];


GO
PRINT N'Creating unnamed constraint on [Test].[ValidationSource]...';


GO
ALTER TABLE [Test].[ValidationSource]
    ADD DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [Test].[ValidationSource]...';


GO
ALTER TABLE [Test].[ValidationSource]
    ADD DEFAULT (suser_sname()) FOR [UpdatedBy];


GO
PRINT N'Creating unnamed constraint on [Test].[ValidationSource]...';


GO
ALTER TABLE [Test].[ValidationSource]
    ADD DEFAULT (getdate()) FOR [UpdatedDate];


GO
PRINT N'Creating [Audit].[seqErrorLogId]...';


GO
CREATE SEQUENCE [Audit].[seqErrorLogId]
    AS BIGINT
    START WITH 1
    INCREMENT BY 1
    MINVALUE 0;


GO
PRINT N'Creating [Control].[PartitionKey]...';


GO
CREATE SEQUENCE [Control].[PartitionKey]
    AS INT
    START WITH 1
    INCREMENT BY 1
    MINVALUE 0
    MAXVALUE 15000;


GO
PRINT N'Creating unnamed constraint on [Audit].[ErrorLog]...';


GO
ALTER TABLE [Audit].[ErrorLog]
    ADD DEFAULT (NEXT VALUE FOR [Audit].[seqErrorLogId]) FOR [ErrorLogId];


GO
PRINT N'Creating [Audit].[fkErrorLog_Entity]...';


GO
ALTER TABLE [Audit].[ErrorLog] WITH NOCHECK
    ADD CONSTRAINT [fkErrorLog_Entity] FOREIGN KEY ([EntityId]) REFERENCES [Control].[Entity] ([EntityId]);


GO
PRINT N'Creating [Audit].[fkErrorLog_Status]...';


GO
ALTER TABLE [Audit].[ErrorLog] WITH NOCHECK
    ADD CONSTRAINT [fkErrorLog_Status] FOREIGN KEY ([StatusId]) REFERENCES [Control].[Status] ([StatusId]);


GO
PRINT N'Creating [Audit].[fkErrorInstanceLog_ErrorLog]...';


GO
ALTER TABLE [Audit].[ErrorInstanceLog] WITH NOCHECK
    ADD CONSTRAINT [fkErrorInstanceLog_ErrorLog] FOREIGN KEY ([ErrorLogId]) REFERENCES [Audit].[ErrorLog] ([ErrorLogId]);


GO
PRINT N'Creating [Control].[fkEntity_EntityType]...';


GO
ALTER TABLE [Control].[Entity] WITH NOCHECK
    ADD CONSTRAINT [fkEntity_EntityType] FOREIGN KEY ([EntityTypeId]) REFERENCES [Control].[EntityType] ([EntityTypeId]);


GO
PRINT N'Creating [Control].[fkEntity_SourceFile]...';


GO
ALTER TABLE [Control].[Entity] WITH NOCHECK
    ADD CONSTRAINT [fkEntity_SourceFile] FOREIGN KEY ([SourceFileId]) REFERENCES [Control].[SourceFile] ([SourceFileId]);


GO
PRINT N'Creating [Control].[fkEntity_Application]...';


GO
ALTER TABLE [Control].[Entity] WITH NOCHECK
    ADD CONSTRAINT [fkEntity_Application] FOREIGN KEY ([ApplicationId]) REFERENCES [Control].[Application] ([ApplicationId]);


GO
PRINT N'Creating [Control].[fkSourceFile_ExtensionType]...';


GO
ALTER TABLE [Control].[SourceFile] WITH NOCHECK
    ADD CONSTRAINT [fkSourceFile_ExtensionType] FOREIGN KEY ([FileExtensionTypeId]) REFERENCES [Control].[FileExtensionType] ([FileExtensionTypeId]);


GO
PRINT N'Creating [Control].[fkSourceFile_SourceFile]...';


GO
ALTER TABLE [Control].[SourceFile] WITH NOCHECK
    ADD CONSTRAINT [fkSourceFile_SourceFile] FOREIGN KEY ([ParentSourceFileId]) REFERENCES [Control].[SourceFile] ([SourceFileId]);


GO
PRINT N'Creating [Control].[fkSourceFile_SourceFileType]...';


GO
ALTER TABLE [Control].[SourceFile] WITH NOCHECK
    ADD CONSTRAINT [fkSourceFile_SourceFileType] FOREIGN KEY ([SourceFileTypeId]) REFERENCES [Control].[SourceFileType] ([SourceFileTypeId]);


GO
PRINT N'Creating [Control].[fkSourceFile_Application]...';


GO
ALTER TABLE [Control].[SourceFile] WITH NOCHECK
    ADD CONSTRAINT [fkSourceFile_Application] FOREIGN KEY ([ApplicationId]) REFERENCES [Control].[Application] ([ApplicationId]);


GO
PRINT N'Creating [Control].[fkFileExtensionType_FileTypeGroup]...';


GO
ALTER TABLE [Control].[FileExtensionType] WITH NOCHECK
    ADD CONSTRAINT [fkFileExtensionType_FileTypeGroup] FOREIGN KEY ([FileTypeGroupId]) REFERENCES [Control].[FileTypeGroup] ([FileTypeGroupId]);


GO
PRINT N'Creating [Control].[fkDistributionGroup]...';


GO
ALTER TABLE [Control].[DistributionGroupUser] WITH NOCHECK
    ADD CONSTRAINT [fkDistributionGroup] FOREIGN KEY ([DistributionGroupId]) REFERENCES [Control].[DistributionGroup] ([DistributionGroupId]);


GO
PRINT N'Creating [Control].[fkNotification_NotificationProcessTypeId]...';


GO
ALTER TABLE [Control].[Notification] WITH NOCHECK
    ADD CONSTRAINT [fkNotification_NotificationProcessTypeId] FOREIGN KEY ([NotificationProcessTypeId]) REFERENCES [Control].[NotificationProcessTypes] ([NotificationProcessTypeId]);


GO
PRINT N'Creating [Control].[fkNotification_NotificationSeverity]...';


GO
ALTER TABLE [Control].[Notification] WITH NOCHECK
    ADD CONSTRAINT [fkNotification_NotificationSeverity] FOREIGN KEY ([NotificationSeverityId]) REFERENCES [Control].[NotificationSeverity] ([NotificationSeverityId]);


GO
PRINT N'Creating [Control].[fkNotification_NotificationStatus]...';


GO
ALTER TABLE [Control].[Notification] WITH NOCHECK
    ADD CONSTRAINT [fkNotification_NotificationStatus] FOREIGN KEY ([NotificationStatusId]) REFERENCES [Control].[NotificationStatus] ([NotificationStatusId]);


GO
PRINT N'Creating [Control].[fkNotification_NotificationType]...';


GO
ALTER TABLE [Control].[Notification] WITH NOCHECK
    ADD CONSTRAINT [fkNotification_NotificationType] FOREIGN KEY ([NotificationTypeId]) REFERENCES [Control].[NotificationType] ([NotificationTypeId]);


GO
PRINT N'Creating [Control].[fkNotificationGroupMembers_NotificationGroupID]...';


GO
ALTER TABLE [Control].[NotificationGroupMembers] WITH NOCHECK
    ADD CONSTRAINT [fkNotificationGroupMembers_NotificationGroupID] FOREIGN KEY ([NotificationGroupID]) REFERENCES [Control].[NotificationGroups] ([NotificationGroupID]);


GO
PRINT N'Creating [Control].[fkNotificationGroupMembers_NotificationSubscriberID]...';


GO
ALTER TABLE [Control].[NotificationGroupMembers] WITH NOCHECK
    ADD CONSTRAINT [fkNotificationGroupMembers_NotificationSubscriberID] FOREIGN KEY ([NotificationSubscriberID]) REFERENCES [Control].[NotificationSubscribers] ([NotificationSubscriberID]);


GO
PRINT N'Creating [Control].[fkNotificationEmailMessageFormats_NotificationMessageTypeId]...';


GO
ALTER TABLE [Control].[NotificationEmailMessageFormats] WITH NOCHECK
    ADD CONSTRAINT [fkNotificationEmailMessageFormats_NotificationMessageTypeId] FOREIGN KEY ([NotificationMessageTypeId]) REFERENCES [Control].[NotificationMessageType] ([NotificationMessageTypeId]);


GO
PRINT N'Creating [Control].[fkDataQualityRule_RuleType]...';


GO
ALTER TABLE [Control].[DataQualityRule] WITH NOCHECK
    ADD CONSTRAINT [fkDataQualityRule_RuleType] FOREIGN KEY ([RuleTypeId]) REFERENCES [Control].[RuleType] ([RuleTypeId]);


GO
PRINT N'Creating [Control].[fkNotificationDistibutionConfig_NotificationGroupID]...';


GO
ALTER TABLE [Control].[NotificationDistibutionConfig] WITH NOCHECK
    ADD CONSTRAINT [fkNotificationDistibutionConfig_NotificationGroupID] FOREIGN KEY ([NotificationGroupID]) REFERENCES [Control].[NotificationGroups] ([NotificationGroupID]);


GO
PRINT N'Creating [Control].[fkNotificationDistibutionConfig_NotificationSeverityID]...';


GO
ALTER TABLE [Control].[NotificationDistibutionConfig] WITH NOCHECK
    ADD CONSTRAINT [fkNotificationDistibutionConfig_NotificationSeverityID] FOREIGN KEY ([NotificationSeverityId]) REFERENCES [Control].[NotificationSeverity] ([NotificationSeverityId]);


GO
PRINT N'Creating [Control].[fkNotificationDistibutionConfig_NotificationSubscriberID]...';


GO
ALTER TABLE [Control].[NotificationDistibutionConfig] WITH NOCHECK
    ADD CONSTRAINT [fkNotificationDistibutionConfig_NotificationSubscriberID] FOREIGN KEY ([NotificationSubscriberID]) REFERENCES [Control].[NotificationSubscribers] ([NotificationSubscriberID]);


GO
PRINT N'Creating [Control].[fkRuleSetObject_RuleSet]...';


GO
ALTER TABLE [Control].[RuleSetObject] WITH NOCHECK
    ADD CONSTRAINT [fkRuleSetObject_RuleSet] FOREIGN KEY ([RuleSetId]) REFERENCES [Control].[RuleSet] ([RuleSetId]);


GO
PRINT N'Creating [Metadata].[fkObject]...';


GO
ALTER TABLE [Metadata].[ObjectIdentifier] WITH NOCHECK
    ADD CONSTRAINT [fkObject] FOREIGN KEY ([ObjectId]) REFERENCES [Metadata].[Object] ([ObjectId]);


GO
PRINT N'Creating [Metadata].[fkObjectAttribute_Object]...';


GO
ALTER TABLE [Metadata].[ObjectAttribute] WITH NOCHECK
    ADD CONSTRAINT [fkObjectAttribute_Object] FOREIGN KEY ([ObjectId]) REFERENCES [Metadata].[Object] ([ObjectId]);


GO
PRINT N'Creating [Metadata].[fkObject_ObjectType]...';


GO
ALTER TABLE [Metadata].[Object] WITH NOCHECK
    ADD CONSTRAINT [fkObject_ObjectType] FOREIGN KEY ([TypeId]) REFERENCES [Metadata].[ObjectType] ([ObjectTypeId]);


GO
PRINT N'Creating [Metadata].[fkObject_Source]...';


GO
ALTER TABLE [Metadata].[Object] WITH NOCHECK
    ADD CONSTRAINT [fkObject_Source] FOREIGN KEY ([SourceId]) REFERENCES [Metadata].[Source] ([SourceId]);


GO
PRINT N'Creating [Metadata].[fkObjectRelationship_Object]...';


GO
ALTER TABLE [Metadata].[ObjectRelationship] WITH NOCHECK
    ADD CONSTRAINT [fkObjectRelationship_Object] FOREIGN KEY ([FromObjectId]) REFERENCES [Metadata].[Object] ([ObjectId]);


GO
PRINT N'Creating [Metadata].[fkObjectRelationship_Object1]...';


GO
ALTER TABLE [Metadata].[ObjectRelationship] WITH NOCHECK
    ADD CONSTRAINT [fkObjectRelationship_Object1] FOREIGN KEY ([ToObjectId]) REFERENCES [Metadata].[Object] ([ObjectId]);


GO
PRINT N'Creating [Metadata].[fkObjectRelationship_RelationshipType]...';


GO
ALTER TABLE [Metadata].[ObjectRelationship] WITH NOCHECK
    ADD CONSTRAINT [fkObjectRelationship_RelationshipType] FOREIGN KEY ([RelationshipTypeId]) REFERENCES [Metadata].[RelationshipType] ([RelationshipTypeId]);


GO
PRINT N'Creating [OLAPControl].[fkMeasureGroupPartition_MeasureGroup]...';


GO
ALTER TABLE [OLAPControl].[MeasureGroupPartition] WITH NOCHECK
    ADD CONSTRAINT [fkMeasureGroupPartition_MeasureGroup] FOREIGN KEY ([MeasureGroupId]) REFERENCES [OLAPControl].[MeasureGroup] ([MeasureGroupId]);


GO
PRINT N'Creating [OLAPControl].[fkMeasureGroupDimensionDimension]...';


GO
ALTER TABLE [OLAPControl].[MeasureGroupDimension] WITH NOCHECK
    ADD CONSTRAINT [fkMeasureGroupDimensionDimension] FOREIGN KEY ([DimensionId]) REFERENCES [OLAPControl].[Dimension] ([DimensionId]);


GO
PRINT N'Creating [OLAPControl].[fkMeasureGroupDimensionMeasureGroup]...';


GO
ALTER TABLE [OLAPControl].[MeasureGroupDimension] WITH NOCHECK
    ADD CONSTRAINT [fkMeasureGroupDimensionMeasureGroup] FOREIGN KEY ([MeasureGroupId]) REFERENCES [OLAPControl].[MeasureGroup] ([MeasureGroupId]);


GO
PRINT N'Creating [OLAPControl].[fkCubeDatabase]...';


GO
ALTER TABLE [OLAPControl].[Cube] WITH NOCHECK
    ADD CONSTRAINT [fkCubeDatabase] FOREIGN KEY ([DatabaseId]) REFERENCES [OLAPControl].[Database] ([DatabaseId]);


GO
PRINT N'Creating [OLAPControl].[fkMeasureGroupCube]...';


GO
ALTER TABLE [OLAPControl].[MeasureGroup] WITH NOCHECK
    ADD CONSTRAINT [fkMeasureGroupCube] FOREIGN KEY ([CubeId]) REFERENCES [OLAPControl].[Cube] ([CubeId]);


GO
PRINT N'Creating [Config].[ObtainVariable]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE FUNCTION [Config].[ObtainVariable]
( 
 -- Add the parameters for the function here
 @VariableName Varchar(50)
)
RETURNS TABLE 
AS
RETURN 
(
 -- Add the SELECT statement with parameter references here
 SELECT [VariableId], 
    [Name], 
    [Value],
    [Type] 
FROM [Config].[Variable] 
WHERE [Name] = @VariableName
)
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[SpiltCSV]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE FUNCTION [Control].[SpiltCSV] (@input AS Varchar(4000) )
RETURNS
      @Result TABLE(Value BIGINT)
AS
BEGIN
      DECLARE @str VARCHAR(20)
      DECLARE @ind Int
      IF(@input is not null)
      BEGIN
            SET @ind = CharIndex(',',@input)
            WHILE @ind > 0
            BEGIN
                  SET @str = SUBSTRING(@input,1,@ind-1)
                  SET @input = SUBSTRING(@input,@ind+1,LEN(@input)-@ind)
                  INSERT INTO @Result values (@str)
                  SET @ind = CharIndex(',',@input)
            END
            SET @str = @input
            INSERT INTO @Result values (@str)
      END
      RETURN
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Audit].[vPackageLoadThroughput]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE VIEW [Audit].[vPackageLoadThroughput]
AS 
SELECT
	 PL.LoadId
	,PL.ParentLoadId
	,PL.PackageName
	,PL.LoadStatusId
	,PL.StartTime
	,PL.EndTime
	,PL.Duration
	,RT.ExtractedRows
	,RT.InsertedRows
	,RT.UpdatedRows
	,RT.DeletedRows
	,RT.ArchivedRows
	,RT.FailedRows
	,RT.BadRows
	,RT.EntityId
	,RT.ProcessStream
	,PL.ExecutionId
	,PL.EnvironmentId
	,PL.ProjectId
	,PL.ExecutionGUID
	,PL.PackageVersionGUID
	,PL.PackageGUID
FROM
	Audit.PackageLoad PL
	LEFT OUTER JOIN Audit.RowThroughput RT
	  ON PL.LoadId = RT.LoadId;
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Audit].[vPackage]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO

CREATE VIEW [Audit].[vPackage]
AS 	
SELECT 
    MAX([package_id]) AS [package_id]
   ,[project_id]
   ,[name]
   ,[package_guid]
   ,[description]
FROM 
    [SSIS].[packages]
GROUP BY 
    [name]
   ,[package_guid]
   ,[description]
   ,[project_id];
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Audit].[vProject]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO

CREATE VIEW [Audit].[vProject]
AS
SELECT 
    project_id
   ,folder_id
   ,name
   ,description
   ,project_format_version
   ,deployed_by_sid
   ,deployed_by_name
   ,last_deployed_time
   ,created_time
   ,object_version_lsn
   ,validation_status
   ,last_validation_time
FROM     
   [SSIS].projects;
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Audit].[vAuditLog]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO

CREATE VIEW [Audit].[vAuditLog]
AS
SELECT [event_message_id]
      ,[operation_id]
      ,[message_time]
      ,[message_type]
      ,[message_source_type]
      ,[message]
      ,[extended_info_id]
      ,[package_name]
      ,[event_name]
      ,[message_source_name]
      ,[message_source_id]
      ,[subcomponent_name]
      ,[package_path]
      ,[execution_path]
      ,[threadID]
      ,[message_code]
  FROM [SSIS].[event_messages]
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Audit].[vEnvironment]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO

CREATE VIEW [Audit].[vEnvironment]
AS 
SELECT  
	 [environment_id]
	,[environment_name]
	,[folder_id]
	,[description]
FROM 
	[SSIS].environments;
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Audit].[vExecutionParameterValues]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO

CREATE VIEW [Audit].[vExecutionParameterValues]

AS

SELECT 
	execution_parameter_id
	,execution_id
	,object_type
	,parameter_data_type
	,parameter_name
	,parameter_value
	,sensitive
	,required
	,value_set
	,runtime_override

FROM [SSIS].execution_parameter_values
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[vLoadProcessStream]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE VIEW [Control].[vLoadProcessStream]
	AS 

	WITH Loads
	as
	(
	SELECT  LoadId GlobalLoadId,
			LoadId, 
			ParentLoadId
		FROM [Audit].[PackageLoad]
		WHERE PackageName = 'GlobalProcess.ProcessFeeds.dtsx'
	UNION ALL 
	SELECT  L.GlobalLoadId,
			PL.LoadId, 
			PL.ParentLoadId
		FROM [Audit].[PackageLoad] PL inner join
			Loads L on PL.ParentLoadId = L.LoadId
	)


	SELECT S.GlobalLoadId,
		S.[EntityId],
		EPS.[EntityProcessStreamId],
		EPS.[LoadProcess],
		EPS.[ProcessStream],
		S.[Name],
		S.[Schema],
		S.[Table]

	FROM
	(
		SELECT L.GlobalLoadId,
			E.[EntityId],
			MAX(EPS.[EntityProcessStreamId]) EntityProcessStreamId,
			ET.[Name],
			ET.[Schema],
			ET.[Table]
	
		FROM Loads L inner join
			[Control].[EntityProcessStream] EPS on L.LoadId = EPS.LoadId inner join
			[Control].[Entity] E on EPS.EntityId = E.EntityId inner join
			[Control].[EntityType] ET on E.EntityTypeId = ET.EntityTypeId

		GROUP BY L.GlobalLoadId,
			E.[EntityId],
			ET.[Name],
			ET.[Schema],
			ET.[Table]
	) S inner join
		Control.EntityProcessStream EPS on S.EntityProcessStreamId = EPS.EntityProcessStreamId
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Metadata].[vFileStructure]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE VIEW [Metadata].[vFileStructure]
AS

SELECT        
       DB.Title AS FileName, 
       COL.Title AS ColumnName,
       Col.Description AS ColumnDescription,
       RTRIM(LOWER(OA.DataType)) AS ColumnDataType, 
       DB.ObjectId AS DatabaseObjectId, 
       COL.ObjectId AS ColumnObjectId,
       DB.SourceKey AS DBSourceKey, 
       COL.SourceKey AS ColumnSourceKey,
       OA.[ColumnLength], 
       OA.[Scale], 
       OA.[Precision], 
       OA.[IsNullable],[StartPosition],[EndPosition],[DataFormat]
FROM            
       (SELECT        
              ObjectId, 
              Title,  
              SourceKey
       FROM            
              Metadata.Object AS DB
    WHERE        
              (TypeId = 7)) 
       AS DB LEFT OUTER JOIN
        Metadata.ObjectRelationship AS FL2Col ON DB.ObjectId = FL2Col.FromObjectId LEFT OUTER JOIN
        Metadata.Object AS COL ON COL.ObjectId = FL2Col.ToObjectId LEFT OUTER JOIN 
              (SELECT 
              [ObjectId] AS ObjectId, 
              [ColumnId], 
              [DataType], 
              [ColumnLength], 
              [Scale], 
              [Precision], 
              [IsNullable], 
              [IsIdentity],[StartPosition],[EndPosition],[DataFormat]
       FROM
              (
              SELECT [ObjectId]
                           ,[Name]
                           ,[Value]
                     FROM Metadata.[ObjectAttribute]) AS SourceTable
              PIVOT
              (
              MAX(Value)
              FOR Name IN (
                     [ColumnId], 
                     [DataType], 
                     [ColumnLength], 
                     [Scale], 
                     [Precision], 
                     [IsNullable], 
                     [IsIdentity],[StartPosition],[EndPosition],[DataFormat])
              ) AS PivotTable) AS OA ON OA.ObjectId = COL.ObjectId
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Metadata].[vDatabaseStructure]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE VIEW [Metadata].[vDatabaseStructure]
AS
SELECT        
       DB.Title AS DatabaseName, 
       SCH.Title AS SchemaName, 
       TBL.Title AS TableName, 
       COL.Title AS ColumnName,
       Col.Description AS ColumnDescription,
       OA.DataType AS ColumnDataType, 
       DB.ObjectId AS DatabaseObjectId, 
       SCH.ObjectId AS SchemaObjectId, 
    TBL.ObjectId AS TableObjectId, 
       COL.ObjectId AS ColumnObjectId,
       DB.SourceKey AS DBSourceKey, 
       SCH.SourceKey AS SchemaSourceKey, 
       TBL.SourceKey AS TableSourceKey,
       COL.SourceKey AS ColumnSourceKey,
       OA.[ColumnLength], 
       OA.[Scale], 
       OA.[Precision], 
       OA.[IsNullable],
       OA.[IsDate]
FROM            
       (SELECT        
              ObjectId, 
              Title,  
              SourceKey
       FROM            
              Metadata.Object AS DB
    WHERE        
              (TypeId = 1)) 
       AS DB LEFT OUTER JOIN
        Metadata.ObjectRelationship AS DB2SCH ON DB.ObjectId = DB2SCH.FromObjectId LEFT OUTER JOIN
        Metadata.Object AS SCH ON SCH.ObjectId = DB2SCH.ToObjectId LEFT OUTER JOIN
        Metadata.ObjectRelationship AS SCH2TBL ON SCH.ObjectId = SCH2TBL.FromObjectId LEFT OUTER JOIN
        Metadata.Object AS TBL ON TBL.ObjectId = SCH2TBL.ToObjectId LEFT OUTER JOIN
        Metadata.ObjectRelationship AS TBL2Col ON TBL.ObjectId = TBL2Col.FromObjectId LEFT OUTER JOIN
        Metadata.Object AS COL ON COL.ObjectId = TBL2Col.ToObjectId LEFT OUTER JOIN 
              (SELECT 
              [ObjectId] AS ObjectId, 
              [ColumnId], 
              [DataType], 
              [ColumnLength], 
              [Scale], 
              [Precision], 
              [IsNullable], 
              [IsIdentity],
              [IsDate]
       FROM
              (
              SELECT [ObjectId]
                           ,[Name]
                           ,[Value]
                     FROM Metadata.[ObjectAttribute]) AS SourceTable
              PIVOT
              (
              MAX(Value)
              FOR Name IN (
                     [ColumnId], 
                     [DataType], 
                     [ColumnLength], 
                     [Scale], 
                     [Precision], 
                     [IsNullable], 
                     [IsIdentity],
                     [IsDate])
              ) AS PivotTable) AS OA ON OA.ObjectId = COL.ObjectId
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Reporting].[vwExecutionLogWithParameters]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE VIEW [Reporting].[vwExecutionLogWithParameters]
as
SELECT     
	 EL.ExecutionLogID
	,EL.TimeStart
	,EL.TimeEnd
	,EL.TimeDataRetrieval
	,EL.TimeProcessing
	,EL.TimeRendering
	,EL.ByteCount
	,EL.[RowCount]
	,EL.ExecutionID
	,EL.TotalExecTime
	,EL.ScalabilityTime_Paging
	,EL.ScalabilityTime_Processing
	,EL.EstMemoryKB_Paging
	,EL.EstMemoryKB_Processing
	,SC.Status
	,RT.Name AS ReportType
	,RQT.Name AS RequestType
	,ST.Name AS SourceType
	,U.UserName
	,U.UserNameShort
	,R.ReportID
	,R.Path
	,R.SPSite
	,R.SPDocLibrary
	,R.ReportNameShort
	,R.Name AS ReportName
	,RA.Action
	,M.InstanceName
	,FT.Format
	,EP.Name AS ParamName
	,EP.Value AS ParamValue
FROM Reporting.ExecutionLogs EL
INNER JOIN Reporting.FormatTypes FT
	ON EL.FormatType = FT.FormatType 
INNER JOIN Reporting.Machines M
	ON EL.MachineKey = M.MachineKey 
INNER JOIN Reporting.ReportActions RA
	ON EL.ActionType = RA.ActionType 
INNER JOIN Reporting.Reports R
	ON EL.ReportKey = R.ReportKey 
INNER JOIN Reporting.ReportTypes RT
	ON R.ReportType = RT.ReportType 
INNER JOIN Reporting.RequestTypes RQT
	ON EL.RequestType = RQT.RequestType 
INNER JOIN Reporting.SourceTypes ST
	ON EL.SourceType = ST.SourceType 
INNER JOIN Reporting.StatusCodes SC
	ON EL.StatusCode = SC.StatusCode 
INNER JOIN Reporting.Users U 
	ON EL.UserKey = U.UserKey
LEFT OUTER JOIN Reporting.ExecutionParameters EP
	ON EL.ExecutionLogID = EP.ExecutionLogID
WHERE TimeStart > '2013-09-01 00:00:00.00'
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Reporting].[vwExecutionLog]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE VIEW [Reporting].[vwExecutionLog]
AS

SELECT     
	 EL.ExecutionLogID
	,EL.TimeStart
	,EL.TimeEnd
	,EL.TimeDataRetrieval
	,EL.TimeProcessing
	,EL.TimeRendering
	,EL.ByteCount
	,EL.[RowCount]
	,EL.ExecutionID
	,EL.TotalExecTime
	,EL.ScalabilityTime_Paging
	,EL.ScalabilityTime_Processing
	,EL.EstMemoryKB_Paging
	,EL.EstMemoryKB_Processing
	,SC.Status
	,RT.Name AS ReportType
	,RQT.Name AS RequestType
	,ST.Name AS SourceType
	,U.UserName
	,U.UserNameShort
	,R.ReportID
	,R.Path
	,R.SPSite
	,R.SPDocLibrary
	,R.ReportNameShort
	,R.Name AS ReportName
	,RA.Action
	,M.InstanceName
	,FT.Format
	,FT.FormatType
	,M.MachineKey
	,RQT.RequestType AS RequestTypeKey
	,ST.SourceType AS SourceTypeKey
	,RA.ActionType
	,R.ReportKey
	,SC.StatusCode
	,U.UserKey
FROM Reporting.ExecutionLogs EL
INNER JOIN Reporting.FormatTypes FT
	ON EL.FormatType = FT.FormatType 
INNER JOIN Reporting.Machines M
	ON EL.MachineKey = M.MachineKey 
INNER JOIN Reporting.ReportActions RA
	ON EL.ActionType = RA.ActionType 
INNER JOIN Reporting.Reports R
	ON EL.ReportKey = R.ReportKey 
INNER JOIN Reporting.ReportTypes RT
	ON R.ReportType = RT.ReportType 
INNER JOIN Reporting.RequestTypes RQT
	ON EL.RequestType = RQT.RequestType 
INNER JOIN Reporting.SourceTypes ST
	ON EL.SourceType = ST.SourceType 
INNER JOIN Reporting.StatusCodes SC
	ON EL.StatusCode = SC.StatusCode 
INNER JOIN Reporting.Users U 
	ON EL.UserKey = U.UserKey
WHERE TimeStart > '2013-09-01 00:00:00.00'
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Audit].[InsertSourceFileProcessStream]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO


CREATE PROCEDURE [Audit].[InsertSourceFileProcessStream]
			@SourceFileId INT
		   ,@LoadProcess VARCHAR(100)
           ,@ProcessStream VARCHAR(100)
           ,@LoadId int
		   ,@LoadStatusType VARCHAR(100)
AS

DECLARE @LoadStatusId int
DECLARE @ProcessStreamId int
DECLARE @LoadProcessId int

SELECT @LoadStatusId = LoadStatusTypeId FROM Control.LoadStatusType WHERE ShortName = @LoadStatusType

IF EXISTS (SELECT 1 FROM [Audit].[SourceFileProcessStream] WHERE LoadId = @LoadId AND SourceFileId = @SourceFileId)
BEGIN 
UPDATE [Audit].[SourceFileProcessStream]
   SET 
      [LoadStatusTypeId] = @LoadStatusId
 WHERE LoadId = @LoadId AND SourceFileId = @SourceFileId
END 
ELSE 
BEGIN  
INSERT INTO [Audit].[SourceFileProcessStream]
           ([SourceFileId]
           ,[ProcessStream]
		   ,LoadProcess 
           ,LoadStatusTypeId
           ,[LoadId])
     VALUES
           (@SourceFileId
           ,@ProcessStream
		   ,@LoadProcess
           ,@LoadStatusId
           ,@LoadId
         )
END


IF @ProcessStream = 'SRC2STG' AND  @LoadStatusType = 'Success'
BEGIN
	UPDATE Control.SourceFile
	SET	StageDate = GETDATE()
	WHERE SourceFileId = @SourceFileId
END

IF @ProcessStream = 'SCB2CLN'  AND  @LoadStatusType = 'Success'
BEGIN
	UPDATE Control.SourceFile
	SET	CleanDate = GETDATE()
	WHERE SourceFileId = @SourceFileId
END

IF @ProcessStream = 'LDS2CDW'  AND  @LoadStatusType = 'Success'
BEGIN
	UPDATE Control.SourceFile
	SET	WarehouseDate = GETDATE()
	WHERE SourceFileId = @SourceFileId
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Audit].[UpdateSourceFileProcessStream]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO


CREATE PROCEDURE [Audit].[UpdateSourceFileProcessStream]
			@SourceFileId INT
		   ,@LoadProcess VARCHAR(100)
           ,@ProcessStream VARCHAR(100)
           ,@LoadId int
		   ,@LoadStatusType VARCHAR(100)
AS

DECLARE @LoadStatusId int
DECLARE @ProcessStreamId int
DECLARE @LoadProcessId int

SELECT @LoadStatusId = LoadStatusTypeId FROM Control.LoadStatusType WHERE ShortName = @LoadStatusType

IF EXISTS (SELECT 1 FROM [Audit].[SourceFileProcessStream] WHERE LoadId = @LoadId AND SourceFileId = @SourceFileId)
BEGIN 
UPDATE [Audit].[SourceFileProcessStream]
   SET 
      [LoadStatusTypeId] = @LoadStatusId
 WHERE LoadId = @LoadId AND SourceFileId = @SourceFileId
END 
ELSE 
BEGIN  
INSERT INTO [Audit].[SourceFileProcessStream]
           ([SourceFileId]
           ,[ProcessStream]
		   ,LoadProcess 
           ,LoadStatusTypeId
           ,[LoadId])
     VALUES
           (@SourceFileId
           ,@ProcessStream
		   ,@LoadProcess
           ,@LoadStatusId
           ,@LoadId
         )
END


IF @ProcessStream = 'SRC2STG' AND  @LoadStatusType = 'Success'
BEGIN
	UPDATE Control.SourceFile
	SET	StageDate = GETDATE()
	WHERE SourceFileId = @SourceFileId
END

IF @ProcessStream = 'SCR2CLN'  AND  @LoadStatusType = 'Success'
BEGIN
	UPDATE Control.SourceFile
	SET	CleanDate = GETDATE()
	WHERE SourceFileId = @SourceFileId
END



IF @ProcessStream = 'LDS2CDW'  AND  @LoadStatusType = 'Success'
BEGIN
	UPDATE Control.SourceFile
	SET	WarehouseDate = GETDATE()
	WHERE SourceFileId = @SourceFileId
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Audit].[ObtainLatestLoadDate]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [Audit].[ObtainLatestLoadDate] 

AS

-- =============================================
-- Author:		Adatis Consulting
-- Create date: Unknown
-- =============================================

	--Note this will need altering if the S2W spans multiple days, e.g. over midnight
	SELECT	CAST(MAX(StartTime) AS DATE) AS StartTime 
	FROM	Audit.PackageLoad
	-- WHERE ExecutionId > 0  -- This line was uncommented in the original DQ BISystem version -- VBA
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Audit].[InsertRowThroughput]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [Audit].[InsertRowThroughput]
	@Taskname Varchar(100),
	@ExecutionId int,
	@ProcessStream Varchar(50),
	@ExtractedRows int = 0,
	@InsertedRows int = 0,
	@UpdatedRows int = 0,
	@DeletedRows int = 0,
	@FailedRows int = 0,
	@ArchivedRows int = 0,
	@BadRows int = 0,
	@EntityId int = -1,
	@LoadProcess Varchar(50) = '',

	@LoadId int
AS

DECLARE @ApplicationId SMALLINT = 0

SELECT TOP 1 @ApplicationId = ApplicationId FROM Control.Entity WHERE EntityId = @EntityId

--If @ExecutionId = 0
Begin
	INSERT INTO [Audit].[RowThroughput]
			   ([ExecutionId]
			   ,[ProcessStream]
			   ,[ExtractedRows]
			   ,[InsertedRows]
			   ,[UpdatedRows]
			   ,[DeletedRows]
			   ,[FailedRows]
			   ,[ArchivedRows]
			   ,[BadRows]
			   ,[LoadId]
			   ,[TaskName]
			   ,[EntityId]
			   ,[LoadProcess]
			   ,[ApplicationId]
			   )
		 VALUES
			   (@ExecutionId
			   ,@ProcessStream
			   ,@ExtractedRows
			   ,@InsertedRows
			   ,@UpdatedRows
			   ,@DeletedRows
			   ,@FailedRows
			   ,@ArchivedRows
			   ,@BadRows
			   ,@LoadId
			   ,@Taskname
			   ,@EntityId
			   ,@LoadProcess
			   ,@ApplicationId
			   )
end




--If @ExecutionId <> 0
--Begin

--	Declare @ExecutableId int

--	SELECT DISTINCT    
--           @ExecutableId = execl.[executable_id]
--FROM       ([SSISDB].[internal].[executions] (NOLOCK) execs 
--		INNER JOIN [SSISDB].[internal].[executable_statistics] (NOLOCK) stat 
--           ON execs.[execution_id] = stat.[execution_id]) 
--		   INNER JOIN [SSISDB].[internal].[executables] (NOLOCK) execl
--           ON stat.[executable_id] = execl.[executable_id] 


--	INSERT INTO [Audit].[RowThroughput]
--			   ([ExecutionId]
--			   ,[ExecutableId]
--			   ,[EnvironmentId]
--			   ,[ProcessStream]
--			   ,[ExtractedRows]
--			   ,[InsertedRows]
--			   ,[UpdatedRows]
--			   ,[DeletedRows]
--			   ,[FailedRows]
--			   ,[ArchivedRows]
--			   ,[BadRows]
--			   ,[LoadId]
--			   ,[TaskName]
--			   ,[EntityId]
--			   ,[LoadProcess]
--			    )
--		 VALUES
--			   (@ExecutionId
--			   ,@ExecutableId
--			   ,-1
--			   ,@ProcessStream
--			   ,@ExtractedRows
--			   ,@InsertedRows
--			   ,@UpdatedRows
--			   ,@DeletedRows
--			   ,@FailedRows
--			   ,@ArchivedRows
--			   ,@BadRows
--			   ,@LoadId
--			   ,@Taskname
--			   ,@EntityId
--			   ,@LoadProcess
--			    )
--End
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Audit].[ObtainErrorLogId]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO

-- =============================================
-- Author:		Adatis
-- Create date: 18/03/2013
-- Description:	Gets the next Avaialble Sequence for the Error Log Id
-- Required By Aptitude Bulk logging
-- =============================================
CREATE PROCEDURE Audit.ObtainErrorLogId
	@NextErrorLogId		BIGINT OUTPUT
AS
BEGIN
	SET NOCOUNT ON;

    SELECT @NextErrorLogId = NEXT VALUE FOR [Audit].[seqErrorLogId];
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Audit].[CompareSTG2CLNRowCounts]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROC [Audit].[CompareSTG2CLNRowCounts]
	@pApplicationCode varchar(80)
AS
/*
 *This SP compares the row counts between the Extract to Stage Process and the Stage to Clean Process. This SP is called after the Stage to Clean Process is completed.
 */
DECLARE @MatchedFlag INT = 0;

WITH TempSourceFile
AS
(
	SELECT 
		SF.StageParentLoadId,
		SF.CleanParentLoadId,
		SF.SourceFileId,
		SF.SourceFileName 
	FROM [Control].SourceFile AS SF
	  INNER JOIN [Control].[Application] AS A
	  ON SF.ApplicationId = A.ApplicationId 
	WHERE SF.StageDate IS NOT NULL 
	  AND SF.CleanDate IS NOT NULL 
	  AND SF.WarehouseDate IS NULL
	  AND A.Code = @pApplicationCode
)
, 
LoadIdEXT2STG
AS
(
	SELECT LoadId 
	  FROM [Audit].[PackageLoad] 
	 WHERE ParentLoadId IN (
								SELECT StageParentLoadId 
								  FROM TempSourceFile
							)
)
, 
LoadIdSSTG2CLN
AS
(
	SELECT LoadId 
	  FROM [Audit].[PackageLoad] 
	 WHERE ParentLoadId IN (
								SELECT CleanParentLoadId 
								  FROM TempSourceFile
							)
)
,
EXT2STG_Counts
AS
(
	SELECT 
		  rt.EntityId
		, InsertedRows
		, FailedRows
		, rt.LoadId
		, cet.[Table] AS EntityTypeTable		
		, sf.SourceFileName
	 FROM [Audit].[RowThroughput] rt
		INNER JOIN [Control].Entity ce        ON ce.EntityId = rt.EntityId
		INNER JOIN [Control].[EntityType] cet ON cet.EntityTypeId = ce.EntityTypeId
		INNER JOIN [Control].[SourceFile] sf  ON sf.SourceFileId = ce.SourceFileId
		 AND sf.SourceFileId IN (
									SELECT SourceFileId 
									  FROM TempSourceFile
								)
	WHERE rt.LoadId IN (
							SELECT LoadId 
							  FROM LoadIdEXT2STG 
						)
)
,
STG2CLN_Counts
AS 
(
	SELECT 
		rt.EntityId,
		InsertedRows,
		FailedRows,
		rt.LoadId,
		cet.[Table] AS EntityTypeTable,
		sf.SourceFileName
	FROM [Audit].[RowThroughput] rt
		INNER JOIN [Control].Entity ce         ON ce.EntityId = rt.EntityId
		INNER JOIN [Control].[EntityType] cet  ON cet.EntityTypeId = ce.EntityTypeId
		INNER JOIN [Control].[SourceFile] sf   ON sf.SourceFileId = ce.SourceFileId
			AND sf.SourceFileId IN (
									SELECT SourceFileId 
									  FROM TempSourceFile
								   )
	WHERE rt.LoadId IN (
							SELECT LoadId 
							  FROM LoadIdSSTG2CLN 
						)
)
, Compare_Counts AS
(
	SELECT  
		ec.InsertedRows AS SourceRowCounts,
		sc.InsertedRows AS TargetRowcounts,
		sc.SourceFileName, sc.EntityTypeTable,
		sc.FailedRows, 
		CASE 
			WHEN (ec.InsertedRows = sc.InsertedRows AND sc.FailedRows = 0 ) THEN 1 
			ELSE 0 
		END AS MatchedCountsFlag
	FROM EXT2STG_Counts ec 
		FULL OUTER JOIN STG2CLN_Counts sc ON ec.SourceFileName	= sc.SourceFileName
										 AND ec.EntityTypeTable = sc.EntityTypeTable
)
SELECT @MatchedFlag = ISNULL(MIN(CAST(MatchedCountsFlag AS INT)), 0) FROM Compare_Counts rt



-- Uncomment the below line to test if package execution stops when there are one or nore tables in source and target with diffrence in rowcounts  
--SET @MatchedFlag = 0  

DECLARE @SourceFileExists INT = 0;

SELECT @SourceFileExists = ISNULL(SF.SourceFileId, 0)
  FROM [Control].SourceFile AS SF
 INNER JOIN [Control].[Application] AS A
    ON SF.ApplicationId = A.ApplicationId 
 WHERE SF.StageDate IS NOT NULL 
   AND SF.CleanDate IS NOT NULL 
   AND SF.WarehouseDate IS NULL
   AND A.Code = @pApplicationCode

IF @SourceFileExists > 0
BEGIN
    IF @MatchedFlag = 0  
	BEGIN  
		RAISERROR ('STG2CLN Row counts did Not Match - Clean to Warehouse Will not Process - See Package Process Report', 16, 1) WITH SETERROR  	
	END	
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Audit].[CompareSRC2STGRowCounts]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROC [Audit].[CompareSRC2STGRowCounts]
	@pApplicationCode VARCHAR(80)
AS
/*
 *This SP compares the row counts between the Source to Extract Process and the Extract to Stage Process. This SP is called after the Extract to Stage Process is completed.
 */
DECLARE @MatchedFlag INT = 0;

WITH TempSourceFile AS
(
	SELECT SF.FileExtractedParentLoadId
		  ,SF.StageParentLoadId
		  ,SF.SourceFileId
		  ,SF.SourceFileName
	  FROM [Control].SourceFile AS SF
	  INNER JOIN [Control].[Application] AS A
	  ON SF.ApplicationId = A.ApplicationId 
	 WHERE SF.StageDate		IS NOT NULL 
	   AND SF.CleanDate		IS NULL 
	   AND SF.WarehouseDate	IS NULL
	   AND A.Code = @pApplicationCode
)
, 
LoadIdEXT2STG AS
(
	SELECT LoadId 
	  FROM [Audit].[PackageLoad] 
	 WHERE ParentLoadId IN (
							  SELECT StageParentLoadId 
								FROM TempSourceFile
							)
)
,  
LoadIdSRC2EXT AS
(
	SELECT LoadId 
	  FROM [Audit].[PackageLoad] 
	 WHERE ParentLoadId IN (
								SELECT FileExtractedParentLoadId 
								  FROM TempSourceFile
						    )
)
, 
EXT2STG_Counts AS 
(
	SELECT 
		rt.EntityId,
		InsertedRows,
		FailedRows,
		cet.[Table] AS EntityTypeTable,
		sf.SourceFileName
 FROM [Audit].[RowThroughput] rt 
	INNER JOIN [Control].Entity ce         ON ce.EntityId      = rt.EntityId
	INNER JOIN [Control].[EntityType] cet  ON cet.EntityTypeId = ce.EntityTypeId
	INNER JOIN [Control].[SourceFile] sf   ON sf.SourceFileId  = ce.SourceFileId
	AND sf.SourceFileId IN (
								SELECT SourceFileId 
								  FROM TempSourceFile
							)
WHERE rt.LoadId IN (
						SELECT LoadId 
						  FROM LoadIdEXT2STG 
					)
)
, 
SRC2EXT_Counts
AS
(
SELECT 
	  rt.EntityId
	, SUM(InsertedRows)    AS InsertedRows
	, SUM(FailedRows)      AS FailedRows
	, cet.[Table]          AS EntityTypeTable
	, sf.SourceFileName
  FROM [Audit].[RowThroughput] rt
    INNER JOIN [Control].Entity ce         ON ce.EntityId      = rt.EntityId
	INNER JOIN [Control].[EntityType] cet  ON cet.EntityTypeId = ce.EntityTypeId
										  AND cet.[IsSourceEntity]	= 1 --gets only the one that are source entites
	INNER JOIN [Control].[SourceFile] sf   ON sf.SourceFileId  = ce.SourceFileId
	AND sf.SourceFileId IN (
								SELECT SourceFileId 
								  FROM TempSourceFile
							)
WHERE rt.LoadId In (
						SELECT LoadId 
                          FROM LoadIdSRC2EXT 
				   )
GROUP BY 
	ExecutionId
	, rt.EntityId
	, sf.SourceFileName
	, cet.[Table]

)
, 
Compare_Counts
AS
(
SELECT 
	ec.InsertedRows AS SourceRowCounts, 
	sc.InsertedRows AS TargetRowcounts,
	sc.SourceFileName,
	sc.EntityTypeTable,
	CASE 
		WHEN (ec.InsertedRows = sc.InsertedRows AND sc.FailedRows = 0 ) THEN 1 
		ELSE 0 
	END AS MatchedCountsFlag
FROM SRC2EXT_Counts ec 
	FULL OUTER JOIN EXT2STG_Counts sc 
		ON ec.SourceFileName = sc.SourceFileName
		AND ec.EntityTypeTable = sc.EntityTypeTable
)
SELECT @MatchedFlag = ISNULL(MIN(CAST(MatchedCountsFlag AS INT)), 0) FROM Compare_Counts rt


-- Uncomment the below line to test if package execution stops when there are one or nore tables in source and target with diffrence in rowcounts  
-- SET @MatchedFlag = 0  

DECLARE @SourceFileExists INT = 0;

SELECT @SourceFileExists = ISNULL(SF.SourceFileId, 0)
  FROM [Control].SourceFile AS SF
 INNER JOIN [Control].[Application] AS A
    ON SF.ApplicationId = A.ApplicationId 
 WHERE SF.StageDate		IS NOT NULL 
   AND SF.CleanDate		IS NULL 
   AND SF.WarehouseDate	IS NULL
   AND A.Code = @pApplicationCode

IF @SourceFileExists > 0
BEGIN
    IF @MatchedFlag = 0  
	BEGIN  
		RAISERROR ('SRCT2STG Row counts did Not Match - Stage to Clean Will not Process - See Package Process Report', 16, 1) WITH SETERROR  	
	END
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Azure].[GetAction]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
-- =============================================
-- Author:		Adatis Consulting - SAW
-- Create date: 2016-10-11
-- Description:	Gets Action Details from Automationmatrix about the state of the action performed on the object
-- =============================================
CREATE PROCEDURE [Azure].[GetAction]
	@ObjectName varchar(255),
	@ActionName varchar(255)
AS
BEGIN
	SELECT TOP(1) 
	   [ObjectName]
      ,[ActionName]
      ,[ActionDescription]
      ,[InsertedDate]
      ,[UpdatedDate]
      ,[Result]
      ,[OperationID] 
	FROM [Azure].[AutomationActionLog]
	WHERE ObjectName = @ObjectName
	  AND ActionName = @ActionName
	ORDER BY InsertedDate DESC
END;
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Azure].[UpdateAction]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
-- =============================================
-- Author:		Adatis Consulting - SAW
-- Create date: 2016-10-12
-- Description:	Updates Action in AutomationActionLog about the state of the action performed on the object
-- =============================================

CREATE PROCEDURE [Azure].[UpdateAction]
	@ObjectName VARCHAR(255),
	@ActionName VARCHAR(255),
	@Result	INT
AS
BEGIN
	DECLARE @LastActionId INT = (SELECT TOP(1) ActionId 
								FROM [Azure].[AutomationActionLog]
								WHERE ObjectName = @ObjectName
								  AND ActionName = @ActionName
								  AND UpdatedDate IS NULL
								ORDER BY InsertedDate DESC);

	UPDATE [Azure].[AutomationActionLog] SET	
		UpdatedDate = SYSDATETIME(),
		Result = @Result
	WHERE ObjectName = @ObjectName
	  AND ActionName = @ActionName
	  AND ActionId = @LastActionId
END;
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Azure].[InsertAction]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
-- =============================================
-- Author:		Adatis Consulting - SAW
-- Create date: 2016-05-03
-- Description:	Inserts Action state to AutomationActionLog about the state of the action performed on the object
-- =============================================

CREATE PROCEDURE [Azure].[InsertAction]
	@ObjectName VARCHAR(255),
	@ActionName VARCHAR(255),
	@ActionDescription VARCHAR(Max),
	@Result	INT,
	@OperationId UNIQUEIDENTIFIER
AS
BEGIN
	INSERT INTO [Azure].[AutomationActionLog]
		(ObjectName,ActionName, ActionDescription, InsertedDate, Result, OperationID)
	VALUES
		(@ObjectName, @ActionName, @ActionDescription, SYSDATETIME(), @Result, @OperationId);
END;
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Azure].[GetLoadStartFlag]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
-- =============================================
-- Author:		Adatis Consulting - SAW
-- Create date: 2016-05-03
-- Description:	Checks the source file control table and determines whether load is required
-- =============================================
CREATE PROCEDURE Azure.GetLoadStartFlag (@Trigger bit OUTPUT)
AS
BEGIN
	SET NOCOUNT ON;

    SET @Trigger = 1

	RETURN;
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Azure].[GetETLProcessState]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
-- =============================================
-- Author: Adatis Consulting - PS
-- Create date: 2016-11-03
-- Description:	Gets current state of ETL process
-- =============================================

CREATE PROCEDURE Azure.GetETLProcessState
	@ProcessState VARCHAR(50) OUT
AS
BEGIN
	SET NOCOUNT ON;
	SET @ProcessState = (SELECT TOP 1 [ParameterValue] 
						 FROM [Config].[Parameter]
						 WHERE [ParamaterCode] = 'ETLState')
	
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Azure].[UpdateETLProcessState]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
-- =============================================
-- Author: Adatis Consulting - PS
-- Create date: 2016-11-03
-- Description:	Updates Parameter that holds current state of ETL process
-- =============================================

CREATE PROCEDURE Azure.UpdateETLProcessState
	@ProcessState VARCHAR(50)
AS
BEGIN
	SET NOCOUNT ON;
	UPDATE [Config].[Parameter]
	   SET [ParameterValue] = @ProcessState    
	 WHERE [ParamaterCode] = 'ETLState'
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Azure].[GetLoadStartParameters]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
-- =============================================
-- Author: Adatis Consulting - PS
-- Create date: 2016-11-02
-- Description:	Checks the source file control table and determines whether load is required
-- PS: Output object is a JSON object that contains 2 flags if there is something to process or if there is somthing running
-- =============================================

CREATE PROCEDURE Azure.GetLoadStartParameters 
	@ApplicationId smallint,
	@Output VARCHAR(500) OUTPUT
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @IsETLReady BIT = 0;
	DECLARE @IsAnythingToProcess BIT = 0;

	DECLARE @ETLProgressState VARCHAR(50) = 'NotSpecified'

	EXEC Azure.GetETLProcessState 
		@ProcessState = @ETLProgressState OUT;
	
	/* Checks if there is anything to process */
	IF EXISTS (SELECT *
				 FROM [Control].[SourceFile] As A
				WHERE [ApplicationId] = 1
			      AND StageParentLoadId IS NULL
				  AND FileExtractedDate IS NOT NULL
				  AND [BlobUploadDate]  IS NOT NULL
				  AND [StageDate]	    IS NULL
				  AND [CleanDate]		IS NULL
				  AND [WarehouseDate]	IS NULL
				)
    SET @IsAnythingToProcess = 1

	/* Checks if there is anything running */
	IF @ETLProgressState NOT IN ('InProgress','Error')
		    SET @IsETLReady = 1


	/* Return JSON result to output variable that will be consumed by ETL-ProcessStart, ETL-ProcessEnd Runbook*/
	SET @Output=(SELECT 
				 	@IsAnythingToProcess AS [IsAnythingToProcess],
					@IsETLReady AS [IsETLReady]
				 FOR JSON PATH);
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Azure].[GetActionStatusByOperatioinID]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
-- =============================================
-- Author:		Adatis Consulting - SAW
-- Create date: 2016-10-11
-- Description:	Gets Action Details from Automation Action Log Table about the state of the action (identified by OperationID) performed on the object
-- =============================================
CREATE PROCEDURE [Azure].[GetActionStatusByOperatioinID]
	@OperationID uniqueidentifier,
	@ActionStatus int OUT
AS
BEGIN
/* @uOperationID has been used as a middle parameter as SSIS had problems with conversion from varchar to GUID/uniqueidentifier */
DECLARE @ActionStatusTemp INT = (SELECT TOP(1) [Result]
								 FROM [Azure].[AutomationActionLog]
								 WHERE ISNULL(OperationID,NEWID()) = @OperationID
								 ORDER BY InsertedDate DESC)

	SET @ActionStatus = ISNULL(@ActionStatusTemp ,-1)
END;
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Azure].[GetActionStatus]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
-- =============================================
-- Author:		Adatis Consulting - SAW
-- Create date: 2016-10-11
-- Description:	Gets Action Details from Automationmatrix about the state of the action performed on the object
-- =============================================
CREATE PROCEDURE [Azure].[GetActionStatus]
	@ObjectName varchar(255),
	@ActionName varchar(255),
	@ActionStatus int OUT
AS
BEGIN
DECLARE @ActionStatusTemp INT = (SELECT TOP(1) [Result]
								 FROM [Azure].[AutomationActionLog]
								 WHERE ObjectName = @ObjectName
								   AND ActionName = @ActionName
								 ORDER BY InsertedDate DESC)

	SET @ActionStatus = ISNULL(@ActionStatusTemp ,-1)
END;
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Config].[AddVariable]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO

CREATE PROCEDURE Config.AddVariable
( 
 -- Add the parameters for the function here
 @VariableValue Varchar(50)
)
AS
BEGIN
	IF EXISTS(SELECT 1 FROM [Config].[Variable] WHERE [Name] = 'SSISEnvironment' AND [Value] = @VariableValue)  
	BEGIN 
		RETURN 
	END 
	ELSE
	BEGIN
		DECLARE @Max_id INT
		SELECT @Max_id = ISNULL(MAX(VariableId),0) FROM [Config].[Variable]

		INSERT INTO [Config].[Variable]( [VariableId] ,[Name] ,[Value] ,[Type] )
		VALUES ( @Max_id + 1 ,'SSISEnvironment' ,@VariableValue ,'Environment Variable' )
	END
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[UpdateNotificationProcessStatus]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [Control].[UpdateNotificationProcessStatus] (@NotificationId int, @NotificationStatusId int)
AS
BEGIN

	-- IF FAILED, RetryOnFailure VALUE NEED TO BE INCREMENTED TILL 3
	-- NO CHANGE FOR STATUS OTHER THAN FAILURE

	IF @NotificationStatusId = 40 --FAILURE
	BEGIN
		UPDATE Control.Notification
		SET	NotificationStatusId = @NotificationStatusId,
			RetryOnFailure = RetryOnFailure + 1
		WHERE NotificationId = @NotificationId
	END
	ELSE
	BEGIN
		UPDATE Control.Notification
		SET NotificationStatusId = @NotificationStatusId
		WHERE NotificationId = @NotificationId
	END
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[NotificationSave]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROC [Control].[NotificationSave]
              @PackageLoadID             INT,
              @FeedName                  NVARCHAR(256) ,
              @Stage                     NVARCHAR(200) ,
              @LoadStatusType			 VARCHAR(20),
              @ErrorCode                 NVARCHAR(128),
              @ErrorDescription			 NVARCHAR(MAX) , 
              @systemExecutionInstanceGuid      NVARCHAR(100) ,            
              @SystemUserName            NVARCHAR(128),
			  @FeedStartTime			 DATETIME,
              @NotificationProcessTypeId INT
AS 
BEGIN 
       DECLARE @ShortDescription NVARCHAR(250) 
       DECLARE @Description NVARCHAR(MAX) 
       DECLARE @VerboseDescription NVARCHAR(MAX) 
       DECLARE @NotificationTypeID INT
       DECLARE @NotificationSeverityId INT
       DECLARE @NotificationStatusId INT    
       DECLARE @TimeOfCompletion DATETIME 
       DECLARE @RetryOnFailure INT       
       DECLARE @EntityName NVARCHAR(50)

       DECLARE @ProcessTypeID INT

       SET @NotificationTypeID = 10                    -- EMAIL
       SELECT @NotificationStatusId      = NotificationStatusId FROM [Control].[NotificationStatus] WHERE Name = 'New'                       -- NEW NOTIFICATION
       
       IF @LoadStatusType = 0 -- IN ERROR CASE
       BEGIN
			  SET @LoadStatusType ='Failed'
              SET @ShortDescription = 'Feed ' + @FeedName + ' uploaded by ' + @SystemUserName + ' Failed on '  + @Stage 
              SELECT @NotificationSeverityId = NotificationSeverityId FROM Control.NotificationSeverity where Name = 'High Priority' 
              SET @Description = NULL
									
									 IF (@ErrorDescription = NULL) OR (LEN(RTRIM(LTRIM(@ErrorDescription))) = 0) 	--IF ERROR DESCRIPTION HAS NULL VALUE THAN SET THE CUSTOM MESSAGE 
										BEGIN
											SET @VerboseDescription =' Package Failed due to more than one reason '      
										END
									 ELSE								--WHATEVER THE FAILURE REASON IS SHOW THE ERROR DETAILS
										BEGIN
											SET @VerboseDescription = @ErrorDescription      
										END			   
       END
       ELSE
       BEGIN
			  SET @LoadStatusType ='Succeeded'
              SET @ShortDescription='Feed ' + @FeedName + ' uploaded by ' + @SystemUserName + ' succeeded on '  + @Stage
              SELECT @NotificationSeverityId = NotificationSeverityId FROM Control.NotificationSeverity where Name = 'Normal Priority' 
              SET @Description = NULL
              SET @VerboseDescription = ' ' + @ErrorDescription + ' '
       END    

       IF @NotificationProcessTypeId = 1        -- PROCESS TYPE
       BEGIN
              SET @ProcessTypeID = 1
       END 
       ELSE IF @NotificationProcessTypeId = 2
       BEGIN
              SET @ProcessTypeID = 2
       END 

       DECLARE @ExistCheck INT
       SET @ExistCheck = 0


       SELECT @ExistCheck = COUNT([ExecutionInstanceGuid]) FROM [Control].[Notification] WHERE  [LoadId] = @PackageLoadID

       IF @ExistCheck = 0
       BEGIN
              --print 'insert option'
              INSERT INTO [Control].Notification
              (
                     [NotificationTypeId]
                     ,[ExecutionInstanceGuid]
                     ,[LoadId]
                     ,[ShortDescription]
                     ,[Description]
					 ,[ErrorCode]
                     ,[VerboseDescription]
                     ,[NotificationSeverityId]
                     ,[NotificationStatusId]
                     ,NotificationProcessTypeId
					,[LoadStatusType]
                     ,[FeedName]
                     ,[Stage]
                     ,[EntityName]
                     ,[SourceFileName]
                     ,[SuccessRows]
                     ,[FailedRows]
                     ,[BadRows]
					 ,[FeedStartTime]
                     ,[TimeOfCompletion]
                     ,[RetryOnFailure]
              )
              SELECT 
                     10,
                     @systemExecutionInstanceGuid,
                     @PackageLoadID,
                     @ShortDescription,
                     NULL,
				  @ErrorCode ,
                     @VerboseDescription,
                     @NotificationSeverityId,
                     @NotificationStatusId,
                     @ProcessTypeID,
					 @LoadStatusType,
                     @FeedName,                 
                     @Stage,
                     '',
                     '',
                     0, 
                     0, 
                     0,
					 @FeedStartTime,
                     GETDATE(),
                     0     
       END
       ELSE 
       BEGIN
             -- 'UPDATE THE VERBOSE DESCRIPTION BY CONCATINATING THE OTHER ERROR IF MORE THAN 1 ERROR OCCURRED'
              UPDATE NOTIFICATIONS 
                     SET NOTIFICATIONS.VerboseDescription =  NOTIFICATIONS.VerboseDescription + @VerboseDescription--,
                   FROM [Control].[Notification] AS [NOTIFICATIONS]
              WHERE NOTIFICATIONS.LoadId = @PackageLoadID
       END
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[ObtainUnprocessedSourceFiles]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
-- =============================================
-- Author:		Adatis
-- Create date: 18/03/2013
-- Description:	GEts all Files that are ready to be Processed
-- =============================================
CREATE PROCEDURE [Control].[ObtainUnprocessedSourceFiles]

AS
BEGIN
	SET NOCOUNT ON;
  SELECT DISTINCT 
	[Collection] AS Code, 
	SF.[32BitStageRequired]
  FROM 
	[Control].[SourceFile] SF
		INNER JOIN 
	Control.SourceFileType SFT ON SFT.SourceFileTypeId = SF.SourceFileTypeId  
  WHERE 
	(StageDate IS NULL OR ScrubDate IS NULL OR CleanDate IS NULL OR LDSDate IS NULL)
		AND 
	IsCompressed = 0
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[InsertEntityProcessStream]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [Control].InsertEntityProcessStream
			@EntityId INT
		   ,@LoadProcess VARCHAR(100)
           ,@ProcessStream VARCHAR(100)
           ,@LoadId int
		   ,@LoadStatusType VARCHAR(100)
AS

DECLARE @LoadStatusId int
DECLARE @ProcessStreamId int
DECLARE @LoadProcessId int

SELECT @LoadStatusId = LoadStatusTypeId FROM LoadStatusType WHERE ShortName = @LoadStatusType


INSERT INTO [Control].[EntityProcessStream]
           ([EntityId]
           ,[ProcessStream]
		   ,LoadProcess 
           ,LoadStatusTypeId
           ,[LoadId])
     VALUES
           (@EntityId
           ,@ProcessStream
		    ,@LoadProcess
           ,@LoadStatusId
           ,@LoadId
         )
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[VerifyPackageLoadStatus]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
-- =============================================
-- Author:		Adatis Consulting
-- Create date: 06/11/2006
-- Description: Verifies that the status of the LoadProcess within the PackageLoad table
--				The Status of Load Processes in which the package is included (except for this load process),
--				or Load Processes in which dependent packages (as defined by PackageDependent) are 
--				included is checked. If any of these Load Processes are status 'In Progress' 
--				then the execution will be declined, as data conflicts may otherwise result from these 
--				Load Processes running.
--				allows the load execution to proceed. 
--				@EnvShortName			-	The ShortName for the environment
--				@ParentLoadID			- optional - the LoadID of the parent package.
--										- required if @LoadProcessShortName is null
--				@LoadProcessShortName	-	The load process that this Package is being requested to run within
--				@PackageID				-	The Package unique identifier
--				@LoadProcessResult output:	
--					1	Decine as LoadProcess In Progress for one or more of this package's Load Processes
--					2	Decline as LoadProcess In Progress for one or more of dependent package's Load Process
--					3	Accept
-- =============================================
CREATE PROCEDURE [Control].[VerifyPackageLoadStatus] 
	@ParentLoadID int = 0, 
	@LoadProcessShortName varchar(20) = NULL, 
	@PackageID uniqueidentifier, 
	@LoadProcessResult int output
AS

DECLARE @StatusCount int, @SystemID int, @EnvironmentID int, @LoadProcessID int

--either @ParentLoadID or @LoadProcessShortName must contain real values for the Load Process to be ascertained
--IF @ParentLoadID = 0 AND @LoadProcessShortName IS NULL
--BEGIN
--	RAISERROR ('Invalid @ParentLoadID, @LoadProcessShortName values in call to uspVerifyPackageLoadStatus', 16, 1) WITH SETERROR;
--	RETURN;
--END


--SELECT @SystemID = SystemID
--FROM vPackageSystem
--WHERE PackageID = @PackageID
--AND EnvironmentID = @EnvironmentID

----catch bad @PackageID values
--IF @SystemID IS NULL
--BEGIN
--	RAISERROR ('Invalid @PackageID, @EnvShortName values in call to uspVerifyPackageLoadStatus', 16, 1) WITH SETERROR;
--	RETURN;
--END

--SELECT @LoadProcessID = dbo.ufnGetLoadProcessID(@PackageID, @EnvironmentID, @ParentLoadID, @LoadProcessShortName)

--catch bad @LoadProcessShortName values
--IF @LoadProcessID IS NULL 
--BEGIN
--	RAISERROR ('Invalid @LoadProcessID value returned from ufnGetLoadProcessID() in call to uspVerifyPackageLoadStatus', 16, 1) WITH SETERROR
--	RETURN;
--END

-- check the Latest status of Load Processes that this package is included within, 
-- except for the intended Load Process
--SELECT @StatusCount = Count(*)
--FROM vPackageLoadProcess plp
--INNER JOIN vLoadProcessPackageStatusLatest lppsl
--	ON plp.LoadProcessID = lppsl.LoadProcessID
--	AND plp.EnvironmentID = lppsl.EnvironmentID
--WHERE plp.PackageID = @PackageID
--AND lppsl.SystemID = @SystemID
--AND lppsl.EnvironmentID = @EnvironmentID
----not this load process!
--AND lppsl.LoadProcessID <> @LoadProcessID
--AND lppsl.LoadStatusTypeShortName = 'In Prog'

-- Decline as LoadProcess In Progress for one or more of this package's Load Processes
--IF @StatusCount > 0
--BEGIN
--	SET @LoadProcessResult = 1
--	RETURN
--END

---- check the Latest status of Load Processes that dependent packages are included within,
---- irrespective of whether they are executing within this Load Process.
--SELECT @StatusCount = Count(*)
--FROM ufnGetPackageDependents(@PackageID, @EnvironmentID)  pd
--INNER JOIN vLoadProcessPackageStatusLatest lppsl
--	ON pd.LoadProcessID = lppsl.LoadProcessID
--	AND pd.EnvironmentID = lppsl.EnvironmentID
--WHERE lppsl.LoadStatusTypeShortName = 'In Prog'

-- Decline as LoadProcess In Progress for one or more of dependent package's Load Process
--IF @StatusCount > 0
--BEGIN
--	SET @LoadProcessResult = 2
--	RETURN
--END

-- Accept
SET @LoadProcessResult = 3
RETURN
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[UpdateSourceFile]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
-- =============================================
-- Author:		Adatis
-- Create date: 18/03/2013
-- Description:	Updates Source File milestone dates
-- =============================================
CREATE PROCEDURE [Control].[UpdateSourceFile]
	@SourceFileId	INT, 
	@Stream			VARCHAR(10),
	@ParentLoadId	INT = NULL
AS
BEGIN
	SET NOCOUNT ON;

	IF @Stream = 'SRC2FILE'
	BEGIN
	    UPDATE Control.SourceFile
		   SET [FileExtractedDate]= GETDATE(),
	           [FileExtractedParentLoadId]= @ParentLoadId,
			   [ModifiedDate] = GETDATE()
	    WHERE SourceFileId = @SourceFileId
	END
	
	IF @Stream = 'FILE2EXT'
	BEGIN
		UPDATE Control.SourceFile
		SET	BlobUploadDate = GETDATE() ,
		[ModifiedDate] = GETDATE()
		WHERE SourceFileId = @SourceFileId
	END
	
	IF @Stream in ('EXT2STG', 'SRC2STG')
	BEGIN
		UPDATE Control.SourceFile
		SET	StageDate = GETDATE()
		, [StageParentLoadId] = @ParentLoadId,
		[ModifiedDate] = GETDATE()
		WHERE SourceFileId = @SourceFileId
	END
	
	IF @Stream = 'STG2CLN'
	BEGIN
		IF @ParentLoadId IS NOT NULL
		BEGIN
			UPDATE Control.SourceFile
			SET	CleanDate = GETDATE()
			, [CleanParentLoadId] = @ParentLoadId,
			[ModifiedDate] = GETDATE()
			WHERE SourceFileId = @SourceFileId
		END
		ELSE
		BEGIN
			UPDATE Control.SourceFile
			SET	CleanDate = GETDATE()
			WHERE SourceFileId = @SourceFileId
		END
	END	
		
	IF @Stream = 'CLN2WAR'
	BEGIN
		UPDATE Control.SourceFile
		SET	WarehouseDate = GETDATE(),
		[ModifiedDate] = GETDATE()
		WHERE SourceFileId = @SourceFileId
	END;

	IF @Stream = 'CLN2TRN'
	BEGIN
		UPDATE Control.SourceFile
		SET	TransformDate = GETDATE(),
		[TransformParentLoadId] = @ParentLoadId,
		[ModifiedDate] = GETDATE()
		WHERE SourceFileId = @SourceFileId
	END;

	IF @Stream = 'STG2TRN'
	BEGIN
		UPDATE Control.SourceFile
		SET	TransformDate = GETDATE(),
		[TransformParentLoadId] = @ParentLoadId,
		[ModifiedDate] = GETDATE()
		WHERE SourceFileId = @SourceFileId
	END;

	IF @Stream = 'TRN2WAR'
	BEGIN
		UPDATE Control.SourceFile
		SET	WarehouseDate = GETDATE(),
		[ModifiedDate] = GETDATE()
		WHERE SourceFileId = @SourceFileId
	END;

	IF @Stream = 'SRC2STG'
	BEGIN
		UPDATE Control.SourceFile
		SET	StageDate = GETDATE()
		,UnloadFile = 0
		,PurgeFromArchive = 0
		,FileUnloadedDate = NULL
		,FileUnloaded = 0
		,ArchivePurgedDate = NULL
		,ArchivePurged = 0
		WHERE SourceFileId = @SourceFileId
	END

	IF @Stream = 'CLN2MDS'
	BEGIN
		UPDATE Control.SourceFile
		SET	MDSDate = GETDATE()
		WHERE SourceFileId = @SourceFileId
	END

	IF @Stream = 'MDS2CLN'
	BEGIN
		UPDATE Control.SourceFile
		SET	MDSDate = GETDATE()
		WHERE SourceFileId = @SourceFileId
	END


	IF @Stream = 'CLN2WH'
	BEGIN
		UPDATE Control.SourceFile
		SET	WarehouseDate = GETDATE()
		,FileUnloaded = 0
		,UnloadFile = 0
		,IsLoaded = 1
		WHERE SourceFileId = @SourceFileId
	END


	IF @Stream = 'ANA2ARC'
	BEGIN
		UPDATE Control.SourceFile
		SET	WarehouseDate = GETDATE()
		,PurgeFromArchive = 0
		,ArchivePurged = 0
		WHERE SourceFileId = @SourceFileId
	END

	IF @Stream = 'STG2SCR'
	BEGIN
		UPDATE Control.SourceFile
		SET	ScrubDate = GETDATE()
		WHERE SourceFileId = @SourceFileId
	END

	IF @Stream = 'SCR2CLN'
	BEGIN
		UPDATE Control.SourceFile
		SET	CleanDate = GETDATE()
		WHERE SourceFileId = @SourceFileId
	END

	IF @Stream = 'CLN2OLP'
	BEGIN
		UPDATE Control.SourceFile
		SET	OLAPDate = GETDATE()
		,FileUnloaded = 0
		,UnloadFile = 0
		WHERE SourceFileId = @SourceFileId
	END
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[UpdatePartitionLog]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [Control].[UpdatePartitionLog]
	@intPartnerMaxLoadDate int,
	@intPartitionLoadId int,
	@bitSuccessLoad bit,
	@LoadID int
AS

Update [Control].[PartitionLoad]
	Set
		[MaxLoadDate] = @intPartnerMaxLoadDate
		,[LoadSuccessful] = @bitSuccessLoad
		,[LoadId] = @LoadID
Where
	PartitionLoadId = @intPartitionLoadId
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[UpdatePackageLoad]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
-- =============================================
-- Author:		Adatis Consulting
-- Create date:		Unknown
-- Description:		Used in conjunction with the SISS End Load Task 
-- ==========================================================================================
CREATE PROCEDURE [Control].[UpdatePackageLoad]
	@LoadId int, @LoadStatusShortName varchar(10), @EndTime datetime, @TotalRows int = 0, @BadRows int = 0
AS

DECLARE @LoadStatusId int
SELECT @LoadStatusId = LoadStatusTypeId FROM Control.LoadStatusType WHERE ShortName = @LoadStatusShortName

--catch bad @LoadStatusShortName values
IF @LoadStatusID IS NULL 
	Begin
		RaisError ('Invalid @LoadStatusShortName value in call to Update Package Load', 16, 1) WITH SETERROR
		Return;
	End
ELSE
	UPDATE Audit.PackageLoad 
		SET LoadStatusId = @LoadStatusId,
		EndTime = @EndTime,
		Duration = DateDiff(Second, StartTime, @EndTime)
	WHERE LoadId = @LoadId

Return;
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[ObtainNewLoadId]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
-- =============================================
-- Author:		Adatis Consulting
-- Create date:		06/11/2006
-- Description:		Inserts record into PackageLoad table with status 'In Progress' to 
--					signify the start of a new package load.
--					@EnvShortName			- the environment ShortName
--					@ParentLoadId			- optional - the LoadId of the parent package.
--											- required if @LoadProcessShortName is null
--					@ExecutionId			- the unique identifier for the package execution
--					@PackageId				- the unique identifier for the package
--					@LoadProcessShortName	- optional - the short name for the load process.
--											- required if @ParentLoadId = 0
--					@StartTime				- start time for the new load
--					@LoadId					- Output for resultant LoadId for new load
-- ==========================================================================================

CREATE PROCEDURE [Control].[ObtainNewLoadId]
	@ParentLoadId int = 0, 
	@ExecutionId uniqueidentifier, 
	--@EnvironmentId int,
	@PackageId uniqueidentifier,
	@VersionId uniqueidentifier = null,
	@PackageName NVarchar(100) = null,
	@LoadProcessShortName varchar(20) = NULL,
	@StartTime datetime, 
	@SSISCatalogExecutionId int, 
	@LoadId int Output
AS

DECLARE @SystemId int, @LoadStatusId int, 
		@IsLoadProcessPackage bit, @LoadProcessId int, @SSISCatPackageId int, @SSISCatProjectId int

--either @ParentLoadId or @LoadProcessShortName must contain real values for the Load Process to be ascertained
IF @ParentLoadId = 0 AND @LoadProcessShortName IS NULL
BEGIN
	RAISERROR ('Invalid @ParentLoadId, @LoadProcessShortName values in call to Obtain New LoadId', 16, 1) WITH SETERROR;
	RETURN;
END

SET @LoadId = 0
SET @LoadProcessId = 0

SELECT @LoadStatusId = LoadStatusTypeId FROM LoadStatusType WHERE ShortName = 'InProgress'

IF @LoadStatusId IS NULL 
BEGIN
	RAISERROR ('Invalid @LoadStatusId value in call to Obtain New LoadId', 16, 1) WITH SETERROR
	RETURN;
END


--catch bad @PackageId values
IF @PackageId IS NULL
BEGIN
	RAISERROR ('Invalid @PackageId values value in call to Obtain New LoadId', 16, 1) WITH SETERROR;
	RETURN
END

DECLARE @EnvironmentId int = -1

--SELECT @IsLoadProcessPackage = IsLoadProcessPackage,
--@LoadProcessId = dbo.ufnGetLoadProcessId(@PackageId, @EnvironmentId, @ParentLoadId, @LoadProcessShortName)
--FROM Package 
--WHERE PackageId = @PackageId
--AND EnvironmentId = @EnvironmentId

SET @ParentLoadId = nullif(@ParentLoadId, 0)

--IF @LoadProcessId IS NULL 
--BEGIN
--	RAISERROR ('Invalid @LoadProcessId value returned from ufnGetLoadProcessId() in call to uspNewLoad', 16, 1) WITH SETERROR
--	RETURN;
--END

-- Insert new load
INSERT INTO Audit.PackageLoad
	(EnvironmentId, ParentLoadId, PackageGUID, ExecutionGUID, ProjectId,  PackageName, LoadStatusId, StartTime, ExecutionId, LoadProcess, PackageVersionGUID )
VALUES 
	(@EnvironmentId, @ParentLoadId, @PackageId, @ExecutionId , @SSISCatProjectId, @PackageName, @LoadStatusId,  @StartTime, @SSISCatalogExecutionId, @LoadProcessShortName, @VersionId )
-- get the inserted Identity
SET @LoadId = @@Identity
RETURN;
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[ObtainEntityIdForFile]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
-- =============================================
-- Author:		Adatis
-- Create date: 06/06/2013
-- Description:	Returns an EntityId for the passed in FileId & EntityName. If no rows match the input parameters then the procedure will return 0.
-- =============================================
CREATE PROCEDURE [Control].[ObtainEntityIdForFile]
	@SourceFileId		INT, 
	@EntityTypeName		VARCHAR(50)
AS

SET NOCOUNT ON;

SELECT TOP 1 
	EntityId
FROM
(
	SELECT 
		EntityId
	FROM 
		Control.Entity E
		INNER JOIN Control.EntityType ET 
		  ON E.EntityTypeId = ET.EntityTypeId 
	WHERE 
		SourceFileId = @SourceFileId 
		AND ET.Name = @EntityTypeName
	UNION 
		SELECT 
			0 AS EntityId
) E
ORDER BY
	EntityId DESC;
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[ObtainEntityId]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
-- =============================================
-- Author:		Adatis
-- Create date: 18/03/2013
-- Description:	Gets Entity Id 
-- =============================================
CREATE PROCEDURE [Control].[ObtainEntityId]
	@SourceFileId INT, 
	@EntityName VARCHAR(50),
	@LoadId int = -1, 
	@ParentEntityId INT = NULL   
AS
BEGIN
	SET NOCOUNT ON;

DECLARE @EntityId INT 
DECLARE @EntityTypeId INT 
DECLARE @ApplicationId SMALLINT

SELECT @EntityId = E.EntityId, @ApplicationId = sf.ApplicationId
  FROM [Control].[SourceFile] SF 
  INNER JOIN [Control].[Entity] E ON SF.SourceFileId = E.SourceFileId 
  INNER JOIN [Control].EntityType ET ON E.EntityTypeId = ET.EntityTypeId 
  WHERE ET.Name = @EntityName AND E.SourceFileId = @SourceFileId 

IF COALESCE(@EntityId,0) = 0 
BEGIN 

SELECT @ApplicationId = sf.ApplicationId
  FROM [Control].[SourceFile] SF 
      --added this new line
  WHERE sourcefileid = @SourceFileId

SELECT @EntityTypeId = EntityTypeId 
FROM 
[Control].EntityType
WHERE Name = @EntityName

INSERT INTO [Control].[Entity]
           (
           [SourceFileId]
           ,[EntityTypeId]
		   ,[ApplicationId]
		   ,LoadId
		   ,ParentEntityId)
     VALUES
           (
           @SourceFileId
           ,@EntityTypeId
		   ,@ApplicationId
		   ,@LoadId
		   ,@ParentEntityId)
		SELECT @@Identity AS EntityId
END 

ELSE Select @EntityID AS EntityId 
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[AttachSourceDatabase]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO

CREATE PROCEDURE [Control].[AttachSourceDatabase]
	@NewDatabaseName NVARCHAR(128),
	@DataFile NVARCHAR(1000), 
	@LogFile NVARCHAR(1000) = NULL, 
	@QueueTaskId int
AS
BEGIN
	
	SET NOCOUNT ON;

	DECLARE	@return_value int
	DECLARE @AttachStatement NVARCHAR(MAX)
    
	SET @AttachStatement = N'CREATE DATABASE SourceData_'+ @NewDatabaseName+' ON (FILENAME = ''' + @DataFile + ''')' 

	IF @LogFile IS NOT NULL 
	BEGIN 
		SET @AttachStatement = @AttachStatement + ',(FILENAME = ''' + @LogFile + ''')' 
	END 

	SET @AttachStatement = @AttachStatement + 'FOR ATTACH;'

	CREATE TABLE #ErrFile (ExecError INT, ErrorMessage NVARCHAR(4000))
	DECLARE @ExecError INT
	DECLARE @ExecErrorMessage VARCHAR(4000)

		SET @AttachStatement =  @AttachStatement + 'INSERT #ErrFile VALUES(@@ERROR, ERROR_MESSAGE())'
		EXEC (@AttachStatement)
	    SELECT 
			@ExecError = ExecError,  
			@ExecErrorMessage = ErrorMessage 
		FROM 
			#ErrFile
		IF @ExecError <> 0 
		RAISERROR (@ExecErrorMessage, 16,1,4,@ExecError)

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[InsertBatchControl]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
-- =============================================
-- Author:		Adatis Consulting - SAW
-- Create date:		26/04/2016
-- Description:		Inserts record into Batch Control table for logging source files included in a load
--					@GlobalLoadId			- the LoadId of the package that initated the whole load.
--					@ExecutionId			- the unique identifier for the package execution
--					@PackageId				- the unique identifier for the package
--					@StartTime				- start time for the new batch
-- ==========================================================================================

CREATE PROCEDURE [Control].[InsertBatchControl]
	@GlobalLoadId int = 0, 
	@ExecutionId uniqueidentifier, 
	@StartTime datetime,
	@SourceFileId int
AS

--either @ParentLoadId or @LoadProcessShortName must contain real values for the Load Process to be ascertained
IF @GlobalLoadId = 0
BEGIN
	RAISERROR ('Invalid @ParentLoadId value in call to Batch Control Table', 16, 1) WITH SETERROR;
	RETURN;
END

-- Insert new load
INSERT INTO [Control].[BatchControl]
	( GlobalLoadId, GlobalExecutionId, StartTime, SourceFileId )
VALUES 
	( @GlobalLoadId, @ExecutionId, @StartTime, @SourceFileId );
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[CompleteIncrementalLoad]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
-- =============================================
-- Author:		Adatis
-- Create date: 24/04/2014
-- Description:	Upon completion of a load this logs the time that the next load should start from.
-- =============================================
CREATE PROCEDURE [Control].[CompleteIncrementalLoad]
	@PackageName varchar(100), 
	@LoadStartDate Datetime,
	@LoadId int = -1

AS
BEGIN
	SET NOCOUNT ON;

UPDATE Control.IncrementalLoad
SET 
	 PreviousLoadDate = LoadDate
	,LoadDate = @LoadStartDate
WHERE PackageName = @PackageName

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[RollbackIncrementalLoad]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
-- =============================================
-- Author:		Adatis
-- Create date: 09/06/2014
-- Description:	Sets the package load date for an incremental Load to the previous sucessfull run date in the event of a failiure.
-- =============================================
CREATE PROCEDURE [Control].[RollbackIncrementalLoad]
	@PackageName varchar(100)

AS
BEGIN
	SET NOCOUNT ON;

SET @PackageName = REPLACE(REPLACE(@PackageName, 'Clean ', ''), 'Stage ', '')

UPDATE Control.IncrementalLoad 
SET LoadDate = PreviousLoadDate
WHERE PackageName like '%' + @PackageName

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[StartIncrementalLoad]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
-- =============================================
-- Author:		Adatis
-- Create date: 24/04/2014
-- Description:	Returns the start time for an incremental load. If the load has not been run before and no date is passed it will return
--				all records from the table.
-- =============================================
CREATE PROCEDURE [Control].[StartIncrementalLoad]
	@PackageName varchar(100), 
	@LoadStartDate Datetime = null,
	@LoadId int = -1

AS
BEGIN
	SET NOCOUNT ON;

--If no date has been passed then default to 1900-01-01.
IF @LoadStartDate IS NULL
	SET @LoadStartDate = '1900-01-01'

IF (SELECT COUNT(*) FROM Control.IncrementalLoad WHERE PackageName = @PackageName) = 0
	INSERT INTO Control.IncrementalLoad(PackageName, LoadDate, PreviousLoadDate, LoadStatus) VALUES(@PackageName, @LoadStartDate, @LoadStartDate, 1);

--If the Load Status flag has a value of 0 the data has not arrived in Clean_History. As such we want to set the LoadDate Value to PreviousLoadDate value and run again.
IF (SELECT COUNT(*) FROM Control.IncrementalLoad WHERE PackageName = @PackageName AND LoadStatus = 0) > 0
	UPDATE Control.IncrementalLoad SET LoadDate = PreviousLoadDate WHERE PackageName = @PackageName

--Set Load Status to 0 For the load
UPDATE Control.IncrementalLoad SET LoadStatus = 0 WHERE PackageName = @PackageName

--Return The Load Date for the current Load
SELECT LoadDate FROM Control.IncrementalLoad 
WHERE PackageName = @PackageName

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[GetActiveNotificationsToProcess]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [Control].[GetActiveNotificationsToProcess]
AS
BEGIN
SELECT
		[CT].[NotificationId],
		[CT].[NotificationTypeId],
		[CT].[LoadStatusType],
		[CT].[NotificationProcessTypeId],
		[CT].[ShortDescription],
		[CT].[ErrorCode],
		[CT].[VerboseDescription],
		[CT].[NotificationSeverityId],
		[CT].[NotificationStatusId],
		[CT].[FeedName],
		[CT].[Stage],
		[CT].[FeedStartTime],
		[CT].[TimeOfCompletion] [FeedEndTime],
		[CT].[CreatedBy] [FeedLoadInitiatedBy],
		[CT].[RetryOnFailure]
		FROM [Control].[Notification] [CT]
WHERE 
	[CT].[NotificationStatusId] = 10 
	OR ([CT].[NotificationStatusId] = 40 AND [CT].[RetryOnFailure] < 3)

	ORDER BY [CT].LoadId ASC, [CT].[NotificationId] 
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[GetEmailAddressForNotificationSeverity]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [Control].[GetEmailAddressForNotificationSeverity] (@NotificationSeverityId int, @NotificationMessageTypeId INT)
AS
BEGIN
	DECLARE @EmailAddresses nvarchar(max)

	SELECT
		@EmailAddresses = COALESCE(@EmailAddresses + '; ', '') + [SUBQUERY].[EmailId]
	FROM --SELECT * FROM 
	(SELECT
		[USERS].NotificationSubscriberID,
		[USERS].[IsDeleted],
		[USERS].[FirstName],
		[USERS].[LastName],
		[USERS].[EmailId],
		[USERS].[TextMessageNumber],
		[USERS].[InstantMessageID]
	FROM [Control].[NotificationDistibutionConfig] DSBN_CONFIG
	INNER JOIN [Control].[NotificationGroups] GROUPS
		ON DSBN_CONFIG.NotificationGroupID = GROUPS.NotificationGroupID
	INNER JOIN [Control].NotificationGroupMembers GROUP_MEMBERS
		ON GROUPS.NotificationGroupID = GROUP_MEMBERS.NotificationGroupID
	INNER JOIN [Control].NotificationSubscribers USERS
		ON GROUP_MEMBERS.NotificationSubscriberID = USERS.NotificationSubscriberID
	WHERE DSBN_CONFIG.IsGroupMessage = 1
	AND DSBN_CONFIG.IsDeleted = 0
	AND GROUPS.IsDeleted = 0
	AND GROUP_MEMBERS.IsDeleted = 0
	AND USERS.IsDeleted = 0
	AND DSBN_CONFIG.NotificationSeverityId = @NotificationSeverityId 
	AND USERS.NotificationMessageTypeId = @NotificationMessageTypeId
	UNION
	SELECT
		[USERS].NotificationSubscriberID,
		[USERS].[IsDeleted],
		[USERS].[FirstName],
		[USERS].[LastName],
		[USERS].[EmailId],
		[USERS].[TextMessageNumber],
		[USERS].[InstantMessageID]
	FROM [Control].[NotificationDistibutionConfig] DSBN_CONFIG
	INNER JOIN [Control].NotificationSubscribers USERS
		ON DSBN_CONFIG.NotificationSubscriberID = USERS.NotificationSubscriberID
	WHERE DSBN_CONFIG.IsGroupMessage = 0
	AND DSBN_CONFIG.IsDeleted = 0
	AND USERS.IsDeleted = 0
	AND DSBN_CONFIG.NotificationSeverityId = @NotificationSeverityId
	AND USERS.NotificationMessageTypeId = @NotificationMessageTypeId) SUBQUERY

	SELECT
		@EmailAddresses EMailAddresses
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[GetNotificationMessageTemplate]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [Control].[GetNotificationMessageTemplate] (@NotificationMessageTypeId int)
AS
BEGIN
	SELECT
		MessageHTML
	FROM [Control].[NotificationEmailMessageFormats]
	WHERE NotificationMessageTypeId = @NotificationMessageTypeId AND IsDeleted = 0
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[CheckSourceFilesIfStagedInClean]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [Control].[CheckSourceFilesIfStagedInClean]
	@pShouldCleanBlob BIT OUT
AS
BEGIN
/*
 *	Gets the last inserted connections string for BLOB storage
 */
	SET NOCOUNT ON;
	DECLARE @shouldCleanBlob BIT;

	IF EXISTS (SELECT TOP(1) *
			   FROM [Control].[SourceFile] 
			   WHERE [FileExtractedDate] IS NOT NULL
			     AND [BlobUploadDate] IS NOT NULL
			     AND [StageDate] IS NOT NULL
			     AND [CleanDate] IS NOT NULL
			     AND [WarehouseDate] IS NULL
				 ORDER BY [SourceFileName]) 
		SET @shouldCleanBlob = 1; 
	ELSE 
		SET @shouldCleanBlob = 0;

	SET @pShouldCleanBlob = @shouldCleanBlob;
		
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[WaitGlobalProcessPackageCompletion]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO


CREATE PROCEDURE [Control].[WaitGlobalProcessPackageCompletion]
	@LoadProcessShortName varchar(20),
	@StartTime datetime

AS


DECLARE @StatusId int 
SET @StatusId = 0

WAITFOR DELAY '00:00:05'


 SELECT DISTINCT TOP 1 
		@StatusId = LoadStatusId 
	FROM 
		[Audit].[PackageLoad]  
			WHERE  StartTime >=  @StartTime AND LoadStatusId <> 2 AND LoadProcess <> @LoadProcessShortName 
 ORDER BY 
	LoadStatusId ASC 

IF @StatusId = 3  
	BEGIN  

		RAISERROR ('Packages Failed - Warehouse Will not Process - See Package Process Report', 16, 1) WITH SETERROR  
	
	END

ELSE IF COALESCE(@StatusId,0) = 0  
	BEGIN  
		SELECT 
			 COUNT(LoadId) AS PackageCount 
		FROM 
			[Audit].[PackageLoad]  
		WHERE  
			StartTime >  COALESCE((SELECT MAX(EndTime) AS ProcessLast 
									FROM [Audit].[PackageLoad]  
									WHERE  PackageName = 'C2W.Process.dtsx' AND LoadStatusId <> 3)  ,@StartTime) 
			AND ENDTIME IS NOT NULL 
			AND LoadStatusId = 2
		

	END 	
ELSE
BEGIN 
  SELECT -1 AS PackageCount 
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[ObtainSourceFileId]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
-- =============================================
-- Author:		Adatis
-- Create date: 27/09/2016
-- Description:	Gets SourceFileId by DistributionCode 
-- =============================================
CREATE PROCEDURE [Control].[ObtainSourceFileId] 
	@DistributionCode VARCHAR(255),
	@SourceFileId INT OUT
AS
BEGIN
	SET NOCOUNT ON;
	SET @SourceFileId = (SELECT TOP (1) SourceFileId
						 FROM [Control].[SourceFile] AS sf
						   LEFT JOIN [Control].[SourceFileType] AS sft
						   ON sf.[SourceFileTypeId] = sft.SourceFileTypeId
						 WHERE sft.Code = 'DX'
						 AND sf.SourceFileName = @DistributionCode) 

	SET NOCOUNT OFF;
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[InsertSourceFile]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [Control].[InsertSourceFile]
				 @FileName VARCHAR(250),
				 @LoadId int,
				 @ApplicationCode VARCHAR(80),
				 @Source VARCHAR(80),
				 @SourceFileId int OUT

AS


DECLARE @ApplicationId int


SELECT @ApplicationId = [ApplicationId] FROM [Control].[Application]  WHERE Code = @ApplicationCode


IF NOT EXISTS (SELECT (1) FROM [Control].[SourceFile] WHERE [SourceFileName]= @FileName)
  BEGIN
    INSERT INTO [Control].[SourceFile] (
										[SourceFileName],
										[SourceFileTypeId],
										[ModifiedDate],
										[FileSizeBytes],
										[IsCompressed],
										[Source],
										[UnloadFile],
										[LoadId],
										[ApplicationId] )
       SELECT    @FileName
				,1
				,SYSDATETIME()
				,0 
				,0 
				,@Source
				,0 
				, @LoadId
				, @ApplicationId


  END


  
SET @SourceFileId = (SELECT TOP(1) SourceFileId 
					   FROM [Control].[SourceFile] 
					  WHERE [SourceFileName]= @FileName
					    AND [ApplicationId] = @ApplicationId)
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[ObtainDistributionsReadyToProcess]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO

CREATE PROCEDURE [Control].[ObtainDistributionsReadyToProcess]
	@pApplicationCode nvarchar(50),
	@pSourceFileName nvarchar(255) OUT
AS
BEGIN
/*
 *	Gets the last inserted connections string for BLOB storage
 */
	SET NOCOUNT ON;
	SET @pSourceFileName = (SELECT TOP(1) 
								SF.[SourceFileName] 
							  FROM [Control].[SourceFile] AS SF
						 LEFT JOIN [Control].[Application] AS A
								ON SF.ApplicationId = A.ApplicationId 
							 WHERE SF.[BlobUploadDate] IS NULL
							   AND SF.[StageDate] IS NULL
							   AND SF.[CleanDate] IS NULL
							   AND SF.[WarehouseDate] IS NULL
							   AND A.Code = @pApplicationCode
							   AND NOT EXISTS (SELECT * 
										 	     FROM [Control].[SourceFile] AS SF
										    LEFT JOIN [Control].[Application] AS A
												   ON SF.ApplicationId = A.ApplicationId 
										        WHERE SF.[BlobUploadDate] IS NOT NULL
											   	  AND A.Code = @pApplicationCode
												  AND (
														SF.[StageDate] IS NULL OR
														SF.[CleanDate] IS NULL OR
														SF.[WarehouseDate] IS NULL
													  )
											  )
							ORDER BY [SourceFileName]);

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[ObtainBlobContainers]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO

CREATE PROCEDURE [Control].[ObtainBlobContainers]
	@pApplicationCode VARCHAR(80)
AS
BEGIN
/*
 *	Gets the last inserted connections string for BLOB storage
 */
	SET NOCOUNT ON;

	SELECT 
		E.[Code] 
	FROM [Control].[EntityType] AS E
	LEFT JOIN [Control].[Application] AS A
		ON E.ApplicationId = A.ApplicationId
	WHERE A.[Code] = @pApplicationCode
	  AND E.[IsSourceEntity] = 1;

	SET NOCOUNT OFF;
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[ObtainEntityUploadDetails]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [Control].[ObtainEntityUploadDetails]
	@ApplicationCode	varchar(80),
	@SourceTable		varchar(80),
	@Container			varchar(50) OUTPUT
AS
BEGIN
	SET @Container =(SELECT	E.[Code]
					   FROM [Control].[EntityType] AS E
				  LEFT JOIN [Control].[Application] AS A
					     ON E.ApplicationId = A.ApplicationId
					  WHERE E.[Table] = @SourceTable
						AND E.IsSourceEntity = 1
						AND A.Code = @ApplicationCode
					)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[VerifyPackageExecution]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
-- =============================================
-- Author:		Adatis Consulting
-- Create date: 07/07/2016
-- Description: Verifies whether a load process has been previously
--				run for a given entity so a package can skip the
--				unecessary repeat of processed packages.
-- =============================================
CREATE PROCEDURE [Control].[VerifyPackageExecution] (@EntityId int,
													@ProcessStream varchar(25),
													@VerifyResult int OUTPUT)
AS
BEGIN

	SET  @EntityId = 198
	SET  @ProcessStream = 'TRN2WAR'


	/* Additional logic to override if the whole file needs reprocessing */
	/*

	DECLARE	@SourceFileId int,
		@ProcessDateColumn varchar(25)


	SELECT @ProcessDateColumn = DateColumnName
	FROM Control.ProcessStream PS
	WHERE PS.Name = @ProcessStream
	
	DECLARE @sqlCommand nvarchar(1000),
			@ProcessDate DATETIME

	SELECT @SourceFileId = SF.SourceFileId
	FROM Control.Entity E
		INNER JOIN Control.SourceFile SF on E.SourceFileId = SF.SourceFileId
	WHERE E.EntityId = @EntityId

	SET @sqlCommand = 'SELECT @ProcessDate = '+@ProcessDateColumn+'
						FROM Control.SourceFile SF
						WHERE SourceFileId = @SourceFileId'
	EXECUTE sp_executesql @sqlCommand, N'@SourceFileId int, @ProcessDate datetime OUTPUT', @SourceFileId = @SourceFileId, @ProcessDate = @ProcessDate OUTPUT


	IF @ProcessDate IS NULL
		BEGIN
			print 'File not yet stamped, continue'
		END
	*/

	IF EXISTS(	SELECT null
			FROM [Control].[EntityProcessStream] EPS
			WHERE EPS.EntityId = @EntityId
				AND EPS.LoadProcess = @ProcessStream
				AND EPS.LoadStatusTypeId = 2)
	BEGIN
		SET @VerifyResult = 1
		RETURN @VerifyResult
	END
	ELSE
	BEGIN
		SET @VerifyResult = 0
		RETURN @VerifyResult
	END

	/* test sql */
	/*
	SELECT *
	FROM [Control].[EntityProcessStream] EPS
	WHERE EPS.EntityId = 198
		AND EPS.LoadProcess = 'TRN2WAR'
		AND EPS.LoadStatusTypeId = 2

	SELECT E.EntityId, SF.SourceFileName, ET.Name, ET.Description
	FROM Control.Entity E
		INNER JOIN Control.SourceFile SF on E.SourceFileId = SF.SourceFileId
		INNER JOIN Control.EntityType ET on E.EntityTypeId = ET.EntityTypeId
	WHERE E.EntityId = 198

	SELECT SF.*
	FROM Control.Entity E
		INNER JOIN Control.SourceFile SF on E.SourceFileId = SF.SourceFileId
	WHERE E.EntityId = 198
	*/

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[ObtainSourceEntityTypes]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO

-- =============================================
-- Author:		Adatis
-- Create date: 15/12/2016
-- Description:	Gets List of Source Entity Types that need to be extracted
-- =============================================
CREATE PROCEDURE [Control].[ObtainSourceEntityTypes] 
	@ApplicationCode VARCHAR(80)
AS
BEGIN
	SET NOCOUNT ON;
				  SELECT DISTINCT e.[Table], e.[Name]
				  FROM [Control].[EntityType] e
				  LEFT JOIN [Control].[Application] a ON e.ApplicationId = a.ApplicationId 
				  WHERE e.[IsSourceEntity]  = 1 --change this to the source entity flag (new column)
				  AND e.[HasMultipleSourceFile] = 0
				  AND a.Code = @ApplicationCode

	SET NOCOUNT OFF;
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[ObtainDistributionCodeFromSourceFile]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [Control].[ObtainDistributionCodeFromSourceFile]
	@SourceFileId int
AS
BEGIN

	SELECT SourceFileName
	  FROM [Control].[SourceFile]
	 WHERE sourcefileid = @SourceFileId

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[ObtainSourceFileIdForBlobUpload]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [Control].[ObtainSourceFileIdForBlobUpload]
	@ApplicationCode nvarchar(80),
	@SourceFileId    int OUT
AS
BEGIN
/*
 *	Gets the last inserted connections string for BLOB storage
 */
	SET NOCOUNT ON;
	SET @SourceFileId = (SELECT TOP(1) SF.[SourceFileId] 
							    FROM [Control].[SourceFile] AS SF
								LEFT JOIN [Control].[Application] AS A
								  ON A.ApplicationId = SF.ApplicationId
							   WHERE SF.[FileExtractedDate] IS NOT NULL
								 AND SF.[BlobUploadDate] IS NULL
								 AND SF.[StageDate] IS NULL
								 AND SF.[CleanDate] IS NULL
								 AND SF.[WarehouseDate] IS NULL
								 AND A.[Code] = @ApplicationCode
                                 AND NOT EXISTS (SELECT * 
												   FROM [Control].[SourceFile] AS SF
                     							   LEFT JOIN [Control].[Application] AS A
						                 			 ON A.ApplicationId = SF.ApplicationId 
												  WHERE [BlobUploadDate] IS NOT NULL
												    AND [FileExtractedDate] IS NOT NULL
												    AND A.[Code] = @ApplicationCode
													AND ([StageDate] IS NULL
													 OR  [CleanDate] IS NULL
													 OR  [WarehouseDate] IS NULL))
							   ORDER BY [SourceFileName]);

  IF @SourceFileId IS NULL
  BEGIN 
    SET @SourceFileId = 0
  END
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[ObtainSourceFileIdForProcess]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
-- =============================================
-- Author:		Adatis
-- Create date: 15/12/2016
-- Description:	Gets SourceFileId to process at various stages
-- =============================================
CREATE PROCEDURE [Control].[ObtainSourceFileIdForProcess]
	@ProcessStream		VARCHAR(50),
	@ApplicationCode	VARCHAR(80)

AS
BEGIN

IF (@ProcessStream = 'EXT2STG')

BEGIN
			 
			IF EXISTS 
			(SELECT TOP (1) SourceFileId 
			FROM [Control].SourceFile SF
			INNER JOIN [Control].SourceFileType sft on sft.SourceFileTypeId = sf.SourceFileTypeId
			LEFT JOIN [Control].[Application] a on sf.ApplicationId = a.[ApplicationId]
			WHERE [FileExtractedDate] is not null
			AND [BlobUploadDate] is  not null
			AND StageDate is null
			AND a.[Code] = @ApplicationCode
			)
			
			BEGIN
			
			(SELECT TOP (1) SourceFileId 
			FROM [Control].SourceFile SF
			INNER JOIN Control.SourceFileType sft on sft.SourceFileTypeId = sf.SourceFileTypeId
			LEFT JOIN [Control].[Application] a on sf.ApplicationId = a.[ApplicationId]
			WHERE [FileExtractedDate] is not null
			AND [BlobUploadDate] is  not null
			AND StageDate is null
			AND a.[Code] = @ApplicationCode
			)
			END
			
			ELSE SELECT 0
END

IF (@ProcessStream = 'STG2CLN')

BEGIN
			 IF EXISTS
			 (SELECT TOP (1) SourceFileId 
			 FROM [Control].SourceFile SF
			 INNER JOIN [Control].SourceFileType sft on sft.SourceFileTypeId = sf.SourceFileTypeId
			 LEFT JOIN [Control].[Application] a on sf.ApplicationId = a.[ApplicationId]
			 WHERE [FileExtractedDate] is not null
			 AND [BlobUploadDate] is  not null
			 AND StageDate is not null
			 AND [CleanDate] is null
			AND a.[Code] = @ApplicationCode
			 )
			 
			 BEGIN
			 
			 
			 (SELECT TOP (1) SourceFileId 
			 FROM [Control].SourceFile SF
			 INNER JOIN [Control].SourceFileType sft on sft.SourceFileTypeId = sf.SourceFileTypeId
			 LEFT JOIN [Control].[Application] a on sf.ApplicationId = a.[ApplicationId]
			 WHERE [FileExtractedDate] is not null
			 AND [BlobUploadDate] is  not null
			 AND StageDate is not null
			 AND [CleanDate] is null
			AND a.[Code] = @ApplicationCode
			 )
			 END
			 
			 ELSE SELECT 0
END

IF (@ProcessStream = 'CLN2WAR') 

BEGIN
			IF EXISTS
			(SELECT TOP (1) SourceFileId 
			FROM [Control].SourceFile SF
			INNER JOIN [Control].SourceFileType sft on sft.SourceFileTypeId = sf.SourceFileTypeId
			LEFT JOIN [Control].[Application] a on sf.ApplicationId = a.[ApplicationId]
			WHERE [FileExtractedDate] is not null
			AND [BlobUploadDate] is  not null
			AND StageDate is not null
			AND CleanDate is not null
			AND WarehouseDate is null
			AND a.[Code] = @ApplicationCode
			)
			
			BEGIN
			
			
			(SELECT TOP (1) SourceFileId 
			FROM [Control].SourceFile SF
			INNER JOIN [Control].SourceFileType sft on sft.SourceFileTypeId = sf.SourceFileTypeId
			LEFT JOIN [Control].[Application] a on sf.ApplicationId = a.[ApplicationId]
			WHERE [FileExtractedDate] is not null
			AND [BlobUploadDate] is  not null
			AND StageDate is not null
			AND CleanDate is not null
			AND WarehouseDate is null
			AND a.[Code] = @ApplicationCode
			)
			END
			ELSE SELECT 0

END



IF (@ProcessStream = 'CLN2TRN') 

BEGIN
			IF EXISTS
			(SELECT TOP (1) SourceFileId 
			FROM [Control].SourceFile SF
			INNER JOIN [Control].SourceFileType sft on sft.SourceFileTypeId = sf.SourceFileTypeId
			LEFT JOIN [Control].[Application] a on sf.ApplicationId = a.[ApplicationId]
			WHERE [FileExtractedDate] is not null
			AND [BlobUploadDate] is  not null
			AND StageDate is not null
			AND CleanDate is not null
			AND TransformDate is null
			AND a.[Code] = @ApplicationCode
			)
			
			BEGIN
			
			
			(SELECT TOP (1) SourceFileId 
			FROM [Control].SourceFile SF
			INNER JOIN [Control].SourceFileType sft on sft.SourceFileTypeId = sf.SourceFileTypeId
			LEFT JOIN [Control].[Application] a on sf.ApplicationId = a.[ApplicationId]
			WHERE [FileExtractedDate] is not null
			AND [BlobUploadDate] is  not null
			AND StageDate is not null
			AND CleanDate is not null
			AND TransformDate is null
			AND a.[Code] = @ApplicationCode
			)
			END
			ELSE SELECT 0

END

IF (@ProcessStream = 'TRN2WAR') 

BEGIN
			IF EXISTS
			(SELECT TOP (1) SourceFileId 
			FROM [Control].SourceFile SF
			INNER JOIN [Control].SourceFileType sft on sft.SourceFileTypeId = sf.SourceFileTypeId
			LEFT JOIN [Control].[Application] a on sf.ApplicationId = a.[ApplicationId]
			WHERE [FileExtractedDate] is not null
			AND [BlobUploadDate] is  not null
			AND StageDate is not null
			AND CleanDate is not null
			AND TransformDate is not null
			AND WarehouseDate is null
			AND a.[Code] = @ApplicationCode
			)
			
			BEGIN
			
			
			(SELECT TOP (1) SourceFileId 
			FROM [Control].SourceFile SF
			INNER JOIN [Control].SourceFileType sft on sft.SourceFileTypeId = sf.SourceFileTypeId
			LEFT JOIN [Control].[Application] a on sf.ApplicationId = a.[ApplicationId]
			WHERE [FileExtractedDate] is not null
			AND [BlobUploadDate] is  not null
			AND StageDate is not null
			AND CleanDate is not null
			AND TransformDate is not null
			AND WarehouseDate is null
			AND a.[Code] = @ApplicationCode
			)
			END
			ELSE SELECT 0

END
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[ObtainSourceFiles]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO

-- =============================================
-- Author:		Adatis
-- Create date: 15/12/2016
-- Description:	Gets List of Source files that need to be extracted
-- =============================================
CREATE PROCEDURE [Control].[ObtainSourceFiles] 
	@ApplicationCode VARCHAR(80)
AS
BEGIN
	SET NOCOUNT ON;
				  SELECT DISTINCT e.[Table]
				  FROM [Control].[EntityType] e
				  LEFT JOIN [Control].[Application] a ON e.ApplicationId = a.ApplicationId 
				  WHERE e.[IsSourceEntity]  = 1 --change this to the source entity flag (new column)
				  AND e.Code <> 'DXSTMTWKDT'
				  AND a.Code = @ApplicationCode

	SET NOCOUNT OFF;
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[ObtainPRBISourceFileId]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
-- =============================================
-- Author:		Adatis
-- Create date: 13/12/2016
-- Description:	Gets SourceFileId by SourceFileName
-- =============================================
CREATE PROCEDURE [Control].[ObtainPRBISourceFileId] 
	@SourceFileName VARCHAR(255),
	@SourceFileCode VARCHAR(400),
	@SourceFileId INT OUT
AS
BEGIN
	SET NOCOUNT ON;
	SET @SourceFileId = (SELECT TOP (1) 
							SourceFileId
						 FROM [Control].[SourceFile] AS sf
						   LEFT JOIN [Control].[SourceFileType] AS sft
						   ON sf.[SourceFileTypeId] = sft.SourceFileTypeId
						 WHERE sft.Code = @SourceFileCode
						 AND sf.SourceFileName = @SourceFileName) 
	SET NOCOUNT OFF;
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[DeleteEntityProcessStream]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [Control].[DeleteEntityProcessStream]
	@EntityId INT,			
	@ProcessStream VARCHAR(50),		
	@LoadProcess VARCHAR(50),		
	@LoadId INT,					
	@LoadStatusTypeId INT			
AS
BEGIN
	SET NOCOUNT ON;
	
	DELETE FROM Control.EntityProcessStream 
	WHERE EntityId = @EntityId 
	  AND ProcessStream = @ProcessStream 
	  AND LoadProcess = @LoadProcess
	  AND LoadId = @LoadId
	  AND LoadStatusTypeId = @LoadStatusTypeId

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[ObtainEntityTypesForBlobUpload]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO

CREATE PROCEDURE [Control].[ObtainEntityTypesForBlobUpload]
	@pApplicationCode VARCHAR(80)
AS
BEGIN
/*
 *	Gets the last inserted connections string for BLOB storage
 */
	SET NOCOUNT ON;

	SELECT 
		E.[Code], 
		E.[Table]
	FROM [Control].[EntityType] AS E
	LEFT JOIN [Control].[Application] AS A
		ON E.ApplicationId = A.ApplicationId
	WHERE A.[Code] = @pApplicationCode
	  AND E.[IsSourceEntity] = 1;

	SET NOCOUNT OFF;
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[VerifyIfPackageAlreadyRun]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [Control].[VerifyIfPackageAlreadyRun]
	@EntityId INT,
	@ProcessStream VARCHAR(50),
	@LoadProcess VARCHAR(50),
	@LoadId INT
AS
BEGIN
	
	SET NOCOUNT ON;

	DECLARE	@return_value int
	DECLARE @LoadStatus INT = 0 
	DECLARE @EndTime datetime = GETDATE()
	

	SELECT TOP 1 @LoadStatus = eps.LoadStatusTypeId
	FROM [Control].[EntityProcessStream] eps
	LEFT JOIN [Control].[Entity] e			ON eps.EntityId = e.EntityId
	LEFT JOIN [Control].[EntityType] et		ON et.EntityTypeId = e.EntityTypeId
	WHERE eps.EntityId = @EntityId
	  AND eps.LoadId <>  @LoadId
	  AND eps.ProcessStream = @ProcessStream
	  AND eps.LoadProcess = @LoadProcess
	ORDER BY eps.LoadId DESC
	
	IF (@LoadStatus = 2 OR @LoadStatus = 5)
		BEGIN 
			
			EXEC [Control].[UpdatePackageLoad] @LoadId, 'AlreadyRun', @EndTime

			EXEC [Control].[InsertEntityProcessStream] @EntityId, @LoadProcess, @ProcessStream, @LoadId, 'AlreadyRun'

			SET @return_value = 1

		END 
	ELSE 
		BEGIN 

			SET @return_value = 0
		END
    
	
		SELECT @return_value AS Return_Value

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[ObtainActivePartitionKeys]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [Control].[ObtainActivePartitionKeys] (@SourceFileType varchar(25))
AS
BEGIN
	SET NOCOUNT ON

	SELECT PartitionKey,
       ISNULL(stuff( (SELECT ','+cast(SourceFileId as varchar(10))
               FROM [Control].[SourceFile] SF2
               WHERE		(SF2.PartitionKey = SF.PartitionKey
							AND MDSDate is not null
							AND	IsToBeLoaded = 1
							AND	coalesce(IsLoaded,0) = 0) OR
							(SF2.PartitionKey = SF.PartitionKey
							AND MDSDate is not null
							AND	coalesce(IsToBeLoaded,0) = 1
							AND	coalesce(IsLoaded,0) = 1)					 
               ORDER BY SourceFileId
               FOR XML PATH(''), TYPE).value('.', 'varchar(max)')
            ,1,1,''),'0') SourceFileIDs
      FROM [Control].[SourceFile] SF INNER JOIN
			[Control].[SourceFileType] SFT ON SF.SourceFileTypeID = SFT.SourceFileTypeID
	 WHERE (Code = 'Online'
			AND MDSDate is not null
			AND	IsToBeLoaded = 1
			AND	coalesce(IsLoaded,0) = 0
			AND SF.SourceFileId >0 ) OR
			(Code = 'Online'
			AND MDSDate is not null
			AND	coalesce(IsToBeLoaded,0)  = 0
			AND	coalesce(IsLoaded,0) = 1
			AND SF.SourceFileId >0 )
	 GROUP BY PartitionKey
		
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[ObtainChangedPartitionKeys]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [Control].[ObtainChangedPartitionKeys] (@SourceFileType varchar(25))
AS
BEGIN
	SET NOCOUNT ON

	SELECT PartitionKey

      FROM [Control].[SourceFile] SF 
	  INNER JOIN [Control].[SourceFileType] SFT ON SF.SourceFileTypeID = SFT.SourceFileTypeID
	 WHERE (Code = 'Online'
			AND MDSDate is not null
			AND	IsToBeLoaded = 1
			AND	coalesce(IsLoaded,0) = 0
			AND SF.SourceFileId >0 )
	 GROUP BY PartitionKey
		 
	 
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[ProcessSourceFile]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [Control].[ProcessSourceFile] (@SourceFileName	VARCHAR(100), @SourceFileType NVARCHAR(20), @LoadId INT)  
AS ---

SET NOCOUNT ON;

DECLARE @SourceFileId INT


IF NOT EXISTS(SELECT * FROM CONTROL.SourceFile WHERE SourceFileName = @SourceFileName AND SourceFileType = @SourceFileType)
		INSERT INTO CONTROL.SourceFile(SourceFileName, SourceFileType, ModifiedDate, LoadId, FileSizeBytes)
		VALUES(@SourceFileName, @SourceFileType, GETDATE(), @LoadId, 0)
ELSE
		UPDATE Control.SourceFile
		SET LoadId = @LoadId
		WHERE SourceFileName = @SourceFileName 
		AND SourceFileType = @SourceFileType 

SELECT @SourceFileId = SourceFileId 
FROM Control.SourceFile 
WHERE SourceFileName = @SourceFileName
AND SourceFileType = @SourceFileType

RETURN @SourceFileId
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[PartitionManagementSetMOLAPPartitions]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [Control].[PartitionManagementSetMOLAPPartitions]
				(@FactTable varchar(50),
				@DateKey int)
AS
DECLARE @Measures table (MeasureGroupID smallint)
DECLARE	@PartitionDefinitionID tinyint = (select PartitionDefinitionID from [Control].[PartitionDefinition] where PartitionDefinitionName = @FactTable)

INSERT INTO @Measures
SELECT MeasureGroupID 
FROM [Control].[MeasureGroup]
WHERE MeasureGroupSource = @FactTable

UPDATE [Control].[MeasureGroupPartition]
SET Dirty = 1
WHERE MeasureGroupID in (SELECT MeasureGroupID
							FROM [Control].[MeasureGroupPartition]
							WHERE MeasureGroupID in (select MeasureGroupID from @Measures)
												AND PartitionDefinitionID = @PartitionDefinitionID
												AND PartitionID = @DateKey)
					AND PartitionDefinitionID = @PartitionDefinitionID
					AND PartitionID = @DateKey

INSERT INTO [Control].[MeasureGroupPartition]
(
MeasureGroupID, PartitionID, PartitionDefinitionID, FromDateID, ToDateID, PartitionSliceDimension, PartitionSliceAttribute, PartitionSliceKey, Active, Dirty
)
SELECT 
	MeasureGroupID,
	cast(coalesce((select max(value) from sys.partition_range_values LOW where UPP.value > LOW.value AND UPP.function_id = LOW.function_id),20101201) as int) PartitionID,
	@PartitionDefinitionID PartitionDefinitionID,
	cast(coalesce((select max(value) from sys.partition_range_values LOW where UPP.value > LOW.value AND UPP.function_id = LOW.function_id),20101201) as int) FromDateID,
	cast(value as int) ToDateID,
	NULL PartitionSliceDimension,
	NULL PartitionSliceAttribute,
	NULL PartitionSliceKey,
	1 Active,
	1 Dirty
FROM sys.partition_range_values UPP cross join
	@Measures
WHERE cast(coalesce((select max(value) from sys.partition_range_values LOW where UPP.value > LOW.value AND UPP.function_id = LOW.function_id),20101201) as int) = @DateKey
	AND MeasureGroupID NOT IN (SELECT MeasureGroupID
								FROM [Control].[MeasureGroupPartition]
								WHERE MeasureGroupID in (select MeasureGroupID from @Measures)
										AND PartitionDefinitionID = @PartitionDefinitionID
										AND PartitionID = @DateKey)
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[PartitionManagementReplicateIndexes]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [Control].[PartitionManagementReplicateIndexes]
			(@PrimaryTableName varchar(50),
				@StageTableName varchar(100),
				@Debug int = 0)
AS

-- =============================================
-- Author:		Adatis Consulting Ltd 
-- Create date: 2013-07-11
-- Description:	Copies the indexes and compression settings
--			from one table to another. Component in the Partition
--			Management set of stored procs.
-- Testline: Exec [Control].[PartitionManagementReplicateIndexes] '[DW].[FactSample]', '[DW].[FactSampleTest]', 1
-- =============================================

BEGIN
	SET NOCOUNT ON;

	DECLARE @Function int = 1,
		@rows INT,
		@Idxobjects INT,
		@idxcounter int = 1,
		@counter INT = 1 ,
		@IndexName nvarchar(100),
		@IndexType nvarchar(25),
		@TableID int,
		@indexColumns NVARCHAR(max) = '',
		@includeColumns NVARCHAR(max) = '',
		@IncludeStatement NVARCHAR(max) = '',
		@CreateStatement NVARCHAR(max) = '',
		@indexPadded VARCHAR(50),
		@IndexUnique VARCHAR(50),
		@RowLockAllowed VARCHAR(50),
		@PageLockAllowed VARCHAR(50),
		@StatisticsRecompute VARCHAR(50),
		@IndexCompression VARCHAR(50),
		@ErrorMessagee VARCHAR(500)

SET @TableID = OBJECT_ID(@PrimaryTableName,'TABLE')

--Validation
		--Ensure source table exists
		IF(SELECT COUNT(*) from sys.tables t WHERE t.object_id = OBJECT_ID (@PrimaryTableName, N'U') ) = 0
		BEGIN
			SET @ErrorMessagee = 'The source table could not be found, make sure the table name is correct.'

			RAISERROR (@ErrorMessagee,16,1,'number',5)
			RETURN
		END

		--Ensure staging table exists
		IF(SELECT COUNT(*) from sys.tables t WHERE t.object_id = OBJECT_ID (@StageTableName, N'U') ) = 0
		BEGIN
			Set @ErrorMessagee = 'The staging table could not be found, make sure the table name is correct.'

			RAISERROR (@ErrorMessagee,16,1,'number',5)
			RETURN
		END

		--Ensure staging table has no indexes
		IF(SELECT COUNT(*) from sys.indexes i WHERE i.object_id = OBJECT_ID (@StageTableName, N'U')
													and i.index_id > 0) > 0
		BEGIN
			Set @ErrorMessagee = 'The staging table is already indexed. Remove all existing indexes before importing indexes from parent'

			RAISERROR (@ErrorMessagee,16,1,'number',5)
			RETURN
		END

IF  @Function = 1
BEGIN
	IF (SELECT max(index_id) FROM sys.indexes WHERE object_id = OBJECT_ID(@PrimaryTableName,'TABLE') ) > 0
	BEGIN
		--Indexes exist, loop through and collect details
		DECLARE @Indexes TABLE
			(IndexID int,
			 Idxrow int,
			 Clmrow int,
			 IndexType nvarchar(50),
			 IndexName sysname,
			 ColumnName nvarchar(50),
			 SortOrder char(3),
			 TableName sysname,
			 KeyOrdinal tinyint,
			 PrimaryKey bit,
			 IncFlg bit)

			--find index columns
			INSERT INTO @Indexes
			SELECT 
				i.index_id IndexID,
				DENSE_RANK() over (Partition By i.object_id Order by i.index_id) Idxrow,
				ROW_NUMBER() over (Partition By i.object_id, i.index_id, ic.is_included_column Order by ic.key_ordinal) Clmrow,
				i.type_desc,
				i.name as IndexName,
				'[' + c.name + '] ' ColumnName,
				CASE WHEN ic.is_descending_key = 0 THEN 'asc' ELSE 'desc' END SortOrder,
				t.name as tablename,
				ic.key_ordinal,
				i.is_primary_key,
				case when i.type = 6 then 0 else ic.is_included_column end IncFlg
			FROM sys.indexes i inner join 
				sys.index_columns ic ON i.object_id = ic.object_id 
										and i.index_id = ic.index_id inner join 
				sys.tables t ON t.object_id = i.object_id Inner join
				sys.columns c ON ic.object_id = c.object_id
								and ic.column_id  = c.column_id 
			WHERE i.object_id = OBJECT_ID (@PrimaryTableName, N'U')
				and i.index_id > 0
			ORDER BY i.object_id, ic.key_ordinal ASC

			--loop through the table and build list of the columns
			SELECT @Idxobjects = max(Idxrow) FROM @Indexes

			WHILE @idxcounter <= @Idxobjects
			BEGIN
				--reset counters
				SELECT @indexColumns = '',
						@Counter = 1,
						@rows = (select count(*) from @Indexes where Idxrow = @idxcounter and IncFlg = 0),
						@IndexName = (select top 1 IndexName from @Indexes where Idxrow = @idxcounter),
						@IndexType = (select top 1 IndexType from @Indexes where Idxrow = @idxcounter)

				WHILE @Counter <= @rows
	
				BEGIN
					SELECT 
						 @indexColumns = @indexColumns + ', ' + ltrim(rtrim(ColumnName)) +' '+ SortOrder FROM @Indexes
					WHERE Clmrow = @counter
							and Idxrow = @idxcounter
							and IncFlg = 0
					SET @counter += 1
				END

				SET @indexColumns = RIGHT(@indexColumns, LEN(@indexColumns) - 2)

				IF @IndexType = 'NONCLUSTERED' and (select count(*) from @Indexes where Idxrow = @idxcounter and IncFlg = 1) > 0
				BEGIN
					SELECT @counter = 1,
						@rows = (select count(*) from @Indexes where Idxrow = @idxcounter and IncFlg = 1)
					
					WHILE @counter <= @rows
	
					BEGIN
						SELECT 
							 @includeColumns = @includeColumns + ', ' + ltrim(rtrim(ColumnName)) FROM @Indexes
						WHERE Clmrow = @counter
								and Idxrow = @idxcounter
								and IncFlg = 1

						SET @counter += 1
					END

					SET @includeColumns = RIGHT(@includeColumns, LEN(@includeColumns) - 2)

					SET @IncludeStatement = 'INCLUDE ('+@includeColumns+') '
				END

				--Get other index properties
				IF (INDEXPROPERTY(@TableID, @IndexName, 'IsPadded') = 1)
				SET @indexPadded = 'PAD_INDEX = ON'
				ELSE
				SET @indexPadded = 'PAD_INDEX = OFF'


				IF (INDEXPROPERTY(@TableID, @IndexName, 'IsRowLockDisallowed') = 1)
				SET @RowLockAllowed = ', ALLOW_ROW_LOCKS = OFF'
				ELSE
				SET @RowLockAllowed = ', ALLOW_ROW_LOCKS = ON'


				IF (INDEXPROPERTY(@TableID, @IndexName, 'IsPageLockDisallowed') = 1)
				SET @PageLockAllowed = ', ALLOW_PAGE_LOCKS = OFF'
				ELSE
				SET @PageLockAllowed = ', ALLOW_PAGE_LOCKS = ON'


				-- Check if the index is unique
				IF (INDEXPROPERTY(@TableID, @IndexName, 'IsUnique') = 1)
				SET @IndexUnique = 'UNIQUE '
				ELSE 
				SET @IndexUnique = ''


				IF (INDEXPROPERTY(@TableID, @IndexName, 'IsStatistics') = 1)
				SET @StatisticsRecompute = ', STATISTICS_NORECOMPUTE = ON'
				ELSE 
				SET @StatisticsRecompute = ', STATISTICS_NORECOMPUTE = OFF'

				--Find index compression type

				SELECT top 1 @IndexCompression =
						CASE 
							WHEN data_compression_desc = 'NONE' THEN ', DATA_COMPRESSION = NONE '
							WHEN data_compression_desc = 'PAGE' THEN ', DATA_COMPRESSION = PAGE '
							WHEN data_compression_desc = 'ROW' THEN ', DATA_COMPRESSION = ROW '
							WHEN data_compression_desc = 'COLUMNSTORE' THEN ''
						END 
					 FROM sys.partitions PAR
				INNER Join sys.indexes IDX ON PAR.object_id = IDX.object_id AND PAR.index_id = IDX.index_id
				WHERE PAR.object_id = @TableID
					and IDX.name = @IndexName

				DECLARE @StrippedTableName varchar(100) = REPLACE(REPLACE(REPLACE(@StageTableName,'.',''),'[',''),']','')

				--build the create statement
				SET @CreateStatement = CASE WHEN @IndexType = 'NONCLUSTERED COLUMNSTORE'
				THEN 'CREATE ' + @IndexUnique + @IndexType +' INDEX [Indx_' + @StrippedTableName + cast(@idxcounter as varchar) + '] ON ' 
										+ @StageTableName + ' (' + REPLACE(REPLACE(@indexColumns,' asc',''),' desc','') + ') '
				ELSE 'CREATE ' + @IndexUnique + @IndexType +' INDEX [Indx_' + @StrippedTableName + cast(@idxcounter as varchar) + '] ON ' 
										+ @StageTableName + ' (' + @indexColumns + ') ' +@IncludeStatement+'WITH (' + @indexPadded + @RowLockAllowed + @PageLockAllowed
										+ @StatisticsRecompute + @IndexCompression + ')'
				END
				
				
				IF @Debug = 1
				BEGIN
					print @CreateStatement
				END
				ELSE
				BEGIN
					Exec(@CreateStatement)
				END

				SET @idxcounter += 1
				CONTINUE;
			END
	END

	IF EXISTS(SELECT null FROM sys.indexes WHERE object_id = OBJECT_ID(@PrimaryTableName,'TABLE') and index_id = 0)
	--Determine Compression
	set @IndexCompression = (select top 1 data_compression_desc from sys.partitions where object_id = OBJECT_ID(@PrimaryTableName,'TABLE'))

	IF @Debug = 1
	BEGIN
		print 'ALTER TABLE '+@StageTableName+' REBUILD PARTITION = ALL WITH (DATA_COMPRESSION = '+@IndexCompression+')'
	END
	ELSE
	BEGIN
		Exec('ALTER TABLE '+@StageTableName+' REBUILD PARTITION = ALL WITH (DATA_COMPRESSION = '+@IndexCompression+')')
	END
END

IF @Function = 2
	BEGIN
		IF @Debug = 1
		BEGIN
			print 'ALTER TABLE '+@StageTableName+' REBUILD PARTITION = ALL WITH (DATA_COMPRESSION = '+@IndexCompression+')'
		END
		ELSE
		BEGIN
			Exec('ALTER TABLE '+@StageTableName+' REBUILD PARTITION = ALL WITH (DATA_COMPRESSION = '+@IndexCompression+')')
		END
	END
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[ObtainFilesToUnloadDataRetention]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [Control].[ObtainFilesToUnloadDataRetention]
(@NumberOfMonthsRetained INT)
AS

SET NOCOUNT ON;

DECLARE @DaysToRetain INT;

SET @DaysToRetain = @NumberOfMonthsRetained * 30;

SELECT
	SourceFileId, SourceFileName
FROM
	Control.SourceFile
WHERE
	(UnloadFile = 1
	AND COALESCE(FileUnloaded, 0) = 0 )
	
	OR (DATEDIFF(dd, StageDate, GETDATE()) >= @DaysToRetain AND SourceFileId < -1)
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[ObtainFilesToUnload]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [Control].[ObtainFilesToUnload]
AS

SET NOCOUNT ON;

SELECT
	SourceFileId
FROM
	Control.SourceFile
WHERE
	UnloadFile = 1
	AND COALESCE(FileUnloaded, 0) = 0;
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[ObtainBulkEntityId]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [Control].[ObtainBulkEntityId] 
	
	@SourceFileList varchar(4000), --= '2,3,4,5,6,7,8',
	@EntityName VARCHAR(50),
	@LoadId int = -1,
	@ParentEntityId INT = NULL   

 AS
 BEGIN
	SET NOCOUNT ON;
--DECLARE	@EntityName VARCHAR(50) = 'OrcUsageComponent'
--DECLARE	@LoadId int = -1
--DECLARE	@ParentEntityId INT = NULL   
--DECLARE @SourceFileList varchar(50) = '2,3,4,5,6,7,8'
--DECLARE @SourceFile AS INT 
--DECLARE C Cursor FOR SELECT VALUE from [Control].[SplitCSV] (@SourceFileList)

DECLARE @SourceFile AS INT 
DECLARE C Cursor FOR SELECT VALUE from [Control].[SpiltCSV] (@SourceFileList)



OPEN C

FETCH NEXT FROM C into @SourceFile

WHILE @@FETCH_STATUS = 0
BEGIN
--PRINT @SourceFile

EXEC [Control].[ObtainEntityId] @SourceFile,@EntityName,@LoadId,@ParentEntityId

FETCH NEXT FROM C INTO @SourceFile
END
CLOSE C
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[GetSourceFileFromEntity]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [Control].[GetSourceFileFromEntity] @EntityId	INT
AS ---

SET NOCOUNT ON;


SELECT SourceFileid 
FROM Control.ENtity
WHERE EntityId = @EntityId
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[CreateViewForStage]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE  [Control].[CreateViewForStage]

	@SchemaName nVARCHAR(255),
	@TableName nVARCHAR(255),
	@DestinationDB nVARCHAR(255),
	@SourceDB nVARCHAR(255),
	@LoadId int 

AS

DECLARE @sql NVARCHAR(MAX)
DECLARE @ParamDefinition AS NVARCHAR(MAX)
DECLARE @MoreParamDefinition AS NVARCHAR(max) 
DECLARE @Moredynamicsql NVARCHAR(MAX)
DECLARE @sqlforview NVARCHAR(MAX)

IF LEFT(@SourceDB,11) <> 'SourceData_'
BEGIN 
	SET @SourceDB = 'SourceData_' + @SourceDB
END  

	SET  @sql = 
	REPLACE('SELECT [ColumnName] AS MetaDataColumnName
	 ,CASE WHEN tmp.name COLLATE DATABASE_DEFAULT IS NULL THEN tmp.Name COLLATE DATABASE_DEFAULT ELSE [ColumnName] COLLATE DATABASE_DEFAULT END AS SourceColumnName
	FROM [Metadata].[vDatabaseStructure]
	LEFT JOIN (SELECT c.name
	FROM %%SourceDB%%.sys.columns c
	JOIN %%SourceDB%%.sys.tables t ON c.object_id = t.object_id 
	WHERE t.name = @TableName )tmp ON tmp.name COLLATE DATABASE_DEFAULT = ColumnName COLLATE DATABASE_DEFAULT
	WHERE DatabaseName = @DestinationDB  AND SchemaName = @SchemaName AND TABLENAME = @TableName','%%SourceDB%%', @SourceDB
	)
	set @ParamDefinition = '@SchemaName VARCHAR(255),
							@TableName VARCHAR(255),
							@DestinationDB VARCHAR(255) ,
							@SourceDB VARCHAR(255)'

	CREATE table #ParamsList
	(
		ColumnName nVARCHAR(4000),
		DestinatonColumn nVARCHAR(4000)
	)
	
	INSERT INTO  #ParamsList  Execute sp_Executesql     @sql, 
					@ParamDefinition, 
					@SchemaName, 
					@TableName, 
					@DestinationDB, 
					@SourceDB 
				
			
	IF NOT EXISTS(SELECT 1 FROM #ParamsList)
		BEGIN
				RAISERROR ('Table doesnt exist in metadata', 16, 1) WITH SETERROR
		END  

	SET @sqlforview = 'create view v'+@TableName +' as select  '
	
	SELECT @sqlforview = @sqlforview + ISNULL(DestinatonColumn,'' +  ' cast(null as nvarchar(1000)) as ' + ColumnName )+',' FROM #ParamsList

  	SET @sqlforview = LEFT(@sqlforview,LEN(@sqlforview) -1) + ' from ' + @SourceDB + '.dbo.' + @TableName
	SET @MoreParamDefinition = '@sqlforview nVARCHAR(max)'				
	SET @moredynamicsql = REPLACE('EXEC %%@SourceDB%%.dbo.sp_executesql @sqlforview','%%@SourceDB%%',@SourceDB)

    EXEC sp_executesql @moredynamicsql, @MoreParamDefinition, @sqlforview
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [DataQuality].[ObtainHarmoniseRules]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [DataQuality].[ObtainHarmoniseRules]
	@EntityType aS VARCHAR(50)
AS
BEGIN

SET NOCOUNT ON;

	DECLARE @EntityTypeID INT

	SELECT TOP 1 @EntityTypeID = EntityTypeID 
	FROM Control.EntityType 
	WHERE Name = @EntityType

	SELECT  HarmoniseRuleId CleanseRuleId,
			ColumnName ,
			CleanseType 
	FROM DataQuality.HarmoniseRule
	WHERE EntityTypeID = @EntityTypeID
			
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [DataQuality].[ObtainStandardiseRules]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [DataQuality].[ObtainStandardiseRules]
	@EntityType aS VARCHAR(50) = NULL
AS
BEGIN
	SET NOCOUNT ON;




	IF (@EntityType IS NOT NULL)
	BEGIN
		SELECT
			StandardiseRuleId
			,DataQualityRuleId
			,SR.ColumnName
			,SR.PatternMatchType
			,SR.Criteria 
			,SR.StandardiseType
			,SR.StandardiseTypeValue
		FROM DataQuality.StandardiseRule SR 
		INNER JOIN Control.EntityType ET 
			ON SR.EntityTypeID = ET.EntityTypeId
		WHERE ET.Name = @EntityType 
	END
	ELSE 
	BEGIN 
		SELECT
			StandardiseRuleId
			,DataQualityRuleId
			,SR.ColumnName
			,SR.PatternMatchType
			,SR.Criteria 
			,SR.StandardiseType
			,SR.StandardiseTypeValue
		FROM DataQuality.StandardiseRule SR
	END
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [DataQuality].[GetFeedTableColumnDetails]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [DataQuality].[GetFeedTableColumnDetails]

AS
BEGIN
  -- Turn off the count 
  SET NOCOUNT ON
 
    SELECT  ET.Name TableDisplayName,(ET.[Schema]+'.'+ET.[Table]) TableName,ColumnObjectId as ColumnID,DB.ColumnName,DB.ColumnDataType,DB.IsNullable,
	CASE WHEN DB.ColumnDataType NOT LIKE '%varchar%' AND DB.ColumnDataType NOT LIKE '%char%' AND DB.ColumnDataType NOT LIKE '%uniqueidentifier%' THEN Precision 
	ELSE DB.ColumnLength END AS ColumnLength
	FROM control.EntityType ET
	INNER JOIN Metadata.vDatabaseStructure DB
	ON DB.TableName=ET.[Table]	AND DB.SchemaName=ET.[Schema]
	WHERE DB.DatabaseName='Scrub' AND TableName not like 'prescrub%'	
	ORDER BY TableDisplayName,DB.ColumnName asc
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [DataQuality].[GetFeedTableDetails]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [DataQuality].[GetFeedTableDetails]
AS

-- =================================================================================================
-- Author:		Adatis
-- Create date: 30-01-2014
-- Description:	Stored Procedure to get feed table column details by table id.
-- ==================================================================================================

BEGIN
  -- Turn off the count 
  SET NOCOUNT ON
 
	 SELECT DISTINCT TableObjectId as TableID , SchemaName +'.'+ TableName AS TableName
	 FROM Metadata.vDatabaseStructure where DatabaseName='Scrub' AND TableName not like 'prescrub%'
	 ORDER BY TableName ASC

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [DataQuality].[ObtainScreens]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [DataQuality].[ObtainScreens]

@ObjectId varchar(50)

AS

-- =============================================
-- Author:		Jeremy Kashel
-- Create date: 08/10/2012
-- Description:	Returns all the screens that must be run for a given package id
-- =============================================


SELECT		ScreenID,
			COALESCE(ScreenSQL,'') AS ScreenSQL,
			COALESCE(ScreenReferenceSQL,'') AS ScreenReferenceSQL
FROM		[DataQuality].[Screen]
--WHERE		ObjectId = Convert(uniqueidentifier, @PackageId)
WHERE		Cast(ObjectId As Varchar(50)) = @ObjectId
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [OLAPControl].[ObtainMGPartitionsToProcess]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
-- =============================================
-- Author:		Adatis Consulting
-- Create date: 2013/05/13
-- =============================================
CREATE PROCEDURE [OLAPControl].[ObtainMGPartitionsToProcess]
		@ProcessType				SMALLINT = NULL,
		@MeasureGroupName			VARCHAR(128),
		@CubeName					VARCHAR(128),
		@PartitionKeyColName		VARCHAR(128)
AS

SET NOCOUNT ON
	
	SELECT		PartitionID
				,' FROM ' + PD.PartitionDefinitionName 
					+ ' WHERE ' + @PartitionKeyColName + ' BETWEEN ' 
					+ CAST(FromDateId AS VARCHAR) 
					+ ' AND ' + CAST(ToDateId AS VARCHAR)					AS PartitionRange,
				PD.PartitionPrefix,
				--Set the MDX slice if the metadata has been defined
				CASE 
					WHEN	MGP.PartitionSliceDimension IS NOT NULL AND 
							MGP.PartitionSliceAttribute IS NOT NULL AND
							MGP.PartitionSliceKey IS NOT NULL THEN
							'[' + MGP.PartitionSliceDimension + '].[' + MGP.PartitionSliceAttribute + '].&[' +
							CAST(MGP.PartitionSliceKey AS VARCHAR(10)) + ']'
					ELSE
						NULL
				END AS PartitionSlice
	FROM		OLAPControl.MeasureGroupPartition									MGP
		INNER JOIN	OLAPControl.MeasureGroup										MG
		ON			MGP.MeasureGroupId = MG.MeasureGroupId
		INNER JOIN	OLAPControl.[Cube]												CU
		ON			CU.CubeId =	MG.CubeId
		INNER JOIN	OLAPControl.PartitionDefinition									PD
		ON			MGP.PartitionDefinitionId = PD.PartitionDefinitionId
	WHERE	Dirty = 1 -- We only want to Process Dirty PArtitions, The Old Code Processesd Everthing if a Full Process Was Requested, however for Tubular this is not required. 
				--CASE 
				--	WHEN COALESCE(@ProcessType, 0) = 0
				--	THEN Dirty
				--	ELSE Active
				--END = 1	
	AND			MG.MeasureGroupName	= @MeasureGroupName
	AND			CU.CubeName	= @CubeName

	ORDER BY FromDateId
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [OLAPControl].[ObtainMGDimensionsToProcess]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
-- =============================================
-- Author:		Adatis Consulting
-- Create date: 2013/05/15
-- This can return the dimensions for a given measure group.
-- If @ProcessAll is set to 1 then all dimensions in the dbo.Dimension table will be returned
-- =============================================
CREATE PROCEDURE [OLAPControl].[ObtainMGDimensionsToProcess]
		@MeasureGroupName	VARCHAR(128),
		@CubeName		VARCHAR(128),
		@ProcessAll		BIT
AS

SET NOCOUNT ON
	
SELECT			DISTINCT D.DimensionName
FROM			OLAPControl.MeasureGroupDimension MGD
INNER JOIN		OLAPControl.MeasureGroup MG ON MGD.MeasureGroupId = MG.MeasureGroupId
INNER JOIN		OLAPControl.Dimension D ON MGD.DimensionId = D.DimensionId
INNER JOIN		OLAPControl.[Cube] CU ON MG.CubeId = CU.CubeId
WHERE			(MG.MeasureGroupName = @MeasureGroupName AND CU.CubeName = @CubeName)
OR				@ProcessAll = 1
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [OLAPControl].[ResetDirtyPartitions]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
-- =============================================
-- Author:		Adatis Consulting
-- Create date: 2013/05/15
-- =============================================
CREATE PROCEDURE [OLAPControl].[ResetDirtyPartitions]
		@MeasureGroupName	VARCHAR(128),
		@CubeName			VARCHAR(128)
AS

SET NOCOUNT ON
	
	UPDATE		MGP
	SET			Dirty = 0 
	FROM		[OLAPControl].[MeasureGroupPartition]				MGP
		INNER JOIN	[OLAPControl].[MeasureGroup]					MG
		ON			MGP.MeasureGroupId = MG.MeasureGroupId	
		INNER JOIN	[OLAPControl].[Cube]							C
		ON			MG.CubeId = C.CubeId
	WHERE		MG.MeasureGroupName	= @MeasureGroupName
	AND			C.CubeName = @CubeName
	AND			Dirty = 1
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [OLAPControl].[SetCubeProcessStatus]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROC [OLAPControl].[SetCubeProcessStatus]

AS

	UPDATE OLAPControl.Cube
	SET RequiresProcess = 1
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Secure].[GetBlobConnectionKey]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO

CREATE PROCEDURE [Secure].[GetBlobConnectionKey]
	@pAzureBlobConnectionKey NVARCHAR(255) OUT
AS
BEGIN
/*
 *	Gets the last inserted connections string for BLOB storage
 */
	SET NOCOUNT ON;

	SET	@pAzureBlobConnectionKey = (SELECT TOP 1 [Value] 
									FROM [Secure].[Configurations]
									ORDER BY ConfigurationId DESC);
   
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Secure].[SetBlobConfiguration]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [Secure].[SetBlobConfiguration]
    @pName            VARCHAR (100),
    @pDescription     VARCHAR (250),
    @pValue           VARCHAR (250)
AS
BEGIN
/*
 *	Inserts configuration for accessing BLOB storage
 */
	INSERT INTO [Secure].[Configurations]
		([Name], [Description], [Value], [CreatedAt])
	VALUES
	    (@pName, @pDescription, @pValue, SYSDATETIME());
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Secure].[GetBlobConnectionString]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO

CREATE PROCEDURE [Secure].[GetBlobConnectionString]
AS
BEGIN
/*
 *	Gets the last inserted connections string for BLOB storage
 */
	SET NOCOUNT ON;

	SELECT TOP 1 [Value] 
	FROM [Secure].[Configurations]
	ORDER BY ConfigurationId DESC;
   
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Test].[InsertValidationTestExecution]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [Test].[InsertValidationTestExecution]
(
	@LoadID INT,
	@ValidationTestId SMALLINT,
	@TestStatus VARCHAR(4),
	@SourceResult VARCHAR(30),
	@TargetResult VARCHAR(30)
)
	
AS


INSERT INTO Test.ValidationTestExecution (LoadId, ValidationTestId, TestStatus, SourceResult, TargetResult, ExecutionTime, CreatedBy)
VALUES (@LoadID, @ValidationTestId, @TestStatus, @SourceResult, @TargetResult, GETDATE(), suser_sname())
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Test].[ObtainValidationTests]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [Test].[ObtainValidationTests]

@PackageName VARCHAR(200)

AS

-- ==========================================================================================
-- Author:		Adatis
-- Create date: 03/07/2014
-- Description:	Returns all the validation tests that must be run for a given package
-- ==========================================================================================

SELECT			ValidationTestId,
				--Casting these as SSIS is fussy with tiny ints
				CAST(ValidationTypeId AS SMALLINT) AS ValidationTypeId,
				CAST(ValidationSourceId AS SMALLINT) AS ValidationSourceId,
				SourceObject,
				TargetObject,
				WarningPercent,
				EnableWarning,
				HaltPercent,
				EnableHalt
FROM			Test.ValidationTest V
WHERE			LOWER(PackageName) = LOWER(@PackageName)
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
SET IDENTITY_INSERT [Control].[EntityType] ON;
GO
MERGE INTO [Control].[EntityType] AS Tgt
USING 
	(VALUES	
		(1, -1, 1, 1, 0, N'Address', N'dxaddress', N'Address Table', N'DATAXCHANGE', N'DX_ADDRESS', N'Simon.Whiteley@prsformusic.com',SYSDATETIME()),
		(2, -1, 1, 1, 0, N'Country', N'dxcountry', N'DX Country Table', N'DATAXCHANGE', N'DX_COUNTRY', N'Simon.Whiteley@prsformusic.com',SYSDATETIME()),
		(3, -1, 1, 1, 1, N'StatementWorkDetail', N'dxstmtwkdt', N'DX Statement Work Details', N'DATAXCHANGE', N'DX_STMT_WKDT', N'Simon.Whiteley@prsformusic.com',SYSDATETIME()),
		(4, -1, 1, 1, 0, N'Society', N'dxsociety', N'DX Society Table', N'DATAXCHANGE', N'DX_SOCIETY', N'Simon.Whiteley@prsformusic.com',SYSDATETIME()),
		(6, NULL, 1, 0, 0, N'DimSociety', N'dimSociety', N'Online Statements Dim Society', N'Warehouse', N'DimSociety', N'Simon.Whiteley@prsformusic.com',SYSDATETIME()),
		(7, NULL, 1, 0, 0, N'DimMember', N'dimMember', N'Online Statements Dim Member', N'Warehouse', N'DimMember', N'Simon.Whiteley@prsformusic.com',SYSDATETIME()),
		(8, NULL, 1, 0, 0, N'DimDistribution', N'dimDistribution', N'Online Statements Dim Distribution', N'Warehouse', N'DimDistribution', N'Simon.Whiteley@prsformusic.com',SYSDATETIME()),
		(11,NULL, 1, 0, 0, N'FactDistributedRoyalty', N'DistRoyalty', N'Fact Distributed Royalty', N'Warehouse', N'FactDistributedRoyalty', N'Simon.Whiteley@prsformusic.com',SYSDATETIME()),
		(16, -1, 1, 1, 0, N'AffiliateStatement', N'dxastmt', N'Affilate Statement table', N'DATAXCHANGE', N'DX_A_STMT', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(17, -1, 1, 1, 0, N'AffiliateStatementEDetail', N'dxastmtedet', N'Affiliate Statement E Detail table', N'DATAXCHANGE', N'DX_A_STMT_EDET', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(18, -1, 1, 1, 0, N'AffiliateStatementFDetail', N'dxastmtfdet', N'Affiliate Statement F Detail table', N'DATAXCHANGE', N'DX_A_STMT_FDET', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(19, -1, 1, 1, 0, N'BroadcastRegion', N'dxbroadcastregion', N'DX broadcast region table', N'DATAXCHANGE', N'DX_BROADCAST_REGION', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(21, -1, 1, 1, 0, N'CAE', N'dxcae', N'Dx cae table', N'DATAXCHANGE', N'DX_CAE', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(22, -1, 1, 1, 0, N'Currency', N'dxcurrency', N'DX Currency table', N'DATAXCHANGE', N'DX_CURRENCY', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(23, -1, 1, 1, 0, N'Distribution', N'dxdistribution', N'DX Distribution table', N'DATAXCHANGE', N'DX_DISTRIBUTION', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(26, -1, 1, 1, 0, N'DistributionLoadControl', N'dxdistributionloadcontrol', N'DX Distribution Load Control table', N'DATAXCHANGE', N'DX_DISTRIBUTION_LOAD_CONTROL', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(27, -1, 1, 1, 0, N'EEAStatementDetails', N'dxeeastmtdet', N'DX EEA Statement Details Table', N'DATAXCHANGE', N'DX_EEA_STMT_DET', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(28, -1, 1, 1, 0, N'EEAStatementSummary', N'dxeeastmtsumm', N'DX EEA Statement Summary table', N'DATAXCHANGE', N'DX_EEA_STMT_SUMM', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(29, -1, 1, 1, 0, N'ElectronicStatement', N'dxestmt', N'DX ElectronicStatement table', N'DATAXCHANGE', N'DX_E_STMT', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(30, -1, 1, 1, 0, N'ElectronicStatementGeneralAdjustment', N'dxestmtgnad', N'DX Electronic statement general adjustment table', N'DATAXCHANGE', N'DX_E_STMT_GNAD', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(31, -1, 1, 1, 0, N'ElectronicStatementPaymentDetail', N'dxestmtpymtdet', N'DX Elecronic Statement Payment Details table', N'DATAXCHANGE', N'DX_E_STMT_PYMT_DET', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(32, -1, 1, 1, 0, N'Invoices', N'dxinvoices', N'DX Invoices table', N'DATAXCHANGE', N'DX_INVOICES', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(33, -1, 1, 1, 0, N'Licensees', N'dxlicensees', N'DX Licensees table', N'DATAXCHANGE', N'DX_LICENSEES', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(34, -1, 1, 1, 0, N'LicensingBodies', N'dxlicensingbodies', N'DX Licensing Bodies table', N'DATAXCHANGE', N'DX_LICENSING_BODIES', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(35, -1, 1, 1, 0, N'MajorMember', N'dxmajormember', N'DX Major member table', N'DATAXCHANGE', N'DX_MAJOR_MEMBER', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(36, -1, 1, 1, 0, N'Membership', N'dxmembership', N'DX Membership tables', N'DATAXCHANGE', N'DX_MEMBERSHIP', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(37, -1, 1, 1, 0, N'MembershipType', N'dxmembershiptype', N'DX Membership Type table', N'DATAXCHANGE', N'DX_MEMBERSHIP_TYPE', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(40, -1, 1, 1, 0, N'MemberSourceSocieties', N'dxmembersourcesocieties', N'DX Member Source Societies table', N'DATAXCHANGE', N'DX_MEMBER_SOURCE_SOCIETIES', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(41, -1, 1, 1, 0, N'MemberStatements', N'dxmemberstatements', N'DX Member Statements table', N'DATAXCHANGE', N'DX_MEMBER_STATEMENTS', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(42, -1, 1, 1, 0, N'StatementInstructionLicensingBodies', N'dxmvstmtinstrlibos', N'DX Statement Instruction Licensing Bodies table', N'DATAXCHANGE', N'DX_MV_STMT_INSTR_LIBOS', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(43, -1, 1, 1, 0, N'ProductTypes', N'dxproducttypes', N'DX Product Types table', N'DATAXCHANGE', N'DX_PRODUCT_TYPES', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(44, -1, 1, 1, 0, N'PaymentInstruction', N'dxpymtinstruction', N'DX PaymentInstruction table', N'DATAXCHANGE', N'DX_PYMT_INSTRUCTION', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(45, -1, 1, 1, 0, N'PaperStatement', N'dxpstmt', N'DX Paper Statement table', N'DATAXCHANGE', N'DX_P_STMT', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(46, -1, 1, 1, 0, N'PaperStatementAccountDetails', N'dxpstmtaccdet', N'DX Paper Statement Account Details table', N'DATAXCHANGE', N'DX_P_STMT_ACC_DET', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(47, -1, 1, 1, 0, N'PaperStatementCommissionInvoice', N'dxpstmtcomminvoice', N'DX Paper Statement Commission Invoice table', N'DATAXCHANGE', N'DX_P_STMT_COMM_INVOICE', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(48, -1, 1, 1, 0, N'PaperStatementGeneralAdjustmentLines', N'dxpstmtgad', N'DX Paper Statement General Adjustment Lines table', N'DATAXCHANGE', N'DX_P_STMT_GAD', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(49, -1, 1, 1, 0, N'PaperStatementNOPEarningLines', N'dxpstmtnopearndet', N'DX Paper Statement NOP Earning Lines table', N'DATAXCHANGE', N'DX_P_STMT_NOP_EARN_DET', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(50, -1, 1, 1, 0, N'PaperStatementNOPPaymentLines', N'dxpstmtnoppymtdet', N'DX Paper Statement NOP Payment Lines table', N'DATAXCHANGE', N'DX_P_STMT_NOP_PYMT_DET', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(55, -1, 1, 1, 0, N'PaperStatementTopFiveEarners', N'dxpstmttopfiveearners', N'DX Paper Statement Top Five Eaners table', N'DATAXCHANGE', N'DX_P_STMT_TOP_FIVE_EARNERS', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(56, -1, 1, 1, 0, N'PaperStatementVATLines', N'dxpstmtvtdt', N'DX Paper Stateent VAT Lines table', N'DATAXCHANGE', N'DX_P_STMT_VTDT', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(57, -1, 1, 1, 0, N'RollupMember', N'dxrollupmember', N'DX Rollup Member table', N'DATAXCHANGE', N'DX_ROLLUP_MEMBER', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(58, -1, 1, 1, 0, N'ScottishPostCodes', N'dxscottishpostcodes', N'DX Scottish PostCodes table', N'DATAXCHANGE', N'DX_SCOTTISH_POST_CODES', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(59, -1, 1, 1, 0, N'ServiceTypes', N'dxservicetypes', N'DX Service Types table', N'DATAXCHANGE', N'DX_SERVICE_TYPES', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(60, -1, 1, 1, 0, N'SocietyUsageLink', N'dxsocietyusagelink', N'DX Society Usage Link table', N'DATAXCHANGE', N'DX_SOCIETY_USAGE_LINK', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(63, -1, 1, 1, 0, N'StatementInstruction', N'dxstatementinstruction', N'DX Statement Instruction table', N'DATAXCHANGE', N'DX_STATEMENT_INSTRUCTION', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(64, -1, 1, 1, 0, N'StatementRun', N'dxstatementrun', N'DX Statement Run table', N'DATAXCHANGE', N'DX_STATEMENT_RUN', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(65, -1, 1, 1, 0, N'StandardTaxRate', N'dxstdtaxrate', N'DX Standard Tax Rate table', N'DATAXCHANGE', N'DX_STD_TAX_RATE', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(66, -1, 1, 1, 0, N'StatementInstructionSocieties', N'dxstinsocieties', N'DX Statement Instruction Societies table', N'DATAXCHANGE', N'DX_STIN_SOCIETIES', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(67, -1, 1, 1, 0, N'StatementAddition', N'dxstmtaddt', N'DX Statement addition table', N'DATAXCHANGE', N'DX_STMT_ADDT', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(68, -1, 1, 1, 0, N'StatementDetails', N'dxstmtdetail', N'DX Statement Detail table', N'DATAXCHANGE', N'DX_STMT_DETAIL', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(69, -1, 1, 1, 0, N'StatementDummyAddress', N'dxstmtdummyaddress', N'DX Statement Dummy Address table', N'DATAXCHANGE', N'DX_STMT_DUMMY_ADDRESS', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(70, -1, 1, 1, 0, N'Territory', N'dxterritorytis', N'DX Territory table', N'DATAXCHANGE', N'DX_TERRITORY_TIS', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(71, -1, 1, 1, 0, N'UsageCategories', N'dxusagecategories', N'DX Usage Categories table', N'DATAXCHANGE', N'DX_USAGE_CATEGORIES', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(72, -1, 1, 1, 0, N'UsageGroup', N'dxusagegroup', N'DX Usage Group table', N'DATAXCHANGE', N'DX_USAGE_GROUP', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(73, -1, 1, 1, 0, N'UsageGroupSummary', N'dxusagegroupsumm', N'DX Usage Group Summary table', N'DATAXCHANGE', N'DX_USAGE_GROUP_SUMM', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(74, -1, 1, 1, 0, N'UsageGroupType', N'dxusagegrouptype', N'DX Usage Group Type table', N'DATAXCHANGE', N'DX_USAGE_GROUP_TYPE', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(75, -1, 1, 1, 0, N'WithheldSocietyTax', N'dxwithheldsocietytax', N'DX Withheld society tax table', N'DATAXCHANGE', N'DX_WITHHELD_SOCIETY_TAX', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(76, -1, 1, 1, 0, N'PaperStatementAccountShare', N'dxpstmtaccshare', N'DX Paper Statement Account Share table', N'DATAXCHANGE', N'DX_P_STMT_ACC_SHARE', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(77, NULL, 1, 0, 0, N'AdjustmentLine', N'AdjustmentLine', N'Online Statements Adjustment Line', N'Warehouse', N'AdjustmentLine', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(78, NULL, 1, 0, 0, N'CommissionInvoice', N'CommissionInvoice', N'OnlineStatements Commission Invoice', N'Warehouse', N'CommissionInvoice', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(84, NULL, 1, 0, 0, N'CommissionInvoiceLine', N'CommInvoiceLine', N'Online Statements Comm Invoice Line', N'Warehouse', N'CommissionInvoiceLine', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(85, NULL, 1, 0, 0, N'DimAdjustmentReason', N'dimAdjustmentReason', N'Online Statements Adjustment Reason', N'Warehouse', N'DimAdjustmentReason', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(86, NULL, 1, 0, 0, N'DimBroadcaster', N'dimBroadcaster', N'Online Statements Dim Broadcaster', N'Warehouse', N'DimBroadcaster', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(87, NULL, 1, 0, 0, N'DimCountry', N'dimCountry', N'Online Statements Dim Country', N'Warehouse', N'DimCountry', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(90, NULL, 1, 0, 0, N'DimDate', N'dimDate', N'Online Statements Dim Date', N'Warehouse', N'DimDate', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(92, NULL, 1, 0, 0, N'DimInterestedParty', N'dimInterestedParty', N'Online Statements Dim Interested Party', N'Warehouse', N'DimInterestedParty', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(93, NULL, 1, 0, 0, N'DimInvoice', N'dimInvoice', N'Online Statements Dim Invoice', N'Warehouse', N'DimInvoice', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(94, NULL, 1, 0, 0, N'DimLicensingBody', N'dimLicensingBody', N'Online Statements Dim Licensing Body', N'Warehouse', N'DimLicensingBody', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(96, NULL, 1, 0, 0, N'DimProduct', N'dimProduct', N'Online Statements Dim Product', N'Warehouse', N'DimProduct', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(97, NULL, 1, 0, 0, N'DimRecording', N'dimRecording', N'Online Statements Dim Recording', N'Warehouse', N'DimRecording', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(98, NULL, 1, 0, 0, N'DimRoleType', N'dimRoleType', N'Online Statements Dim Role Type', N'Warehouse', N'DimRoleType', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(105, NULL, 1, 0, 0, N'DimRoyaltyClassification', N'dimRoyaltyClass', N'Dim Royalty Classification', N'Warehouse', N'DimRoyaltyClassification', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(106, NULL, 1, 0, 0, N'DimUsageClassification', N'dimUsageClass', N'Dim Usage Classification', N'Warehouse', N'DimUsageClassification', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(107, NULL, 1, 0, 0, N'DimUsageGroup', N'dimUsageGroup', N'Online Statements Dim Usage Group', N'Warehouse', N'DimUsageGroup', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(108, NULL, 1, 0, 0, N'DimWork', N'dimWork', N'Online Stateents Dim Work', N'Warehouse', N'DimWork', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(110, NULL, 1, 0, 0, N'GeneralRoyaltyLine', N'GeneralRoyaltyLine', N'General Loyalty Line', N'Warehouse', N'GeneralRoyaltyLine', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(112, NULL, 1, 0, 0, N'NopEarningLine', N'NopEarningLine', N'Nop Earning Line', N'Warehouse', N'NopEarningLine', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(113, NULL, 1, 0, 0, N'NopNoteText', N'NopNoteText', N'Nop Note Text ', N'Warehouse', N'NopNoteText', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(114, NULL, 1, 0, 0, N'NopPaymentLine', N'NopPaymentLine', N'Nop Payment Line', N'Warehouse', N'NopPaymentLine', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(115, NULL, 1, 0, 0, N'NoteText', N'NoteText', N'Note Text', N'Warehouse', N'NoteText', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(116, NULL, 1, 0, 0, N'OnlineStatement', N'OnlineStatement', N'Online Statement', N'Warehouse', N'OnlineStatement', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(117, NULL, 1, 0, 0, N'SourceStatement', N'SourceStatement', N'Source Statement', N'Warehouse', N'SourceStatement', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(119, NULL, 1, 0, 0, N'StatementLicensingBody', N'StatemtLicensingBody', N'Statement Licensing Body', N'Warehouse', N'StatementLicensingBody', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(120, NULL, 1, 0, 0, N'ThirdPartyStatementGroup', N'ThrdPrtyStmtGroup', N'Third Party Statement Group', N'Warehouse', N'ThirdPartyStatementGroup', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(126, NULL, 1, 0, 0, N'ThirdPartyStatementGroupOnlineStatement', N'ThrdPrtyStmtGrpOlSt', N'Third Party Statement Group Online Statement', N'Warehouse', N'ThirdPartyStatementGroupOnlineStatement', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(127, NULL, 1, 0, 0, N'UsageGroupRoyaltyLine', N'UsageGrpRoyLine', N'Usage Group Royalty Line', N'Warehouse', N'UsgaeGroupRoyaltyLine', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(128, NULL, 1, 0, 0, N'VATInvoice', N'VATInvoice', N'VATInvoice', N'Warehouse', N'VATInvoice', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(129, NULL, 1, 0, 0, N'VATInvoiceLine', N'VATInvoiceLine', N'VATInvoiceLine', N'Warehouse', N'VATInvoiceLine', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(130, NULL, 1, 0, 0, N'DimWorkAttributes', N'dimWorkAttributes', N'Online Statements Dim Work Attributes', N'Warehouse', N'DimWorkAttributes', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(131, NULL, 1, 0, 0, N'TempDistributedRoyalty', N'TempDistributedRoyalty', N'Temp Distributed Royalty', N'Transform', N'TempDistributedRoyalty', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(132, NULL, 1, 0, 0, N'TempDistributedRoyaltyWkdt', N'TempDistributedRoyaltyWkdt', N'Temp Distributed Royalty Wkdt', N'Transform', N'TempDistributedRoyaltyWkdt', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(133, NULL, 1, 0, 0, N'TempDistributedRoyaltyAddt', N'TempDistributedRoyaltyAddt', N'Temp Distributed Royalty Addt', N'Transform', N'TempDistributedRoyaltyAddt', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(134, NULL, 1, 0, 0, N'TempStatement', N'TempStatement', N'Temp Statement', N'Transform', N'TempStatement', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(135, NULL, 1, 0, 0, N'TempStatementShare', N'TempStatementShare', N'Temp Statement Share', N'Transform ', N'TempStatementShare', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(137, NULL, 1, 1, 0, N'ReportsText', N'reportstext', N'Reports Text', N'DATAXCHANGE', N'REPORTS_TEXT', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(138, NULL, 1, 1, 0, N'ReportTypes', N'reporttypes', N'Report Types', N'DATAXCHANGE', N'REPORT_TYPES', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(139, NULL, 1, 1, 0, N'StatementInstrumentLiboList', N'dxstmtinstrlibolist', N'StatementInstrumentLicensingBodyList table', N'DATAXCHANGE', N'DX_STMT_INSTR_LIBO_LIST', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(140, NULL, 2, 0, 0, N'BroadcastDataQualityFormat5', N'brcdqformat5', N'Broadcast DataQuality Format5', N'BRCDataQuality', N'BRC_DQ_Format5', N'vandana.bangera@prsformusic.com',SYSDATETIME()),
		(143, NULL, 2, 0, 0, N'BroadcastDataQualityFormat50', N'brcdqformat50', N'Broadcast DataQuality Format50', N'BRCDataQuality', N'BRC_DQ_Format50', N'vandana.bangera@prsformusic.com',SYSDATETIME()),
		(144, NULL, 2, 0, 0, N'BroadcastDataQualityFormat52', N'brcdqformat52', N'Broadcast DataQuality Format52', N'BRCDataQuality', N'BRC_DQ_Format52', N'vandana.bangera@prsformusic.com',SYSDATETIME()),
		(146, NULL, 2, 0, 0, N'BroadcastDataQualityFormat303', N'brcdqformat303', N'Broadcast DataQuality Format303', N'BRCDataQuality', N'BRC_DQ_Format303', N'vandana.bangera@prsformusic.com',SYSDATETIME()),
		(147, NULL, 2, 0, 0, N'BroadcastDataQualityFormat51', N'brcdqformat51', N'Broadcast DataQuality Format51', N'BRCDataQuality', N'BRC_DQ_Format51', N'vandana.bangera@prsformusic.com',SYSDATETIME()),
		(148, NULL, 2, 0, 0, N'BroadcastDataQualityFormat51a', N'brcdqformat51a', N'Broadcast DataQuality Format51a', N'BRCDataQuality', N'BRC_DQ_Format51a', N'vandana.bangera@prsformusic.com',SYSDATETIME()),
		(149, NULL, 2, 0, 0, N'BroadcastDataQualityFormatS1', N'brcdqformats1', N'Broadcast DataQuality FormatS1', N'BRCDataQuality', N'BRC_DQ_FormatS1', N'vandana.bangera@prsformusic.com',SYSDATETIME()),
		(150, NULL, 2, 0, 0, N'BroadcastDataQualityFormatS2', N'brcdqformats2', N'Broadcast DataQuality FormatS2', N'BRCDataQuality', N'BRC_DQ_FormatS2', N'vandana.bangera@prsformusic.com',SYSDATETIME()),
		(151, NULL, 1, 0, 0, N'TempFactDistributedRoyalty', N'TempFactDistributedRoyalty', N'Temp Fact Distributed Royalty', N'Transform', N'TempFactDistributedRoyalty', N'Chris.Ellis@prsformusic.com',SYSDATETIME()),
		(153, NULL, 1, 1, 0, N'StatementMembershipLiboList', N'dxstmtmbrlibolist', N'StatementMembershipLicensingBodyList table', N'DATAXCHANGE', N'DX_STMT_MBR_LIBO_LIST', N'Jonathan.Myers@prsformusic.com',SYSDATETIME()),
		(154, NULL, 1, 0, 0, N'TempPayeeStatement', N'TempPayeeStatement', N'Temp Payee Statement table', N'Transform', N'TempPayeeStatement', N'vandana.bangera@prsformusic.com',SYSDATETIME()),
		(155, NULL, 1, 0, 0, N'TempMbrStatement', N'TempMbrStatement', N'Temp Mbr Statement table', N'Transform', N'TempMbrStatement', N'vandana.bangera@prsformusic.com',SYSDATETIME()),		
		(157, NULL, 3, 1, 0, N'DimFile', N'prbidimfile', N'Oracle Dim_File table', N'PRBI_DW', N'DIM_FILE', N'emma.stewart@prsformusic.com',SYSDATETIME()),
		(158, NULL, 3, 1, 0, N'DimThirdPartyTree', N'prbidimthirdpartytree', N'Oracle Dim_ThirdPartyTree table', N'PRBI_DW', N'DIM_THIRD_PARTY_TREE', N'emma.stewart@prsformusic.com',SYSDATETIME()),
		(159, NULL, 3, 0, 0, N'DimDate', N'prbidimdate', N'Oracle Dim_Date table', N'PRBI_DW', N'DIM_DATE', N'emma.stewart@prsformusic.com',SYSDATETIME()),
		(160, NULL, 3, 1, 0, N'DimProduction', N'prbidimproduction', N'Oracle Dim_Production table', N'PRBI_DW', N'DIM_PRODUCTION', N'emma.stewart@prsformusic.com',SYSDATETIME()),
		(163, NULL, 3, 1, 0, N'DimBroadcaster', N'prbidimbroadcaster', N'Oracle Dim_Broadcaster table', N'PRBI_DW', N'DIM_BROADCASTER', N'emma.stewart@prsformusic.com',SYSDATETIME()),
		(164, NULL, 3, 1, 0, N'DimUsageOfWorkStatus', N'prbidimusageofworkstatus', N'Oracle Dim_Usage_Of_Work_Status table', N'PRBI_DW', N'DIM_USAGE_OF_WORK_STATUS', N'emma.stewart@prsformusic.com',SYSDATETIME()),
		(169, NULL, 3, 1, 0, N'DimRightType', N'prbidimrighttype', N'Oracle Dim_Right_Type table', N'PRBI_DW', N'DIM_RIGHT_TYPE', N'emma.stewart@prsformusic.com',SYSDATETIME()),
		(172, NULL, 3, 1, 0, N'DimWork', N'prbidimwork', N'Oracle Dim_Work table', N'PRBI_DW', N'DIM_WORK', N'emma.stewart@prsformusic.com',SYSDATETIME()),
		(173, NULL, 3, 1, 0, N'DimTransmissionStatus', N'prbidimtransmissionstatus', N'Oracle Dim_Transmission_Status table', N'PRBI_DW', N'DIM_TRANSMISSION_STATUS', N'emma.stewart@prsformusic.com',SYSDATETIME()),
		(174, NULL, 3, 1, 0, N'DimUsageDistributionCode', N'prbidimusagedistributioncode', N'Oracle Dim_Usage_Distribution_Code table', N'PRBI_DW', N'DIM_USAGE_DISTRIBUTION_CODE', N'emma.stewart@prsformusic.com',SYSDATETIME()),
	    (178, NULL, 3, 1, 0, N'DimMusicOrigin', N'prbidimmusicorigin', N'Oracle Dim_Music_Origin table', N'PRBI_DW', N'DIM_MUSIC_ORIGIN', N'emma.stewart@prsformusic.com',SYSDATETIME()),
		(177, NULL, 1, 0, 0, N'TempMbrStatementSociety', N'TempMbrStatementSociety', N'Temp Mbr Statement Society table', N'Transform', N'TempMbrStatementSociety', N'jonathan.myers@prsformusic.com',SYSDATETIME()),
		(200,-1, 4, 1, 0, N'CodaBalance', N'codabalance', N'CODA oas_balances', N'CodaStaging', N'Coda_Balance', N'tim.firmin@prsformusic.com',SYSDATETIME()),
		(201,-1, 4, 1, 0, N'CodaCompany', N'codacompany', N'CODA oas_company', N'CodaStaging', N'Coda_Company', N'tim.firmin@prsformusic.com',SYSDATETIME()),
		(202,-1, 4, 1, 0, N'CodaDocument', N'codadocument', N'CODA oas_document', N'CodaStaging', N'Coda_Document', N'tim.firmin@prsformusic.com',SYSDATETIME()),
		(203,-1, 4, 1, 0, N'CodaTransactions', N'codatransactions', N'CODA Transactions oas_head joined oas_list', N'CodaStaging', N'Coda_Transactions', N'tim.firmin@prsformusic.com',SYSDATETIME()),
		(204,-1, 4, 1, 0, N'CodaElement', N'codaelement', N'CODA oas_element', N'CodaStaging', N'Coda_Element', N'tim.firmin@prsformusic.com',SYSDATETIME()),
		(205,-1, 4, 1, 0, N'CodaGroupList', N'codagrouplist', N'CODA oas_grplist joined oas_group', N'CodaStaging', N'Coda_GroupList', N'tim.firmin@prsformusic.com',SYSDATETIME()),
		(206,-1, 4, 1, 0, N'CodaTM1Budgets', N'codatm1budgets', N'TM1 Budgets csv export', N'CodaStaging', N'Coda_TM1Budgets', N'tim.firmin@prsformusic.com',SYSDATETIME()),
		(207,-1, 4, 1, 0, N'CodaTM1Forecasts', N'codatm1forecasts', N'TM1 Forecasts csv export', N'CodaStaging', N'Coda_TM1Forecasts', N'tim.firmin@prsformusic.com',SYSDATETIME()),
		(208,-1, 4, 1, 0, N'CodaMDS_EL1', N'codamdsel1', N'CODA MDS 2016 EL1 export', N'CodaStaging', N'Coda_MDS_EL1', N'tim.firmin@prsformusic.com',SYSDATETIME()),
		(209,-1, 4, 1, 0, N'CodaMDS_EL2', N'codamdsel2', N'CODA MDS 2016 EL2 export', N'CodaStaging', N'Coda_MDS_EL2', N'tim.firmin@prsformusic.com',SYSDATETIME()),
		(210,-1, 4, 1, 0, N'CodaMDS_EL1EL2', N'codamdsel1el2', N'CODA MDS 2016 EL1 export', N'CodaStaging', N'Coda_MDS_EL1EL2', N'tim.firmin@prsformusic.com',SYSDATETIME()),
		(211,-1, 4, 1, 0, N'CodaUsrCapab', N'codausrcapab', N'CODA USer Capability Security Details', N'CodaStaging', N'Coda_UsrCapab', N'tim.firmin@prsformusic.com',SYSDATETIME()),
		(220,-1, 4, 0, 0, N'FactBalance', N'factcodabalance', N'CODA oas_balances', N'CodaWarehouse', N'Fact_Balance', N'tim.firmin@prsformusic.com',SYSDATETIME()),
		(221,-1, 4, 0, 0, N'DimCompany', N'dimcompany', N'CODA company dimension', N'CodaWarehouse', N'Dim_Company', N'tim.firmin@prsformusic.com',SYSDATETIME()),
		(222,-1, 4, 0, 0, N'DimDocument', N'dimdocument', N'CODA document dimension', N'CodaWarehouse', N'Dim_Document', N'tim.firmin@prsformusic.com',SYSDATETIME()),
		(223,-1, 4, 0, 0, N'FactTransactions', N'facttransactions', N'CODA Transactions', N'CodaWarehouse', N'Fact_Transactions', N'tim.firmin@prsformusic.com',SYSDATETIME()),
		(224,-1, 4, 0, 0, N'DimAccountsEL1', N'dimaccountsel1', N'CODA Coda EL1 Accounts Dimension', N'CodaWarehouse', N'Dim_Accounts_EL1', N'tim.firmin@prsformusic.com',SYSDATETIME()),
		(225,-1, 4, 0, 0, N'DimAccountsEL2', N'dimaccountsel2', N'CODA Coda EL2 Accounts Dimension', N'CodaWarehouse', N'Dim_Accounts_EL2', N'tim.firmin@prsformusic.com',SYSDATETIME()),
		(226,-1, 4, 0, 0, N'DimAccountsEL3', N'dimaccountsel3', N'CODA Coda EL3 Accounts Dimension', N'CodaWarehouse', N'Dim_Accounts_EL3', N'tim.firmin@prsformusic.com',SYSDATETIME()),
		(227,-1, 4, 0, 0, N'DimAccountsEL4', N'dimaccountsel4', N'CODA Coda EL4 Accounts Dimension', N'CodaWarehouse', N'Dim_Accounts_EL4', N'tim.firmin@prsformusic.com',SYSDATETIME()),
		(228,-1, 4, 0, 0, N'DimAccountsEL5', N'dimaccountsel5', N'CODA Coda EL5 Accounts Dimension', N'CodaWarehouse', N'Dim_Accounts_EL5', N'tim.firmin@prsformusic.com',SYSDATETIME()),
		(229,-1, 4, 0, 0, N'DimAccountsEL6', N'dimaccountsel6', N'CODA Coda EL6 Accounts Dimension', N'CodaWarehouse', N'Dim_Accounts_EL6', N'tim.firmin@prsformusic.com',SYSDATETIME()),
		(230,-1, 4, 0, 0, N'FactTM1Planning', N'codatm1planning', N'TM1 Budgets csv export', N'CodaWarehouse', N'Coda_TM1Planning', N'tim.firmin@prsformusic.com',SYSDATETIME()),
		(300, NULL, 3, 0, 0, N'DimBroadcaster', N'DimBroadcaster', N'Play to Pay DimBroadcaster table', N'PipelneWarehouse', N'DimBroadcaster', N'emma.stewart@prsformusic.com',SYSDATETIME()),
		(301, NULL, 3, 0, 0, N'DimFile', N'DimFile', N'Play to Pay DimFile table', N'PipelneWarehouse', N'DimFile', N'emma.stewart@prsformusic.com',SYSDATETIME()),
		(302, NULL, 3, 0, 0, N'DimMusicOrigin', N'DimMusicOrigin', N'Play to Pay DimMusicOrigin table', N'PipelneWarehouse', N'DimMusicOrigin', N'emma.stewart@prsformusic.com',SYSDATETIME()),
		(303, NULL, 3, 0, 0, N'DimProduction', N'DimProduction', N'Play to Pay DimProduction table', N'PipelneWarehouse', N'DimProduction', N'emma.stewart@prsformusic.com',SYSDATETIME()),
		(304, NULL, 3, 0, 0, N'DimThirdPartyTree', N'DimThirdPartyTree', N'Play to Pay DimThirdPartyTree table', N'PipelneWarehouse', N'DimThirdPartyTree', N'emma.stewart@prsformusic.com',SYSDATETIME()),
		(305, NULL, 3, 0, 0, N'DimTransmissionStatus', N'DimTransmissionStatus', N'Play to Pay DimTransmissionStatus table', N'PipelneWarehouse', N'DimTransmissionStatus', N'emma.stewart@prsformusic.com',SYSDATETIME()),
		(306, NULL, 3, 0, 0, N'DimUsageDistributionCode', N'DimUsageDistributionCode', N'Play to Pay DimUsageDistributionCode table', N'PipelneWarehouse', N'DimUsageDistributionCode', N'emma.stewart@prsformusic.com',SYSDATETIME()),
		(307, NULL, 3, 0, 0, N'DimUsageOfWorkStatus', N'DimUsageOfWorkStatus', N'Play to Pay DimUsageOfWorkStatus table', N'PipelneWarehouse', N'DimUsageOfWorkStatus', N'emma.stewart@prsformusic.com',SYSDATETIME()),
		(308, NULL, 3, 0, 0, N'DimWork', N'DimWork', N'Play to Pay DimWork table', N'PipelneWarehouse', N'DimWork', N'emma.stewart@prsformusic.com',SYSDATETIME()),
		(309, NULL, 3, 0, 0, N'FactUsageOfWork', N'FactUsageOfWork', N'Play to Pay FactUsageOfWork table', N'PipelneWarehouse', N'FactUsageOfWork', N'emma.stewart@prsformusic.com',SYSDATETIME()),
		(310, NULL, 3, 1, 0, N'DimTime', N'prbidimtime', N'Oracle Dim_Time table', N'PRBI_DW', N'DIM_TIME', N'emma.stewart@prsformusic.com',SYSDATETIME()),
		(311, NULL, 3, 0, 0, N'DimTime', N'DimTime', N'Play to Pay DimTime table', N'PipelneWarehouse', N'DimTime', N'emma.stewart@prsformusic.com',SYSDATETIME()),
		(312, NULL, 3, 1, 1, N'FactUsageOfWorkPl', N'prbifactusageofworkpl', N'Oracle Fact_Usage_Of_Work table', N'PRBI_DW', N'FACT_USAGE_OF_WORK_PL', N'emma.stewart@prsformusic.com',SYSDATETIME()),
		(313, NULL, 3, 1, 1, N'FactUsageOfWorkWl', N'prbifactusageofworkwl', N'Oracle Fact_Usage_Of_Work table', N'PRBI_DW', N'FACT_USAGE_OF_WORK_WL', N'emma.stewart@prsformusic.com',SYSDATETIME()),
		(314, NULL, 3, 0, 0, N'TempFactUsageOfWorkExisting', N'prbitempfactusageofworkexisting', N'Oracle Fact_Usage_Of_Work table', N'PipelineTransform', N'TempFactUsageOfWorkExisting', N'emma.stewart@prsformusic.com',SYSDATETIME()),
		(315, NULL, 3, 0, 0, N'TempFactUsageOfWorkNew', N'prbitempfactusageofworknew', N'Oracle Fact_Usage_Of_Work table', N'PipelineTransform', N'TempFactUsageOfWorkNew', N'emma.stewart@prsformusic.com',SYSDATETIME()),
		(316, NULL, 3, 0, 0, N'TempFactUsageOfWorkChanged', N'prbitempfactusageofworkchanged', N'Oracle Fact_Usage_Of_Work table', N'PipelineTransform', N'TempFactUsageOfWorkChanged', N'emma.stewart@prsformusic.com',SYSDATETIME())
	) AS Src
	(
		 EntityTypeId
		,ParentEntityTypeId
		,ApplicationId
		,IsSourceEntity
		,[HasMultipleSourceFile]
		,Name
		,Code
		,[Description]
		,[Schema]
		,[Table]
		,[CreatedBy]
        ,[CreatedDate]
	)
	ON Tgt.EntityTypeId = Src.EntityTypeId

-- Update matched rows
WHEN MATCHED THEN
	UPDATE
	SET
		[ApplicationId]			= Src.[ApplicationId],
		[IsSourceEntity]	    = Src.[IsSourceEntity],
		[HasMultipleSourceFile]	= Src.[HasMultipleSourceFile],
		[Name]					= Src.[Name],
		[Code]					= Src.[Code],
		[ParentEntityTypeId]	= Src.[ParentEntityTypeId],
		[Description]			= Src.[Description],
		[Schema]				= Src.[Schema],
		[Table]					= Src.[Table],
		[CreatedBy]				= Src.[CreatedBy],
        [CreatedDate]			= Src.[CreatedDate]

-- Insert new rows
WHEN NOT MATCHED BY TARGET THEN
	INSERT
		(
			[EntityTypeId],
			[ApplicationId],
			[IsSourceEntity],
			[HasMultipleSourceFile],
			[Name],				
			[Code],				
			[ParentEntityTypeId],
			[Description],		
			[Schema],			
			[Table],				
			[CreatedBy],			
			[CreatedDate]		
		)
	VALUES
		(
			Src.[EntityTypeId],
			Src.[ApplicationId],
			Src.[IsSourceEntity],
			Src.[HasMultipleSourceFile],
			Src.[Name],
			Src.[Code],
			src.[ParentEntityTypeId],
			src.[Description],
			src.[Schema],
			src.[Table],
			src.[CreatedBy],			
			src.[CreatedDate]
		)

--  Delete rows that are in the target but not the source
WHEN NOT MATCHED BY SOURCE THEN
	DELETE;
GO
SET IDENTITY_INSERT [Control].[EntityType] OFF;


SET IDENTITY_INSERT [Control].[LoadStatusType] ON;
GO
MERGE INTO [Control].[LoadStatusType] AS Tgt
USING 
	(VALUES
		(1,'In Progress','Load In Progress','InProgress','PostDeployment Script', SYSDATETIME()),
		(2,'Successful','Load Completed Successfully','Success','PostDeployment Script',SYSDATETIME()),
		(3,'Failed','Load Failed','Failed','PostDeployment Script',SYSDATETIME()),
		(4,'Reset','Load flagged for reset','Reset','PostDeployment Script',SYSDATETIME()),
		(5,'Already Run','Load Already Run','AlreadyRun','PostDeployment Script',SYSDATETIME())
	) AS Src
	(
		[LoadStatusTypeId],
		[Name],
		[Description],
		[ShortName],
		[UpdateUser],
		[UpdateTime]
	)
	ON Tgt.[LoadStatusTypeId] = Src.[LoadStatusTypeId]

-- Update matched rows
WHEN MATCHED THEN
	UPDATE
	SET
		[Name]			   = Src.[Name],
		[Description]	   = Src.[Description],
		[ShortName]		   = src.[ShortName],
		[UpdateUser]	   = Src.[UpdateUser],
		[UpdateTime]	   = Src.[UpdateTime]
-- Insert new rows
WHEN NOT MATCHED BY TARGET THEN
	INSERT
		(
			[LoadStatusTypeId],
			[Name],			
			[Description],	
			[ShortName],		
			[UpdateUser],		
			[UpdateTime]	
		)
	VALUES
		(
			Src.[LoadStatusTypeId],
			Src.[Name],			
			Src.[Description],	
			src.[ShortName],		
			src.[UpdateUser],		
			src.[UpdateTime]	
		)

--  Delete rows that are in the target but not the source
WHEN NOT MATCHED BY SOURCE THEN
	DELETE;
GO
SET IDENTITY_INSERT [Control].[LoadStatusType] OFF;


SET IDENTITY_INSERT [Control].[ProcessStream] ON;
GO
MERGE INTO [Control].[ProcessStream] AS Tgt
USING 
	(VALUES
		(1,'EXT2STG',	'Blob External To Stage', ''	,1),
		(2,'STG2CLN',	'Stage To Clean', '' ,3),
		(3,'CLN2TRN',	'Clean To Transform','',4),
		(4,'TRN2WAR',	'Transform To Warehouse','',6),
		(5,'REF2TRN',	'Reference To Transform','',7),
		(6,'CLN2WAR',	'Clean To Warehouse','',8),
		(7,'TRN2TRN',	'Transform To Transform','',9),
		(8,'TRN2REJ',	'Transform To Reject','',10),
		(9,'SRC2FILE',	'Source To File Extract','',11),
		(10,'STG2TRN',	'Stage to Transform','',4),
		(11,'FILE2EXT',	'File Extract To Blob External','',0),
		(12,'SRC2STG',	'Source System to Staging','',2)
	) AS Src
	(	
		[ProcessStreamId],
		[Code],
		[Name],
		[Description],
		[ProcessStreamOrder]
	)
	ON Tgt.[ProcessStreamId] = Src.[ProcessStreamId]

-- Update matched rows
WHEN MATCHED THEN
	UPDATE
	SET
		 [Code]					= Src.[Code]
		,[Name]					= src.[Name]
		,[Description]			= src.[Description]
		,[ProcessStreamOrder]	= src.[ProcessStreamOrder]

-- Insert new rows
WHEN NOT MATCHED BY TARGET THEN
	INSERT
		(
			[ProcessStreamId],
			[Code],
			[Name],
			[Description],
			[ProcessStreamOrder]
		)
	VALUES
		(
			Src.[ProcessStreamId],
			Src.[Code],
			Src.[Name],
			src.[Description],
			src.[ProcessStreamOrder]
		)

-- Delete rows that are in the target but not the source
WHEN NOT MATCHED BY SOURCE THEN
	DELETE;
GO
SET IDENTITY_INSERT [Control].[ProcessStream] OFF;

SET IDENTITY_INSERT [Control].[SourceFileType] ON;
GO
MERGE INTO [Control].[SourceFileType] AS Tgt
USING 
	(VALUES
		(1, 'DX','DataXchange Distribution Context', 'DX Partition', 'Out',0,''),
		(2,'UNK','UNKNOWN','Unknown','OUT',0,'UNKNOWN'),
		(3,'SAS','SASOWN','SASOWN','OUT',0,''),
		(4,'PRBI','PRBI oracle data waehouse','PRBI','OUT',0,''),
		(5,'CODA','CODA Data Warehouse','CODA','OUT',0,''),
		(6,'TM1','TM1 Planning - Forecasts Budgets','TM1','OUT',0,''),
		(7,'MDS','MDS2016 File Load','MDS','OUT',0,'')
		) AS Src
	(
		[SourceFileTypeId],	
		[Code],
		[Description],
		[Name],
		[Direction],
		[32BitStageRequired],
		[Collection]
	)
	ON Tgt.[SourceFileTypeId] = Src.[SourceFileTypeId]

-- Update matched rows
WHEN MATCHED THEN
	UPDATE
	SET	
		[Code]					= Src.[Code],
		[Description]			= Src.[Description],
		[Name]					= Src.[Name],
		[Direction]				= Src.[Direction],
		[32BitStageRequired]	= src.[32BitStageRequired],
		[Collection]			= src.[Collection]

-- Insert new rows
WHEN NOT MATCHED BY TARGET THEN
	INSERT
		(
			[SourceFileTypeId],	
			[Code],
			[Description],
			[Name],
			[Direction],
			[32BitStageRequired],
			[Collection]          
		)
	VALUES
		(
			SRC.[SourceFileTypeId],	
			SRC.[Code],
			SRC.[Description],
			SRC.[Name],
			SRC.[Direction],
			SRC.[32BitStageRequired],
			SRC.[Collection]
		)

-- Delete rows that are in the target but not the source
WHEN NOT MATCHED BY SOURCE THEN
	DELETE;
GO
SET IDENTITY_INSERT [Control].[SourceFileType] OFF;

SET IDENTITY_INSERT [Control].[Application] ON;
GO
MERGE INTO [Control].[Application] AS Tgt
USING 
	(VALUES
		(1,'Data Experience Online Statements','DEOS','Data Experience Solution', null, null, null ,'Azure DW ','DX', SYSDATETIME()),
		(2,'BroadcastDataQuality','BRDDQ','DataQuality Solution for AV', null, null, null , 'DataMart', 'DQ',SYSDATETIME()),
		(3,'Broadcast Play to Pay','BRDPTP','Play to Pay Solution for Broadcast 1 and 2', null, null, null , 'Azure DW', 'BR',SYSDATETIME()),
		(4,'CODA Financials','CODA','CODA Financials for Play to Pay w/TM Planning Data', null, null, null , 'DataMart', 'CD',SYSDATETIME())
	) AS Src
	(
		[ApplicationId],
		[Name],
     	[Code],
		[Description],
		[Priority],		   
		[UpTimeHours],	   
		[ETLType],		   
        [WarehouseType],
		[Prefix],
		[CreatedDate]
	)
	ON Tgt.[ApplicationId] = Src.[ApplicationId]

-- Update matched rows
WHEN MATCHED THEN
	UPDATE
	SET
		[Name]			   = Src.[Name],
		[Code]			   = Src.[Code],
		[Description]	   = Src.[Description],
		[Priority]		   = Src.[Priority],
		[UpTimeHours]	   = Src.[UpTimeHours],
		[ETLType]		   = Src.[ETLType],
		[WarehouseType]	   = Src.[WarehouseType],
		[Prefix]		   = Src.[Prefix]
-- Insert new rows
WHEN NOT MATCHED BY TARGET THEN
	INSERT
		(
			[ApplicationId],
			[Name],
     		[Code],
			[Description],
			[WarehouseType],
			[Prefix]		
		)
	VALUES
		(
			Src.[ApplicationId],
			Src.[Name],
			Src.[Code],
			Src.[Description],
			Src.[WarehouseType],
			Src.[Prefix]
		)
--  Delete rows that are in the target but not the source
WHEN NOT MATCHED BY SOURCE THEN
	DELETE;
GO
SET IDENTITY_INSERT [Control].[Application] OFF;


SET IDENTITY_INSERT [Config].[Parameter] ON;
GO

MERGE INTO [Config].[Parameter] AS Tgt
USING 
	(
	VALUES
		(1,'ETLState', 'Holds ETL state', NULL, NULL, NULL ,'Ready')
	) 
	AS Src
	(
		[ParmaterId],      
		[ParamaterCode],      
		[ParamaterShortDesc], 
		[ParamaterDesc],      
		[ParameterType],      
		[ParameterValue],     
		[ParameterDataType]  
	)
	ON Tgt.ParmaterId = Src.ParmaterId

-- Update matched rows
WHEN MATCHED THEN
	UPDATE
	SET
		[ParamaterCode]      = Src.[ParamaterCode],     
		[ParamaterShortDesc] = Src.[ParamaterShortDesc], 
		[ParamaterDesc]      = Src.[ParamaterDesc], 
		[ParameterType]      = Src.[ParameterType],     
		[ParameterValue]     = Src.[ParameterValue],    
		[ParameterDataType]  = Src.[ParameterDataType]  
-- Insert new rows
WHEN NOT MATCHED BY TARGET THEN
	INSERT
		(
			[ParmaterId],      
			[ParamaterCode],      
			[ParamaterShortDesc], 
			[ParamaterDesc],      
			[ParameterType],      
			[ParameterValue],     
			[ParameterDataType]  	
		)
	VALUES
		(
			Src.[ParmaterId],	 
			Src.[ParamaterCode],     
			Src.[ParamaterShortDesc],
			Src.[ParamaterDesc], 
			Src.[ParameterType],     
			Src.[ParameterValue],    
			Src.[ParameterDataType]  
		)
--  Delete rows that are in the target but not the source
WHEN NOT MATCHED BY SOURCE THEN
	DELETE;
GO
SET IDENTITY_INSERT [Config].[Parameter] OFF;


SET IDENTITY_INSERT [Control].[CleanseRuleType] ON;
GO
MERGE INTO [Control].CleanseRuleType AS Tgt
USING 
	(VALUES
		(10, 'ReplaceWith'),
		(20, 'RemoveTrailing'),
		(30, 'ToUpper'),
		(40, 'ToLower'),
		(50, 'Capitalise'),
		(60, 'RemoveNonNumbers')
	) AS Src
	(
		  CleanseRuleTypeId
		 ,Name    
	)
	ON Tgt.CleanseRuleTypeId = Src.CleanseRuleTypeId

-- Update matched rows
WHEN MATCHED THEN
	UPDATE
	SET
		  Name = Src.Name

-- Insert new rows
WHEN NOT MATCHED BY TARGET THEN
	INSERT
		(
			 CleanseRuleTypeId
			,Name      
		)
	VALUES
		(
			 Src.CleanseRuleTypeId
			,Src.Name 
		)

-- Delete rows that are in the target but not the source
WHEN NOT MATCHED BY SOURCE THEN
DELETE;
GO

SET IDENTITY_INSERT [Control].CleanseRuleType OFF;

SET IDENTITY_INSERT Control.DataQualityRuleType ON;
GO
MERGE INTO Control.DataQualityRuleType AS Tgt
USING 
	(VALUES
		(10, 'Regex'),
		(20, 'Range'),
		(30, 'Containts'),
		(40, 'BeginsWith'),
		(50, 'Pattern'),
		(60, 'MDM')
	) AS Src
	(
		  DataQualityRuleTypeId
		 ,Name    
	)
	ON Tgt.DataQualityRuleTypeId = Src.DataQualityRuleTypeId

-- Update matched rows
WHEN MATCHED THEN
	UPDATE
	SET
		  Name = Src.Name

-- Insert new rows
WHEN NOT MATCHED BY TARGET THEN
	INSERT
		(
			 DataQualityRuleTypeId
			,Name      
		)
	VALUES
		(
			 Src.DataQualityRuleTypeId
			,Src.Name 
		);

-- Delete rows that are in the target but not the source
--WHEN NOT MATCHED BY SOURCE THEN
--	DELETE;

SET IDENTITY_INSERT Control.DataQualityRuleType OFF;
MERGE INTO DataQuality.HarmoniseRule AS Tgt
USING 
	(VALUES
		 (1,'PostCode','ToUpper',1)
		,(2,'Group','ToUpper',1)
			
	) AS Src
	(
	   [HarmoniseRuleId]
      ,[ColumnName]
      ,[CleanseType]
      ,[EntityTypeID]
	)
	ON Tgt.[HarmoniseRuleId] = Src.[HarmoniseRuleId]

-- Update matched rows
WHEN MATCHED THEN
UPDATE 
   SET [HarmoniseRuleId]	=		src.[HarmoniseRuleId]
      ,[ColumnName]			=		src.[ColumnName]
      ,[CleanseType]		=		src.[CleanseType]
      ,[EntityTypeID]		=		src.[EntityTypeID]
      

-- Insert new rows
WHEN NOT MATCHED BY TARGET THEN
	INSERT
		(
	   [HarmoniseRuleId]
      ,[ColumnName]
      ,[CleanseType]
      ,[EntityTypeID]
     
		)
	VALUES
		(
		 src.[HarmoniseRuleId]
		,src.[ColumnName]
		,src.[CleanseType]
		,src.[EntityTypeID]
		
		);

-- Delete rows that are in the target but not the source
--WHEN NOT MATCHED BY SOURCE THEN
--	DELETE;

	--SET IDENTITY_INSERT  DataQuality.HarmoniseRule  OFF;

SET IDENTITY_INSERT DataQuality.DataIntegrityType ON 
GO

MERGE INTO DataQuality.DataIntegrityType AS Tgt
USING 
	(VALUES
		(0, 'N', 'Not Checked'),
		(1, 'P', 'Passed'),
		(2, 'F', 'Failed')
	) AS Src
	(
		 IntegrityTypeId
		,Code
		,Name
	)
	ON Tgt.IntegrityTypeId = Src.IntegrityTypeId

-- Update matched rows
WHEN MATCHED THEN
	UPDATE
	SET
		 Code				= Src.Code
		,Name		= Src.Name

-- Insert new rows
WHEN NOT MATCHED BY TARGET THEN
	INSERT
		(
			 IntegrityTypeId
			,Code
			,Name
		)
	VALUES
		(
			 Src.IntegrityTypeId
			,Src.Code
			,Src.Name
		)

-- Delete rows that are in the target but not the source
WHEN NOT MATCHED BY SOURCE THEN
	DELETE;
GO
	SET IDENTITY_INSERT  DataQuality.DataIntegrityType  OFF

SET IDENTITY_INSERT DataQuality.Screen ON 
GO
MERGE INTO DataQuality.Screen AS Tgt
USING 
	(VALUES
		-- Column rules

		-- Format 5 Line 10

		(1,'Series Indicator','Valid Series Indicator Check',NULL,NULL,'DataQuality Format5 Line10',	1,	'SeriesIndicator NOT IN(''Y'', ''N'', '''')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(2,'Production/Series Name','Production/Series Name Mandatory Column Check',NULL,NULL,'DataQuality Format5 Line10',	1,	'ProductionName = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(3,'Series Number','Series Number Population Check',NULL,NULL,'DataQuality Format5 Line10',	1,	'SeriesIndicator = ''Y'' AND SeriesNumber = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(4,'Episode Name','Episode Name Population Check',NULL,NULL,'DataQuality Format5 Line10',	1,	'SeriesIndicator = ''Y'' AND EpisodeNumber = '''' AND EpisodeName = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(5,'Episode Number','Episode Number Population Check',NULL,NULL,'DataQuality Format5 Line10',	1,	'SeriesIndicator = ''Y'' AND EpisodeNumber = '''' AND EpisodeName = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(6,'Transmission Station','Transmission Station Population Check',NULL,NULL,'DataQuality Format5 Line10',	1,	'TransmissionStation = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(7,'Daily Transmission Schedule Date','Daily Transmission Schedule Date Population Check',NULL,NULL,'DataQuality Format5 Line10',	1,	'DailyTransmissionScheduleDate = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(8,'Transmission Time','Transmission Time Population Check',NULL,NULL,'DataQuality Format5 Line10',	1,	'TransmissionTime = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(9,'Production Company','Production Company Population Check',NULL,NULL,'DataQuality Format5 Line10',	1,	'ProductionSourceIndicator = ''C'' AND ProductionCompany = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(10,'First Transmission Indicator','Valid First Transmission Indicator Check',NULL,NULL,'DataQuality Format5 Line10',	1,	'FirstTransmissionIndicator NOT IN(''Y'', ''N'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		 --Reference rule previously removed as MDS not available.
		(11,'Music Content Indicator','Valid Music Content Indicator Check',NULL,NULL,'DataQuality Format5 Line10',	1,	'ENT.MusicContentIndicator IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.MusicContent MC ON ENT.MusicContentIndicator = MC.Code',	NULL, NULL, 'AV'),
		(12,'Production Type','Valid Production Type Check',NULL,NULL,'DataQuality Format5 Line10',	1,	'ENT.ProductionType IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.ProductionType PT ON ENT.ProductionType = PT.Code',	NULL, NULL, 'AV'),
		(13,'Production Source Indicator','Valid Production Source Indicator Check',NULL,NULL,'DataQuality Format5 Line10',	1,	'ENT.ProductionSourceIndicator IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.ProductionSource PS ON ENT.ProductionSourceIndicator = PS.Code',	NULL, NULL, 'AV'),
		(14,'Domestic International Indicator','Valid Domestic International Indicator Check',NULL,NULL,'DataQuality Format5 Line10',	1,	'ENT.DomesticInternationalIndicator IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.DomesticInternationalTransmission DI ON ENT.DomesticInternationalIndicator = DI.Code',	NULL, NULL, 'AV'),
		 --Column rule
		(15,'MCPS Blanket Indicator','Valid MCPS Blanket Indicator Check',NULL,NULL,'DataQuality Format5 Line10',	1,	'MCPSBlanketIndicator NOT IN(''Y'', ''N'', '''')',NULL, NULL,	NULL, NULL, 'AV'),
		-- Reference rule
		(16,'Local Network Indicator','Valid Local Network Indicator Check',NULL,NULL,'DataQuality Format5 Line10',	1,	'ENT.LocalNetworkIndicator IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.LocalNetworkBroadcast LN ON ENT.LocalNetworkIndicator = LN.Code',	NULL, NULL, 'AV'),
		(17,'Territory Code','Valid Territory Check',NULL,NULL,'DataQuality Format5 Line10',	1,	'ENT.TerritoryCode IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.Territory T ON ENT.TerritoryCode = T.Code',	NULL, NULL, 'AV'),
	--	 Column rule
		(18,'Valid Amendment Indicator','Valid Amendment Indicator Check',NULL,NULL,'DataQuality Format5 Line10',	1,	'AmendmentIndicator NOT IN(''Y'', ''N'', '''')',NULL, NULL,	NULL, NULL, 'AV'),
		
		
		-- Format 5 Line 20
		(30,'Production Reference Number','Production Reference Number Check',NULL,NULL,'DataQuality Format5 Line20',	1,	'ProductionReferenceNumber = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(31,'Music Item Sequence','Music Item Sequence Check',NULL,NULL,'DataQuality Format5 Line20',	1,	'MusicItemSequence = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(32,'Product Album Promo Title','Product Album Promo Title Check',NULL,NULL,'DataQuality Format5 Line20',	1,	'ProductAlbumPromoTitle = '''' AND MusicOriginClassification IN(''C'',''L'')  AND ProductCatalogueNumber  = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(33,'Product Label','Product Label Check',NULL,NULL,'DataQuality Format5 Line20',	1,	'ProductLabel = '''' AND MusicOriginClassification IN(''C'',''L'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(34,'Product Catalogue Number','Product Catalogue Number Check',NULL,NULL,'DataQuality Format5 Line20',	1,	'ProductCatalogueNumber = '''' AND MusicOriginClassification IN(''C'',''L'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(35,'Music Duration','Music Duration Check',NULL,NULL,'DataQuality Format5 Line20',	1,	'ISNULL(MusicDuration,0) <= 0',	NULL,	NULL,	NULL, NULL, 'AV'),
		(36,'Music Usage Classification','Music Usage Classification Check',NULL,NULL,'DataQuality Format5 Line20',	1,	'MusicUsageClassification NOT IN(''B'',''F'',''M'',''S'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(37,'Music Origin Classification','Music Origin Classification Check',NULL,NULL,'DataQuality Format5 Line20',	1,	'MusicOriginClassification NOT IN(''C'',''L'',''P'',''R'',''T'',''V'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(38,'Prior Approval Indicator','Prior Approval Indicator Check',NULL,NULL,'DataQuality Format5 Line20',	1,	'PriorApprovalIndicator NOT IN(''N'',''Y'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(39,'Music Commission Flag','Music Commission Flag Check',NULL,NULL,'DataQuality Format5 Line20',	1,	'MusicCommissionFlag NOT IN(''N'',''Y'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(40,'Licensing Status Of Commissioned Music','Licensing Status Of Commissioned Music Check', NULL,NULL,'DataQuality Format5 Line20',	1,	'LicensingStatusofCommissionedMusic NOT IN(''N'',''Y'') AND MusicCommissionFlag = ''Y''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(41,'Music Composer/Author','Music Composer/Author Check', NULL,NULL,'DataQuality Format5 Line20',	1,	'MusicComposerAuthor = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(42,'Music Publisher','Music Publisher Check', NULL,NULL,'DataQuality Format5 Line20',	1,	'MusicPublisher = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(43,'Music Performer','Music Performer Check', NULL,NULL,'DataQuality Format5 Line20',	1,	'MusicPerformer = '''' AND MusicOriginClassification = ''C''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(44,'Music Dubbing Flag','Music Dubbing Flag Check', NULL,NULL,'DataQuality Format5 Line20',	1,	'MusicDubbingFlag NOT IN(''Y'',''N'')',	NULL,	NULL,	NULL, NULL, 'AV'),



		--Format 5 Line 00

		(60,'Extract Date','Extract Date Check',NULL,NULL,'DataQuality Format5 Line00',	1,	'ExtractDate IS NULL',	NULL,	NULL,	NULL, NULL, 'AV'),
		(61,'Supplier Name','Supplier Name Check',NULL,NULL,'DataQuality Format5 Line00',	1,	'SupplierName = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(62,'Version Number','Version Number Check',NULL,NULL,'DataQuality Format5 Line00',	1,	'VersionNumber = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(63,'SupplierId','SupplierId Check',NULL,NULL,'DataQuality Format5 Line00',	1,	'SupplierId = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(64,'Log Type','Log Type Check',NULL,NULL,'DataQuality Format5 Line00',	1,	'LogType = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),

		--Format 5 Line 99

		(70,'Number Of Records','Number Of Records Check',NULL,NULL,'DataQuality Format5 Line99',	1,	'RecordCount IS NULL',	NULL,	NULL,	NULL, NULL, 'AV'),

	
		-- Format 303 Line 10

		--(1,'Series Indicator','Valid Series Indicator Check',NULL,NULL,'DataQuality Format303 Line10',	1,	'SeriesIndicator NOT IN(''Y'', ''N'', '''')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(71,'Production/Series Name','Production/Series Name Mandatory Column Check',NULL,NULL,'DataQuality Format303 Line10',	1,	'ProductionName = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		--(3,'Series Number','Series Number Population Check',NULL,NULL,'DataQuality Format303 Line10',	1,	'SeriesIndicator = ''Y'' AND SeriesNumber = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(72,'Episode Name','Episode Name Population Check',NULL,NULL,'DataQuality Format303 Line10',	1,	'EpisodeNumber = '''' AND EpisodeName = '''' AND ProductionName = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(73,'Episode Number','Episode Number Population Check',NULL,NULL,'DataQuality Format303 Line10',	1,	'EpisodeNumber = '''' AND EpisodeName = '''' AND ProductionName = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(74,'Transmission Station','Transmission Station Population Check',NULL,NULL,'DataQuality Format303 Line10',	1,	'TransmissionStation = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		--(75,'Transmission Date','Transmission Date Population Check',NULL,NULL,'DataQuality Format303 Line10',	1,	'TransmissionDate = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(76,'Transmission Time','Transmission Time Population Check',NULL,NULL,'DataQuality Format303 Line10',	1,	'TransmissionTime = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		--(77,'Production Company','Production Company Population Check',NULL,NULL,'DataQuality Format303 Line10',	1,	'ProductionSourceIndicator = ''C'' AND ProductionCompany = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		--(10,'First Transmission Indicator','Valid First Transmission Indicator Check',NULL,NULL,'DataQuality Format303 Line10',	1,	'FirstTransmissionIndicator NOT IN(''Y'', ''N'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		 
		 --Reference rule previously removed as MDS not available.
		
		(78,'Music Content Indicator','Valid Music Content Indicator Check',NULL,NULL,'DataQuality Format303 Line10',	1,	'ENT.MusicContentIndicator IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.MusicContent MC ON ENT.MusicContentIndicator = MC.Code',	NULL, NULL, 'AV'),
		(79,'Production Type','Valid Production Type Check',NULL,NULL,'DataQuality Format303 Line10',	1,	'ENT.ProductionType IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.ProductionType PT ON ENT.ProductionType = PT.Code',	NULL, NULL, 'AV'),
		(80,'Production Source Indicator','Valid Production Source Indicator Check',NULL,NULL,'DataQuality Format303 Line10',	1,	'ENT.ProductionSourceIndicator IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.ProductionSource PS ON ENT.ProductionSourceIndicator = PS.Code',	NULL, NULL, 'AV'),
		--(14,'Domestic International Indicator','Valid Domestic International Indicator Check',NULL,NULL,'DataQuality Format303 Line10',	1,	'ENT.DomesticInternationalIndicator IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.DomesticInternationalTransmission DI ON ENT.DomesticInternationalIndicator = DI.Code',	NULL, NULL, 'AV'),
		 --Column rule
		(81,'MCPS Blanket Indicator','Valid MCPS Blanket Indicator Check',NULL,NULL,'DataQuality Format303 Line10',	1,	'MCPSBlanketIndicator NOT IN(''Y'', ''N'')',NULL, NULL,	NULL, NULL, 'AV'),
		-- Reference rule
		(82,'Local Network Indicator','Valid Local Network Indicator Check',NULL,NULL,'DataQuality Format303 Line10',	1,	'ENT.LocalNetworkIndicator IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.LocalNetworkBroadcast LN ON ENT.LocalNetworkIndicator = LN.Code',	NULL, NULL, 'AV'),
		--(17,'Territory Code','Valid Territory Check',NULL,NULL,'DataQuality Format303 Line10',	1,	'ENT.TerritoryCode IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.Territory T ON ENT.TerritoryCode = T.Code',	NULL, NULL, 'AV'),
	
	--	 Column rule
		(83,'Valid Amendment Indicator','Valid Amendment Indicator Check',NULL,NULL,'DataQuality Format303 Line10',	1,	'AmendmentIndicator NOT IN(''Y'', ''N'')',NULL, NULL,	NULL, NULL, 'AV'),
		
		
		-- Format 303 Line 20
		(84,'Production Reference Number','Production Reference Number Check',NULL,NULL,'DataQuality Format303 Line20',	1,	'ProductionReferenceNumber = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(85,'Music Item Sequence','Music Item Sequence Check',NULL,NULL,'DataQuality Format303 Line20',	1,	'MusicItemSequence = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		--(86,'Product Album Promo Title','Product Album Promo Title Check',NULL,NULL,'DataQuality Format303 Line20',	1,	'ProductAlbumPromoTitle = '''' AND MusicOriginClassification IN(''C'',''L'')  AND ProductCatalogueNumber  = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		--(87,'Product Label','Product Label Check',NULL,NULL,'DataQuality Format303 Line20',	1,	'ProductLabel = '''' AND MusicOriginClassification IN(''C'',''L'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		--(88,'Product Catalogue Number','Product Catalogue Number Check',NULL,NULL,'DataQuality Format303 Line20',	1,	'ProductCatalogueNumber = '''' AND MusicOriginClassification IN(''C'',''L'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(89,'Music Duration','Music Duration Check',NULL,NULL,'DataQuality Format303 Line20',	1,	'ISNULL(MusicDuration,0) <= 0',	NULL,	NULL,	NULL, NULL, 'AV'),
		(90,'Music Usage Classification','Music Usage Classification Check',NULL,NULL,'DataQuality Format303 Line20',	1,	'MusicUsageClassification NOT IN(''B'',''F'',''S'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(91,'Music Origin Classification','Music Origin Classification Check',NULL,NULL,'DataQuality Format303 Line20',	1,	'MusicOriginClassification NOT IN(''C'',''L'',''P'',''R'',''T'',''V'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(92,'Prior Approval Indicator','Prior Approval Indicator Check',NULL,NULL,'DataQuality Format303 Line20',	1,	'PriorApprovalIndicator NOT IN(''N'',''Y'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		--(93,'Music Commission Flag','Music Commission Flag Check',NULL,NULL,'DataQuality Format303 Line20',	1,	'MusicCommissionFlag NOT IN(''N'',''Y'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(94,'Licensing Status Of Commissioned Music','Licensing Status Of Commissioned Music Check', NULL,NULL,'DataQuality Format303 Line20',	1,	'LicensingStatusofCommissionedMusic NOT IN(''N'',''Y'') AND MusicCommissionFlag = ''Y''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(95,'Music Composer/Author','Music Composer/Author Check', NULL,NULL,'DataQuality Format303 Line20',	1,	'MusicComposerAuthor = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(96,'Music Publisher','Music Publisher Check', NULL,NULL,'DataQuality Format303 Line20',	1,	'MusicPublisher = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(97,'Music Performer','Music Performer Check', NULL,NULL,'DataQuality Format303 Line20',	1,	'MusicPerformer = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		--(44,'Music Dubbing Flag','Music Dubbing Flag Check', NULL,NULL,'DataQuality Format303 Line20',	1,	'MusicDubbingFlag NOT IN(''Y'',''N'')',	NULL,	NULL,	NULL, NULL, 'AV'),



		--Format 303 Line 00

		(98,'Extract Date','Extract Date Check',NULL,NULL,'DataQuality Format303 Line00',	1,	'ExtractDate IS NULL',	NULL,	NULL,	NULL, NULL, 'AV'),
		(99,'Supplier Name','Supplier Name Check',NULL,NULL,'DataQuality Format303 Line00',	1,	'SupplierName = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(100,'Version Number','Version Number Check',NULL,NULL,'DataQuality Format303 Line00',	1,	'VersionNumber = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(101,'SupplierId','SupplierId Check',NULL,NULL,'DataQuality Format303 Line00',	1,	'SupplierId = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(102,'Log Type','Log Type Check',NULL,NULL,'DataQuality Format303 Line00',	1,	'LogType = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),

		--Format 303 Line 99

		(103,'Number Of Records','Number Of Records Check',NULL,NULL,'DataQuality Format303 Line99',	1,	'RecordCount IS NULL',	NULL,	NULL,	NULL, NULL, 'AV'),

		-- Format 50 Line 10

		(104,'Series Indicator','Valid Series Indicator Check',NULL,NULL,'DataQuality Format50 Line10',	1,	'SeriesIndicator NOT IN(''Y'', ''N'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(105,'Production/Series Name','Production/Series Name Mandatory Column Check',NULL,NULL,'DataQuality Format50 Line10',	1,	'ProductionName = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		--(106,'Series Number','Series Number Population Check',NULL,NULL,'DataQuality Format50 Line10',	1,	'SeriesIndicator = ''Y'' AND SeriesNumber = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(107,'Episode Name','Episode Name Population Check',NULL,NULL,'DataQuality Format50 Line10',	1,	'SeriesIndicator = ''Y'' AND EpisodeNumber = '''' AND EpisodeName = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(108,'Episode Number','Episode Number Population Check',NULL,NULL,'DataQuality Format50 Line10',	1,	'SeriesIndicator = ''Y'' AND EpisodeNumber = '''' AND EpisodeName = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(109,'Transmission Station','Transmission Station Population Check',NULL,NULL,'DataQuality Format50 Line10',	1,	'TransmissionStation = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(110,'Daily Transmission Schedule Date','Daily Transmission Schedule Date Population Check',NULL,NULL,'DataQuality Format50 Line10',	1,	'DailyTransmissionScheduleDate = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(111,'Transmission Time','Transmission Time Population Check',NULL,NULL,'DataQuality Format50 Line10',	1,	'TransmissionTime = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(112,'Production Company','Production Company Population Check',NULL,NULL,'DataQuality Format50 Line10',	1,	'ProductionSourceIndicator = ''C'' AND ProductionCompany = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(113,'First Transmission Indicator','Valid First Transmission Indicator Check',NULL,NULL,'DataQuality Format50 Line10',	1,	'FirstTransmissionIndicator NOT IN(''Y'', ''N'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		 --Reference rule previously removed as MDS not available.
		(114,'Music Content Indicator','Valid Music Content Indicator Check',NULL,NULL,'DataQuality Format50 Line10',	1,	'ENT.MusicContentIndicator IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.MusicContent MC ON ENT.MusicContentIndicator = MC.Code',	NULL, NULL, 'AV'),
		(115,'Production Type','Valid Production Type Check',NULL,NULL,'DataQuality Format50 Line10',	1,	'ENT.ProductionType IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.ProductionType PT ON ENT.ProductionType = PT.Code',	NULL, NULL, 'AV'),
		(116,'Production Source Indicator','Valid Production Source Indicator Check',NULL,NULL,'DataQuality Format50 Line10',	1,	'ENT.ProductionSourceIndicator IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.ProductionSource PS ON ENT.ProductionSourceIndicator = PS.Code',	NULL, NULL, 'AV'),
		--(117,'Domestic International Indicator','Valid Domestic International Indicator Check',NULL,NULL,'DataQuality Format50 Line10',	1,	'ENT.DomesticInternationalIndicator IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.DomesticInternationalTransmission DI ON ENT.DomesticInternationalIndicator = DI.Code',	NULL, NULL, 'AV'),
		 --Column rule
		(118,'MCPS Blanket Indicator','Valid MCPS Blanket Indicator Check',NULL,NULL,'DataQuality Format50 Line10',	1,	'MCPSBlanketIndicator NOT IN(''Y'', ''N'', '''')',NULL, NULL,	NULL, NULL, 'AV'),
		-- Reference rule
		(119,'Local Network Indicator','Valid Local Network Indicator Check',NULL,NULL,'DataQuality Format50 Line10',	1,	'ENT.LocalNetworkIndicator IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.LocalNetworkBroadcast LN ON ENT.LocalNetworkIndicator = LN.Code',	NULL, NULL, 'AV'),
		--(120,'Territory Code','Valid Territory Check',NULL,NULL,'DataQuality Format50 Line10',	1,	'ENT.TerritoryCode IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.Territory T ON ENT.TerritoryCode = T.Code',	NULL, NULL, 'AV'),
	--	 Column rule
		--(121,'Valid Amendment Indicator','Valid Amendment Indicator Check',NULL,NULL,'DataQuality Format50 Line10',	1,	'AmendmentIndicator NOT IN(''Y'', ''N'', '''')',NULL, NULL,	NULL, NULL, 'AV'),
		
		
		-- Format 50 Line 20
		(122,'Production Reference Number','Production Reference Number Check',NULL,NULL,'DataQuality Format50 Line20',	1,	'ProductionReferenceNumber = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(123,'Music Item Sequence','Music Item Sequence Check',NULL,NULL,'DataQuality Format50 Line20',	1,	'MusicItemSequence = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(124,'Product Album Promo Title','Product Album Promo Title Check',NULL,NULL,'DataQuality Format50 Line20',	1,	'ProductAlbumPromoTitle = '''' AND MusicOriginClassification IN(''C'',''L'')  AND ProductCatalogueNumber  = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(125,'Product Label','Product Label Check',NULL,NULL,'DataQuality Format50 Line20',	1,	'ProductLabel = '''' AND MusicOriginClassification IN(''C'',''L'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(126,'Product Catalogue Number','Product Catalogue Number Check',NULL,NULL,'DataQuality Format50 Line20',	1,	'ProductCatalogueNumber = '''' AND MusicOriginClassification IN(''C'',''L'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(127,'Music Duration','Music Duration Check',NULL,NULL,'DataQuality Format50 Line20',	1,	'ISNULL(MusicDuration,0) <= 0',	NULL,	NULL,	NULL, NULL, 'AV'),
		(128,'Music Usage Classification','Music Usage Classification Check',NULL,NULL,'DataQuality Format50 Line20',	1,	'MusicUsageClassification NOT IN(''B'',''F'',''M'',''S'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(129,'Music Origin Classification','Music Origin Classification Check',NULL,NULL,'DataQuality Format50 Line20',	1,	'MusicOriginClassification NOT IN(''C'',''L'',''P'',''R'',''T'',''V'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(130,'Prior Approval Indicator','Prior Approval Indicator Check',NULL,NULL,'DataQuality Format50 Line20',	1,	'PriorApprovalIndicator NOT IN(''N'',''Y'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(131,'Music Commission Flag','Music Commission Flag Check',NULL,NULL,'DataQuality Format50 Line20',	1,	'MusicCommissionFlag NOT IN(''N'',''Y'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(132,'Licensing Status Of Commissioned Music','Licensing Status Of Commissioned Music Check', NULL,NULL,'DataQuality Format50 Line20',	1,	'LicensingStatusofCommissionedMusic NOT IN(''N'',''Y'') AND MusicCommissionFlag = ''Y''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(133,'Music Composer/Author','Music Composer/Author Check', NULL,NULL,'DataQuality Format50 Line20',	1,	'MusicComposerAuthor = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(134,'Music Publisher','Music Publisher Check', NULL,NULL,'DataQuality Format50 Line20',	1,	'MusicPublisher = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(135,'Music Performer','Music Performer Check', NULL,NULL,'DataQuality Format50 Line20',	1,	'MusicPerformer = '''' AND MusicOriginClassification = ''C''',	NULL,	NULL,	NULL, NULL, 'AV'),
		--(136,'Music Dubbing Flag','Music Dubbing Flag Check', NULL,NULL,'DataQuality Format50 Line20',	1,	'MusicDubbingFlag NOT IN(''Y'',''N'')',	NULL,	NULL,	NULL, NULL, 'AV'),



		--Format 50 Line 00

		(137,'Extract Date','Extract Date Check',NULL,NULL,'DataQuality Format50 Line00',	1,	'ExtractDate IS NULL',	NULL,	NULL,	NULL, NULL, 'AV'),
		(138,'Supplier Name','Supplier Name Check',NULL,NULL,'DataQuality Format50 Line00',	1,	'SupplierName = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(139,'Version Number','Version Number Check',NULL,NULL,'DataQuality Format50 Line00',	1,	'VersionNumber = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(140,'SupplierId','SupplierId Check',NULL,NULL,'DataQuality Format50 Line00',	1,	'SupplierId = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(141,'Log Type','Log Type Check',NULL,NULL,'DataQuality Format50 Line00',	1,	'LogType = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),

		--Format 50 Line 99

		(142,'Number Of Records','Number Of Records Check',NULL,NULL,'DataQuality Format50 Line99',	1,	'RecordCount IS NULL',	NULL,	NULL,	NULL, NULL, 'AV'),


		-- Format 52 Line 10

		(143,'Series Indicator','Valid Series Indicator Check',NULL,NULL,'DataQuality Format52 Line10',	1,	'SeriesIndicator NOT IN(''Y'', ''N'', '''')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(144,'Production/Series Name','Production/Series Name Mandatory Column Check',NULL,NULL,'DataQuality Format52 Line10',	1,	'ProductionName = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(145,'Series Number','Series Number Population Check',NULL,NULL,'DataQuality Format52 Line10',	1,	'SeriesIndicator = ''Y'' AND SeriesNumber = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(146,'Episode Name','Episode Name Population Check',NULL,NULL,'DataQuality Format52 Line10',	1,	'SeriesIndicator = ''Y'' AND EpisodeNumber = '''' AND EpisodeName = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(147,'Episode Number','Episode Number Population Check',NULL,NULL,'DataQuality Format52 Line10',	1,	'SeriesIndicator = ''Y'' AND EpisodeNumber = '''' AND EpisodeName = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(148,'Transmission Station','Transmission Station Population Check',NULL,NULL,'DataQuality Format52 Line10',	1,	'TransmissionStation = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(149,'Daily Transmission Schedule Date','Daily Transmission Schedule Date Population Check',NULL,NULL,'DataQuality Format52 Line10',	1,	'DailyTransmissionScheduleDate = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(150,'Transmission Time','Transmission Time Population Check',NULL,NULL,'DataQuality Format52 Line10',	1,	'TransmissionTime = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(151,'Production Company','Production Company Population Check',NULL,NULL,'DataQuality Format52 Line10',	1,	'ProductionSourceIndicator = ''C'' AND ProductionCompany = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(152,'First Transmission Indicator','Valid First Transmission Indicator Check',NULL,NULL,'DataQuality Format52 Line10',	1,	'FirstTransmissionIndicator NOT IN(''Y'', ''N'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		 --Reference rule previously removed as MDS not available.
		(153,'Music Content Indicator','Valid Music Content Indicator Check',NULL,NULL,'DataQuality Format52 Line10',	1,	'ENT.MusicContentIndicator IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.MusicContent MC ON ENT.MusicContentIndicator = MC.Code',	NULL, NULL, 'AV'),
		(154,'Production Type','Valid Production Type Check',NULL,NULL,'DataQuality Format52 Line10',	1,	'ENT.ProductionType IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.ProductionType PT ON ENT.ProductionType = PT.Code',	NULL, NULL, 'AV'),
		(155,'Production Source Indicator','Valid Production Source Indicator Check',NULL,NULL,'DataQuality Format52 Line10',	1,	'ENT.ProductionSourceIndicator IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.ProductionSource PS ON ENT.ProductionSourceIndicator = PS.Code',	NULL, NULL, 'AV'),
		--(156,'Domestic International Indicator','Valid Domestic International Indicator Check',NULL,NULL,'DataQuality Format52 Line10',	1,	'ENT.DomesticInternationalIndicator IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.DomesticInternationalTransmission DI ON ENT.DomesticInternationalIndicator = DI.Code',	NULL, NULL, 'AV'),
		 --Column rule
		--(157,'MCPS Blanket Indicator','Valid MCPS Blanket Indicator Check',NULL,NULL,'DataQuality Format52 Line10',	1,	'MCPSBlanketIndicator NOT IN(''Y'', ''N'', '''')',NULL, NULL,	NULL, NULL, 'AV'),
		-- Reference rule
		(158,'Local Network Indicator','Valid Local Network Indicator Check',NULL,NULL,'DataQuality Format52 Line10',	1,	'ENT.LocalNetworkIndicator IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.LocalNetworkBroadcast LN ON ENT.LocalNetworkIndicator = LN.Code',	NULL, NULL, 'AV'),
		(159,'Territory Code','Valid Territory Check',NULL,NULL,'DataQuality Format52 Line10',	1,	'ENT.TerritoryCode IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.Territory T ON ENT.TerritoryCode = T.Code',	NULL, NULL, 'AV'),
	--	 Column rule
		--(160,'Valid Amendment Indicator','Valid Amendment Indicator Check',NULL,NULL,'DataQuality Format52 Line10',	1,	'AmendmentIndicator NOT IN(''Y'', ''N'', '''')',NULL, NULL,	NULL, NULL, 'AV'),
		
		
		-- Format 52 Line 20
		(161,'Production Reference Number','Production Reference Number Check',NULL,NULL,'DataQuality Format52 Line20',	1,	'ProductionReferenceNumber = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(162,'Music Item Sequence','Music Item Sequence Check',NULL,NULL,'DataQuality Format52 Line20',	1,	'MusicItemSequence = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(163,'Product Album Promo Title','Product Album Promo Title Check',NULL,NULL,'DataQuality Format52 Line20',	1,	'ProductAlbumPromoTitle = '''' AND MusicOriginClassification IN(''C'',''L'')  AND ProductCatalogueNumber  = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(164,'Product Label','Product Label Check',NULL,NULL,'DataQuality Format52 Line20',	1,	'ProductLabel = '''' AND MusicOriginClassification IN(''C'',''L'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(165,'Product Catalogue Number','Product Catalogue Number Check',NULL,NULL,'DataQuality Format52 Line20',	1,	'ProductCatalogueNumber = '''' AND MusicOriginClassification IN(''C'',''L'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(166,'Music Duration','Music Duration Check',NULL,NULL,'DataQuality Format52 Line20',	1,	'ISNULL(MusicDuration,0) <= 0',	NULL,	NULL,	NULL, NULL, 'AV'),
		(167,'Music Usage Classification','Music Usage Classification Check',NULL,NULL,'DataQuality Format52 Line20',	1,	'MusicUsageClassification NOT IN(''B'',''F'',''M'',''S'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(168,'Music Origin Classification','Music Origin Classification Check',NULL,NULL,'DataQuality Format52 Line20',	1,	'MusicOriginClassification NOT IN(''C'',''L'',''P'',''R'',''T'',''V'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		--(169,'Prior Approval Indicator','Prior Approval Indicator Check',NULL,NULL,'DataQuality Format52 Line20',	1,	'PriorApprovalIndicator NOT IN(''N'',''Y'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(170,'Music Commission Flag','Music Commission Flag Check',NULL,NULL,'DataQuality Format52 Line20',	1,	'MusicCommissionFlag NOT IN(''N'',''Y'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(171,'Licensing Status Of Commissioned Music','Licensing Status Of Commissioned Music Check', NULL,NULL,'DataQuality Format52 Line20',	1,	'LicensingStatusofCommissionedMusic NOT IN(''N'',''Y'') AND MusicCommissionFlag = ''Y''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(172,'Music Composer/Author','Music Composer/Author Check', NULL,NULL,'DataQuality Format52 Line20',	1,	'MusicComposerAuthor = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(173,'Music Publisher','Music Publisher Check', NULL,NULL,'DataQuality Format52 Line20',	1,	'MusicPublisher = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(174,'Music Performer','Music Performer Check', NULL,NULL,'DataQuality Format52 Line20',	1,	'MusicPerformer = '''' AND MusicOriginClassification = ''C''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(175,'Music Dubbing Flag','Music Dubbing Flag Check', NULL,NULL,'DataQuality Format52 Line20',	1,	'MusicDubbingFlag NOT IN(''Y'',''N'')',	NULL,	NULL,	NULL, NULL, 'AV'),



		--Format 52 Line 00

		(176,'Extract Date','Extract Date Check',NULL,NULL,'DataQuality Format52 Line00',	1,	'ExtractDate IS NULL',	NULL,	NULL,	NULL, NULL, 'AV'),
		(177,'Supplier Name','Supplier Name Check',NULL,NULL,'DataQuality Format52 Line00',	1,	'SupplierName = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(178,'Version Number','Version Number Check',NULL,NULL,'DataQuality Format52 Line00',	1,	'VersionNumber = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(179,'SupplierId','SupplierId Check',NULL,NULL,'DataQuality Format52 Line00',	1,	'SupplierId = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(180,'Log Type','Log Type Check',NULL,NULL,'DataQuality Format52 Line00',	1,	'LogType = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),

		--Format 52 Line 99

		(181,'Number Of Records','Number Of Records Check',NULL,NULL,'DataQuality Format52 Line99',	1,	'RecordCount IS NULL',	NULL,	NULL,	NULL, NULL, 'AV'),

		-- Format 51 Line 00

		(182, 'Extract Date','Extract Date Check',NULL,NULL,'DataQuality Format51 Line00',	1,	'ExtractDate IS NULL',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(183, 'Supplier Name','Supplier Name Check',NULL,NULL,'DataQuality Format51 Line00',	1,	'SupplierName = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(184,'Version Number','Version Number Check',NULL,NULL,'DataQuality Format51 Line00',	1,	'VersionNumber = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(185,'SupplierId','SupplierId Check',NULL,NULL,'DataQuality Format51 Line00',	1,	'SupplierId = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(186,'Log Type','Log Type Check',NULL,NULL,'DataQuality Format51 Line00',	1,	'LogType = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),

		--Format 51 line 10


		(188,'Production Number','Production Number Check',NULL,NULL,'DataQuality Format51 Line10',	1,	'ProductionNumber = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(189,'Production/Series Name','Production/Series Name Mandatory Column Check',NULL,NULL,'DataQuality Format51 Line10',	1,	'ProductionName = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(190,'Transmission Station','Transmission Station Population Check',NULL,NULL,'DataQuality Format51 Line10',	1,	'TransmissionStation = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(191,'Daily Transmission Schedule Date','Daily Transmission Schedule Date Population Check',NULL,NULL,'DataQuality Format51 Line10',	1,	'DailyTransmissionScheduleDate = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(192,'Transmission Time','Transmission Time Population Check',NULL,NULL,'DataQuality Format51 Line10',	1,	'TransmissionTime = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
	 

	    --Reference rule previously removed as MDS not available.
		(193,'Music Content Indicator','Valid Music Content Indicator Check',NULL,NULL,'DataQuality Format51 Line10',	1,	'ENT.MusicContentIndicator IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.MusicContent MC ON ENT.MusicContentIndicator = MC.Code',	NULL, NULL, 'Radio'),
		(194,'Production Type','Valid Production Type Check',NULL,NULL,'DataQuality Format51 Line10',	1,	'ENT.ProductionType IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.ProductionType PT ON ENT.ProductionType = PT.Code',	NULL, NULL, 'Radio'),
	    (195,'Domestic International Indicator','Valid Domestic International Indicator Check',NULL,NULL,'DataQuality Format51 Line10',	1,	'ENT.DomesticInternationalIndicator IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.DomesticInternationalTransmission DI ON ENT.DomesticInternationalIndicator = DI.Code',	NULL, NULL, 'Radio'),
		 
		-- Reference rule
		(196,'Local Network Indicator','Valid Local Network Indicator Check',NULL,NULL,'DataQuality Format51 Line10',	1,	'ENT.LocalNetworkIndicator IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.LocalNetworkBroadcast LN ON ENT.LocalNetworkIndicator = LN.Code',	NULL, NULL, 'Radio'),
		(197,'Territory Code','Valid Territory Check',NULL,NULL,'DataQuality Format51 Line10',	1,	'ENT.TerritoryCode IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.Territory T ON ENT.TerritoryCode = T.Code',	NULL, NULL, 'Radio'),
	   --Column rule
		(198,'Valid Amendment Indicator','Valid Amendment Indicator Check',NULL,NULL,'DataQuality Format51 Line10',	1,	'AmendmentIndicator NOT IN(''Y'', ''N'', '''')',NULL, NULL,	NULL, NULL, 'Radio'),
		
		--Format 51 line 20


		(199,'Production Reference Number','Production Reference Number Check',NULL,NULL,'DataQuality Format51 Line20',	1,	'ProductionReferenceNumber = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(200,'Music Title','Music Title Check',NULL,NULL,'DataQuality Format51 Line20',	1,	'MusicTitle = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(201,'Music Item Sequence','Music Item Sequence Check',NULL,NULL,'DataQuality Format51 Line20',	1,	'MusicItemSequence = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(202,'Product Album Promo Title','Product Album Promo Title Check',NULL,NULL,'DataQuality Format51 Line20',	1,	'ProductAlbumPromoTitle = '''' AND MusicOriginClassification IN(''C'',''L'')  AND ProductCatalogueNumber  = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(203,'Product Label','Product Label Check',NULL,NULL,'DataQuality Format51 Line20',	1,	'ProductLabel = '''' AND MusicOriginClassification IN(''C'',''L'')',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(204,'Product Catalogue Number','Product Catalogue Number Check',NULL,NULL,'DataQuality Format51 Line20',	1,	'ProductCatalogueNumber = '''' AND MusicOriginClassification IN(''C'',''L'')',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(205,'Music Duration','Music Duration Check',NULL,NULL,'DataQuality Format51 Line20',	1,	'ISNULL(MusicDuration,0) <= 0',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(206,'Music Usage Classification','Music Usage Classification Check',NULL,NULL,'DataQuality Format51 Line20',	1,	'MusicUsageClassification NOT IN(''B'',''F'',''M'',''S'')',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(207,'Music Origin Classification','Music Origin Classification Check',NULL,NULL,'DataQuality Format51 Line20',	1,	'MusicOriginClassification NOT IN(''C'',''L'',''P'',''R'',''T'',''V'')',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(208,'Prior Approval Indicator','Prior Approval Indicator Check',NULL,NULL,'DataQuality Format51 Line20',	1,	'PriorApprovalIndicator NOT IN(''N'',''Y'')',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(209,'Music Commission Flag','Music Commission Flag Check',NULL,NULL,'DataQuality Format51 Line20',	1,	'MusicCommissionFlag NOT IN(''N'',''Y'')',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(210,'Music Composer/Author','Music Composer/Author Check', NULL,NULL,'DataQuality Format51 Line20',	1,	'MusicComposerAuthor = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(211,'Music Publisher','Music Publisher Check', NULL,NULL,'DataQuality Format51 Line20',	1,	'MusicPublisher = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(212,'Music Performer','Music Performer Check', NULL,NULL,'DataQuality Format51 Line20',	1,	'MusicPerformer = '''' AND MusicOriginClassification = ''C''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(213,'Music Dubbing Flag','Music Dubbing Flag Check', NULL,NULL,'DataQuality Format51 Line20',	1,	'MusicDubbingFlag NOT IN(''Y'',''N'')',	NULL,	NULL,	NULL, NULL, 'Radio'),

		--Format 51 line 99


		(214,'Number Of Records','Number Of Records Check',NULL,NULL,'DataQuality Format51 Line99',	1,	'NumberOfRecords IS NULL',	NULL,	NULL,	NULL, NULL, 'Radio'),

		
			-- Format 51a Line 00

		(215, 'Extract Date','Extract Date Check',NULL,NULL,'DataQuality Format51a Line00',	1,	'ExtractDate IS NULL',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(216, 'Supplier Name','Supplier Name Check',NULL,NULL,'DataQuality Format51a Line00',	1,	'SupplierName = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(217,'Version Number','Version Number Check',NULL,NULL,'DataQuality Format51a Line00',	1,	'VersionNumber = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(218,'SupplierId','SupplierId Check',NULL,NULL,'DataQuality Format51a Line00',	1,	'SupplierId = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(219,'Log Type','Log Type Check',NULL,NULL,'DataQuality Format51a Line00',	1,	'LogType = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),

		--Format 51a line 10


		(220,'Production Number','Production Number Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'ProductionNumber = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
        (221,'Series Indicator','Valid Series Indicator Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'SeriesIndicator NOT IN(''Y'', ''N'', '''')',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(222,'Production/Series Name','Production/Series Name Mandatory Column Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'ProductionName = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(223,'Series Number','Series Number Population Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'SeriesIndicator = ''Y'' AND SeriesNumber = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(224,'Episode Name','Episode Name Population Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'SeriesIndicator = ''Y'' AND EpisodeNumber = '''' AND EpisodeName = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(225,'Episode Number','Episode Number Population Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'SeriesIndicator = ''Y'' AND EpisodeNumber = '''' AND EpisodeName = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(226,'Transmission Station','Transmission Station Population Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'TransmissionStation = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		--(227,'Originating Network Station','Originating Network Station Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'OriginatingNetworkStation = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(228,'Daily Transmission Schedule Date','Daily Transmission Schedule Date Population Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'DailyTransmissionScheduleDate = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(229,'Transmission Time','Transmission Time Population Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'LTRIM(TransmissionTime) = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
	    (230,'Running Time','Running Time Population Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'RunningTime = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(231,'Production Company','Production Company Check', NULL,NULL,'DataQuality Format51a Line10',	1,	'ProductionCompany = '''' AND ProductionSourceIndicator = ''C''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		--(232,'Production Year','Production Year Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'ProductionYear = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(233,'First Transmission Indicator','First Transmission Indicator Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'FirstTransmissionIndicator NOT IN(''Y'', ''N'', '''')',	NULL,	NULL,	NULL, NULL, 'Radio'),
	    --reference rule previously removed as MDS not available.
		(234,'Music Content Indicator','Valid Music Content Indicator Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'ENT.MusicContentIndicator IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.MusicContent MC ON ENT.MusicContentIndicator = MC.Code',	NULL, NULL, 'Radio'),
		(235,'Production Type','Valid Production Type Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'ENT.ProductionType IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.ProductionType PT ON ENT.ProductionType = PT.Code',	NULL, NULL, 'Radio'),
	    (236,'Production Source Indicator','Valid Production Source Indicator Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'ENT.ProductionSourceIndicator IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.ProductionSource PS ON ENT.ProductionSourceIndicator = PS.Code',	NULL, NULL, 'Radio'),
	    (237,'Domestic International Indicator','Valid Domestic International Indicator Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'ENT.DomesticInternationalIndicator IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.DomesticInternationalTransmission DI ON ENT.DomesticInternationalIndicator = DI.Code',	NULL, NULL, 'Radio'),
		 
		-- Reference rule
		(238,'MCPS Blanket Indicator','Valid MCPS Blanket Indicator Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'MCPSBlanketIndicator NOT IN(''Y'', ''N'', '''')',NULL, NULL,	NULL, NULL, 'Radio'),
		(239,'Local Network Indicator','Valid Local Network Indicator Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'ENT.LocalNetworkIndicator IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.LocalNetworkBroadcast LN ON ENT.LocalNetworkIndicator = LN.Code',	NULL, NULL, 'Radio'),
		(240,'Secondary Exploitation Indicator','Secondary Exploitation Indicator Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'SecondaryExploitationIndicator NOT IN(''Y'', ''N'', '''')',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(241,'Territory Code','Valid Territory Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'ENT.TerritoryCode IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.Territory T ON ENT.TerritoryCode = T.Code',	NULL, NULL, 'Radio'),
	   --Column rule
		(242,'Valid Amendment Indicator','Valid Amendment Indicator Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'AmendmentIndicator NOT IN(''Y'', ''N'', '''')',NULL, NULL,	NULL, NULL, 'Radio'),
		
		--Format 51a line 20


		(243,'Production Reference Number','Production Reference Number Check',NULL,NULL,'DataQuality Format51a Line20',	1,	'ProductionReferenceNumber = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(244,'Music Title','Music Title Check',NULL,NULL,'DataQuality Format51a Line20',	1,	'MusicTitle = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(245,'Music Item Sequence','Music Item Sequence Check',NULL,NULL,'DataQuality Format51a Line20',	1,	'MusicItemSequence = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(246,'Product Album Promo Title','Product Album Promo Title Check',NULL,NULL,'DataQuality Format51a Line20',	1,	'ProductAlbumPromoTitle = '''' AND MusicOriginClassification IN(''C'',''L'')  AND ProductCatalogueNumber  = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(247,'Product Label','Product Label Check',NULL,NULL,'DataQuality Format51a Line20',	1,	'ProductLabel = '''' AND MusicOriginClassification IN(''C'',''L'')',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(248,'Product Catalogue Number','Product Catalogue Number Check',NULL,NULL,'DataQuality Format51a Line20',	1,	'ProductCatalogueNumber = '''' AND MusicOriginClassification IN(''C'',''L'')',	NULL,	NULL,	NULL, NULL, 'Radio'),
		--(249,'Product Side Number','Product Side Number Check',NULL,NULL,'DataQuality Format51a Line20',	1,	'ProductSideNumber = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		--(250,'Product Track Number','Product Track Number Check',NULL,NULL,'DataQuality Format51a Line20',	1,	'ProductTrackNumber = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(251,'Music Duration','Music Duration Check',NULL,NULL,'DataQuality Format51a Line20',	1,	'ISNULL(MusicDuration,0) <= 0',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(252,'Music Usage Classification','Music Usage Classification Check',NULL,NULL,'DataQuality Format51a Line20',	1,	'MusicUsageClassification NOT IN(''B'',''F'',''M'',''S'')',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(253,'Music Origin Classification','Music Origin Classification Check',NULL,NULL,'DataQuality Format51a Line20',	1,	'MusicOriginClassification NOT IN(''C'',''L'',''P'',''R'',''T'',''V'')',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(254,'Grand Rights Classification','Grand Rights Classification Check',NULL,NULL,'DataQuality Format51a Line20',	1,	'GrandRightsClassification NOT IN(''B'',''M'',''O'', '''')',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(255,'Prior Approval Indicator','Prior Approval Indicator Check',NULL,NULL,'DataQuality Format51a Line20',	1,	'PriorApprovalIndicator NOT IN(''N'',''Y'')',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(256,'Music Commission Flag','Music Commission Flag Check',NULL,NULL,'DataQuality Format51a Line20',	1,	'MusicCommissionFlag NOT IN(''N'',''Y'')',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(257,'Licensing Status Of Commissioned Music','Licensing Status Of Commissioned Music Check', NULL,NULL,'DataQuality Format51a Line20',	1,	'LicensingStatusofCommissionedMusic NOT IN(''N'',''Y'') AND MusicCommissionFlag = ''Y''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(258,'Music Composer/Author','Music Composer/Author Check', NULL,NULL,'DataQuality Format51a Line20',	1,	'MusicComposerAuthor = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
	    --(259,'Music Arranger Translator Editor etc','Music Arranger Translator Editor etc Check', NULL,NULL,'DataQuality Format51a Line20',	1,	'MusicArrangerTranslatorEditor = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(260,'Music Publisher','Music Publisher Check', NULL,NULL,'DataQuality Format51a Line20',	1,	'MusicPublisher = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(261,'Music Performer','Music Performer Check', NULL,NULL,'DataQuality Format51a Line20',	1,	'MusicPerformer = '''' AND MusicOriginClassification = ''C''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(262,'Music Dubbing Flag','Music Dubbing Flag Check', NULL,NULL,'DataQuality Format51a Line20',	1,	'MusicDubbingFlag NOT IN(''Y'',''N'')',	NULL,	NULL,	NULL, NULL, 'Radio'),

		--Format 51a line 99


		(263,'Number Of Records','Number Of Records Check',NULL,NULL,'DataQuality Format51a Line99',	1,	'NumberOfRecords IS NULL',	NULL,	NULL,	NULL, NULL, 'Radio'),

			--Selector 1 Line 00

		(264, 'Transmission Station','Transmission Station Population Check',NULL,NULL,'DataQuality FormatS1 Line00',	1,	'TransmissionStation = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),

			--Selector 1 Line 10

		(265,'Station Ref','Station Ref Check',NULL,NULL,'DataQuality FormatS1 Line10',	1,	'StationRef = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(266,'Transmission Schedule Date','Transmission Schedule Date Check',NULL,NULL,'DataQuality FormatS1 Line10',	1,	'TransmissionScheduleDate = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
        (267,'Transmission Time','Transmission Time Population Check',NULL,NULL,'DataQuality FormatS1 Line10',	1,	'LTRIM(TransmissionTime) = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
        (268,'Standard Text','Standard Text Check',NULL,NULL,'DataQuality FormatS1 Line10',	1,	'StandardText = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(269,'Page Number','Page Number Check',NULL,NULL,'DataQuality FormatS1 Line10',	1,	'PageNumber = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
        (270,'Selector Version','Selector Version Check',NULL,NULL,'DataQuality FormatS1 Line10',	1,	'SelectorVersion = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		
       
            --Selector 1 Line 20

	    (271,'Artist Name 1','Artist Name 1 Check', NULL,NULL,'DataQuality FormatS1 Line20',	1,	'ArtistName1 = '''' AND ArtistName2 <> ''News''',	NULL,	NULL,	NULL, NULL, 'Radio'),
        (272,'Artist Name 2','Artist Name 2 Check',NULL,NULL,'DataQuality FormatS1 Line20',	1,	'ArtistName2 = '''' AND ArtistName1 = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
        (273,'Music Title','Music Title Check',NULL,NULL,'DataQuality FormatS1 Line20',	1,	'MusicTitle = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
        (274,'Music Duration','Music Duration Check',NULL,NULL,'DataQuality FormatS1 Line20',	1,	'MusicDuration = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		
		

			--Selector 2 Line 00

		--(275, 'Record Type','Record Type Check',NULL,NULL,'DataQuality FormatS2 Line00',	1,	'RecordType = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(276, 'Transmission Station','Transmission Station Population Check',NULL,NULL,'DataQuality FormatS2 Line00',	1,	'TransmissionStation = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),

			--Selector 2 Line 10

		--(277,'Record Type','Record Type Check',NULL,NULL,'DataQuality FormatS2 Line10',	1,	'RecordType = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
        (278,'Transmission Schedule Date','Transmission Schedule Date Check',NULL,NULL,'DataQuality FormatS2 Line10',	1,	'TransmissionScheduleDate = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
        (279,'Transmission Time','Transmission Time Population Check',NULL,NULL,'DataQuality FormatS2 Line10',	1,	'LTRIM(TransmissionTime) = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
       
            --Selector 2 Line 20

	    (280,'Music Title','Music Title Check', NULL,NULL,'DataQuality FormatS2 Line20',	1,	'MusicTitle= ''''',   NULL,	NULL,	NULL, NULL, 'Radio'),
        (281,'Music Performer','Music Performer Check', NULL,NULL,'DataQuality FormatS2 Line20',	1,	'MusicPerformer = '''' AND MusicComposer = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(282,'Music Composer','Music Composer Check', NULL,NULL,'DataQuality FormatS2 Line20',	1,	'MusicComposer = '''' AND MusicPerformer = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
        (283,'Music Duration','Music Duration Check',NULL,NULL,'DataQuality FormatS2 Line20',	1,	'MusicDuration= ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(284,'Music Type','Music Type Check',NULL,NULL,'DataQuality FormatS2 Line20',	1,	'MusicType= ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
     	(285,'Music Duration','Music Duration Check',NULL,NULL,'DataQuality FormatS2 Line20',	1,	'MusicDuration = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),

		--Selector 2 Line 99


		--(286,'Record Type','Record Type Check',NULL,NULL,'DataQuality FormatS2 Line99',	1,	'RecordType = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(287,'Number Of Records','Number Of Records Check',NULL,NULL,'DataQuality FormatS2 Line99',	1,	'NumberOfRecords IS NULL',	NULL,	NULL,	NULL, NULL, 'Radio')

	



	) AS Src
	(
	   [ScreenId]
      ,[ScreenName]
      ,[ScreenDescription]
      ,[ProjectId]
      ,[EnvironmentId]
      ,[ObjectId]
      ,[ScreenSeverityID]
      ,[ScreenSQL]
	  ,[ReportSQL]
      ,[ScreenReferenceSQL]
      ,[ReportTableName]
	  ,[CleanseSQL]
	  ,[Domain]
	)
	ON Tgt.[ScreenId] = Src.[ScreenId]

-- Update matched rows
WHEN MATCHED THEN
UPDATE 
   SET [ScreenName] = src.ScreenName
      ,[ScreenDescription] = src.ScreenDescription
      ,[ProjectId] = src.ProjectId
      ,[EnvironmentId] = src.EnvironmentId
      ,[ObjectId] = src.ObjectId
      ,[ScreenSeverityID] = src.ScreenSeverityID
      ,[ScreenSQL] = src.ScreenSQL
      ,[ScreenReferenceSQL] = src.ScreenReferenceSQL
      ,[ReportSQL] = src.ReportSQL
      ,[ReportTableName] = src.ReportTableName
	  ,[CleanseSQL] = Src.[CleanseSQL]
	  ,[Domain] = Src.[Domain]

-- Insert new rows
WHEN NOT MATCHED BY TARGET THEN
	INSERT
		(
	   [ScreenId]
      ,[ScreenName]
      ,[ScreenDescription]
      ,[ProjectId]
      ,[EnvironmentId]
      ,[ObjectId]
      ,[ScreenSeverityID]
      ,[ScreenSQL]
      ,[ScreenReferenceSQL]
      ,[ReportSQL]
      ,[ReportTableName]
	  ,[CleanseSQL]
	  ,[Domain]
		)
	VALUES
		(
		   src.[ScreenId]
		  ,src.[ScreenName]
		  ,src.[ScreenDescription]
		  ,src.[ProjectId]
		  ,src.[EnvironmentId]
		  ,src.[ObjectId]
		  ,src.[ScreenSeverityID]
		  ,src.[ScreenSQL]
		  ,src.[ScreenReferenceSQL]
		  ,src.[ReportSQL]
		  ,src.[ReportTableName]
		  ,src.[CleanseSQL]
		  ,src.[Domain]
		);

-- Delete rows that are in the target but not the source
--WHEN NOT MATCHED BY SOURCE THEN
--	DELETE;

SET IDENTITY_INSERT DataQuality.Screen OFF;
--SET IDENTITY_INSERT DataQuality.ScreenSeverity ON 

MERGE INTO DataQuality.ScreenSeverity AS Tgt
USING 
	(VALUES
		(1,'Low','Low'),
		(2,'Medium','Medium'),
		(3,'High','High')				     	
	) AS Src
	(
		ScreenSeverityID, 
		SeverityName, 
		SeverityCategory
	)
	ON Tgt.[ScreenSeverityID] = Src.[ScreenSeverityID]

-- Update matched rows
WHEN MATCHED THEN
UPDATE 
   SET [SeverityName] = src.SeverityName
      ,[SeverityCategory] = src.SeverityCategory

-- Insert new rows
WHEN NOT MATCHED BY TARGET THEN
	INSERT
		(
		ScreenSeverityID, 
		SeverityName, 
		SeverityCategory
		)
	VALUES
		(
			src.ScreenSeverityID, 
			src.SeverityName, 
			src.SeverityCategory
		);
-- Delete rows that are in the target but not the source
--WHEN NOT MATCHED BY SOURCE THEN
--	DELETE;

--SET IDENTITY_INSERT  DataQuality.ScreenSeverity  OFF;

--SET IDENTITY_INSERT DataQuality.[CleanseRule] ON 

MERGE INTO [DataQuality].[StandardiseRule] AS Tgt
USING 
	(VALUES
		 (1,1,'Name','Contains','Central','ReplaceWith','Middle',1)
		,(2,2,'Name','EndsWith','Cty','ReplaceWith','City',1)

		
	) AS Src
	(
	   [StandardiseRuleId]
      ,[DataQualityRuleId]
      ,[ColumnName]
      ,[PatternMatchType]
      ,[Criteria]
      ,[StandardiseType]
      ,[StandardiseTypeValue]
      ,[EntityTypeID]
	)
	ON Tgt.[StandardiseRuleId] = Src.[StandardiseRuleId]

-- Update matched rows
WHEN MATCHED THEN
UPDATE 
   SET [StandardiseRuleId] = src.[StandardiseRuleId]
      ,[DataQualityRuleId] = src.[DataQualityRuleId]
      ,[ColumnName] = src.[ColumnName]
      ,[PatternMatchType] = src.[PatternMatchType]
      ,[Criteria] = src.[Criteria]
      ,[StandardiseType] = src.[StandardiseType]
      ,[StandardiseTypeValue] = src.[StandardiseTypeValue]
      ,[EntityTypeID] = src.[EntityTypeID]
    

-- Insert new rows
WHEN NOT MATCHED BY TARGET THEN
	INSERT
		(
	   [StandardiseRuleId]
      ,[DataQualityRuleId]
      ,[ColumnName]
      ,[PatternMatchType]
      ,[Criteria]
      ,[StandardiseType]
      ,[StandardiseTypeValue]
      ,[EntityTypeID]
		)
	VALUES
		(
		   src.[StandardiseRuleId]
		  ,src.[DataQualityRuleId]
		  ,src.[ColumnName]
		  ,src.[PatternMatchType]
		  ,src.[Criteria]
		  ,src.[StandardiseType]
		  ,src.[StandardiseTypeValue]
		  ,src.[EntityTypeID]

		);

-- Delete rows that are in the target but not the source
--WHEN NOT MATCHED BY SOURCE THEN
--	DELETE;

	--SET IDENTITY_INSERT  DataQuality.[CleanseRule]  OFF;

GO

GO
