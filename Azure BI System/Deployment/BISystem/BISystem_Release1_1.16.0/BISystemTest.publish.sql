/*
Deployment script for BISystemUAT

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "BISystemUAT"
:setvar DefaultFilePrefix "BISystemUAT"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS OFF,
                ANSI_PADDING OFF,
                CONCAT_NULL_YIELDS_NULL OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO


PRINT N'Altering [Control].[ObtainActivePartitionKeys]...';


GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROCEDURE [Control].[ObtainActivePartitionKeys] (@SourceFileType varchar(25))
AS
BEGIN
	--SET NOCOUNT ON

	SELECT PartitionKey,
       ISNULL(stuff( (SELECT ','+cast(OriginalFileId as varchar(10))
               FROM [Control].[SourceFile] SF2
               WHERE		(SF2.PartitionKey = SF.PartitionKey
							AND MDSDate is not null
							AND	IsToBeLoaded = 1
							AND	coalesce(IsLoaded,0) = 0) OR
							(SF2.PartitionKey = SF.PartitionKey
							AND MDSDate is not null
							AND	coalesce(IsToBeLoaded,0) = 1
							AND	coalesce(IsLoaded,0) = 1)					 
               ORDER BY OriginalFileId
               FOR XML PATH(''), TYPE).value('.', 'varchar(max)')
            ,1,1,''),'0') SourceFileIDs
      FROM [Control].[SourceFile] SF INNER JOIN
			[Control].[SourceFileType] SFT ON SF.SourceFileTypeID = SFT.SourceFileTypeID
	 WHERE (Code = 'Online'
			AND MDSDate is not null
			AND	IsToBeLoaded = 1
			AND	coalesce(IsLoaded,0) = 0
			AND SF.OriginalFileId >0 ) OR
			(Code = 'Online'
			AND MDSDate is not null
			AND	coalesce(IsToBeLoaded,0)  = 0
			AND	coalesce(IsLoaded,0) = 1
			AND SF.OriginalFileId >0 )
	 GROUP BY PartitionKey
		
END

PRINT N'Altering [Control].[ObtainSourceFileIdForProcess]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
-- =============================================
-- Author:		Adatis
-- Create date: 15/12/2016
-- Description:	Gets SourceFileId to process at various stages
-- =============================================
ALTER PROCEDURE [Control].[ObtainSourceFileIdForProcess]
	@ProcessStream		VARCHAR(50),
	@ApplicationCode	VARCHAR(80)

AS
BEGIN

IF (@ProcessStream = 'EXT2STG')

BEGIN
			 
			IF EXISTS 
			(SELECT TOP (1) SourceFileId 
			FROM [Control].SourceFile SF
			INNER JOIN [Control].SourceFileType sft on sft.SourceFileTypeId = sf.SourceFileTypeId
			LEFT JOIN [Control].[Application] a on sf.ApplicationId = a.[ApplicationId]
			WHERE [FileExtractedDate] is not null
			AND [BlobUploadDate] is  not null
			AND StageDate is null
			AND a.[Code] = @ApplicationCode
			)
			
			BEGIN
			
			(SELECT TOP (1) SourceFileId 
			FROM [Control].SourceFile SF
			INNER JOIN Control.SourceFileType sft on sft.SourceFileTypeId = sf.SourceFileTypeId
			LEFT JOIN [Control].[Application] a on sf.ApplicationId = a.[ApplicationId]
			WHERE [FileExtractedDate] is not null
			AND [BlobUploadDate] is  not null
			AND StageDate is null
			AND a.[Code] = @ApplicationCode
			)
			END
			
			ELSE SELECT 0
END

IF (@ProcessStream = 'STG2CLN')

BEGIN
			 IF EXISTS
			 (SELECT TOP (1) SourceFileId 
			 FROM [Control].SourceFile SF
			 INNER JOIN [Control].SourceFileType sft on sft.SourceFileTypeId = sf.SourceFileTypeId
			 LEFT JOIN [Control].[Application] a on sf.ApplicationId = a.[ApplicationId]
			 WHERE [FileExtractedDate] is not null
			 AND [BlobUploadDate] is  not null
			 AND StageDate is not null
			 AND [CleanDate] is null
			AND a.[Code] = @ApplicationCode
			 )
			 
			 BEGIN
			 
			 
			 (SELECT TOP (1) SourceFileId 
			 FROM [Control].SourceFile SF
			 INNER JOIN [Control].SourceFileType sft on sft.SourceFileTypeId = sf.SourceFileTypeId
			 LEFT JOIN [Control].[Application] a on sf.ApplicationId = a.[ApplicationId]
			 WHERE [FileExtractedDate] is not null
			 AND [BlobUploadDate] is  not null
			 AND StageDate is not null
			 AND [CleanDate] is null
			AND a.[Code] = @ApplicationCode
			 )
			 END
			 
			 ELSE SELECT 0
END

IF (@ProcessStream = 'CLN2WAR') 

BEGIN
			IF EXISTS
			(SELECT TOP (1) SourceFileId 
			FROM [Control].SourceFile SF
			INNER JOIN [Control].SourceFileType sft on sft.SourceFileTypeId = sf.SourceFileTypeId
			LEFT JOIN [Control].[Application] a on sf.ApplicationId = a.[ApplicationId]
			WHERE [FileExtractedDate] is not null
			AND [BlobUploadDate] is  not null
			AND StageDate is not null
			AND CleanDate is not null
			AND WarehouseDate is null
			AND a.[Code] = @ApplicationCode
			)
			
			BEGIN
			
			
			(SELECT TOP (1) SourceFileId 
			FROM [Control].SourceFile SF
			INNER JOIN [Control].SourceFileType sft on sft.SourceFileTypeId = sf.SourceFileTypeId
			LEFT JOIN [Control].[Application] a on sf.ApplicationId = a.[ApplicationId]
			WHERE [FileExtractedDate] is not null
			AND [BlobUploadDate] is  not null
			AND StageDate is not null
			AND CleanDate is not null
			AND WarehouseDate is null
			AND a.[Code] = @ApplicationCode
			)
			END
			ELSE SELECT 0

END

IF (@ProcessStream = 'STG2DMT') 

BEGIN
			IF EXISTS
			(SELECT TOP (1) SourceFileId 
			FROM [Control].SourceFile SF
			INNER JOIN [Control].SourceFileType sft on sft.SourceFileTypeId = sf.SourceFileTypeId
			LEFT JOIN [Control].[Application] a on sf.ApplicationId = a.[ApplicationId]
			WHERE [FileExtractedDate] is not null
			AND [BlobUploadDate] is  not null
			AND StageDate is not null
			AND WarehouseDate is null
			AND a.[Code] = @ApplicationCode
			)
			
			BEGIN
			
			
			(SELECT TOP (1) SourceFileId 
			FROM [Control].SourceFile SF
			INNER JOIN [Control].SourceFileType sft on sft.SourceFileTypeId = sf.SourceFileTypeId
			LEFT JOIN [Control].[Application] a on sf.ApplicationId = a.[ApplicationId]
			WHERE [FileExtractedDate] is not null
			AND [BlobUploadDate] is  not null
			AND StageDate is not null
			AND WarehouseDate is null
			AND a.[Code] = @ApplicationCode
			)
			END
			ELSE SELECT 0

END

IF (@ProcessStream = 'CLN2TRN') 

BEGIN
			IF EXISTS
			(SELECT TOP (1) SourceFileId 
			FROM [Control].SourceFile SF
			INNER JOIN [Control].SourceFileType sft on sft.SourceFileTypeId = sf.SourceFileTypeId
			LEFT JOIN [Control].[Application] a on sf.ApplicationId = a.[ApplicationId]
			WHERE [FileExtractedDate] is not null
			AND [BlobUploadDate] is  not null
			AND StageDate is not null
			AND CleanDate is not null
			AND TransformDate is null
			AND a.[Code] = @ApplicationCode
			)
			
			BEGIN
			
			
			(SELECT TOP (1) SourceFileId 
			FROM [Control].SourceFile SF
			INNER JOIN [Control].SourceFileType sft on sft.SourceFileTypeId = sf.SourceFileTypeId
			LEFT JOIN [Control].[Application] a on sf.ApplicationId = a.[ApplicationId]
			WHERE [FileExtractedDate] is not null
			AND [BlobUploadDate] is  not null
			AND StageDate is not null
			AND CleanDate is not null
			AND TransformDate is null
			AND a.[Code] = @ApplicationCode
			)
			END
			ELSE SELECT 0

END

IF (@ProcessStream = 'TRN2WAR') 

BEGIN
			IF EXISTS
			(SELECT TOP (1) SourceFileId 
			FROM [Control].SourceFile SF
			INNER JOIN [Control].SourceFileType sft on sft.SourceFileTypeId = sf.SourceFileTypeId
			LEFT JOIN [Control].[Application] a on sf.ApplicationId = a.[ApplicationId]
			WHERE [FileExtractedDate] is not null
			AND [BlobUploadDate] is  not null
			AND StageDate is not null
			AND CleanDate is not null
			AND TransformDate is not null
			AND WarehouseDate is null
			AND a.[Code] = @ApplicationCode
			)
			
			BEGIN
			
			
			(SELECT TOP (1) SourceFileId 
			FROM [Control].SourceFile SF
			INNER JOIN [Control].SourceFileType sft on sft.SourceFileTypeId = sf.SourceFileTypeId
			LEFT JOIN [Control].[Application] a on sf.ApplicationId = a.[ApplicationId]
			WHERE [FileExtractedDate] is not null
			AND [BlobUploadDate] is  not null
			AND StageDate is not null
			AND CleanDate is not null
			AND TransformDate is not null
			AND WarehouseDate is null
			AND a.[Code] = @ApplicationCode
			)
			END
			ELSE SELECT 0

END

IF (@ProcessStream = 'WAR2OLP') 

BEGIN
			IF EXISTS
			(SELECT TOP (1) SourceFileId 
			FROM [Control].SourceFile SF
			INNER JOIN [Control].SourceFileType sft on sft.SourceFileTypeId = sf.SourceFileTypeId
			LEFT JOIN [Control].[Application] a on sf.ApplicationId = a.[ApplicationId]
			WHERE [FileExtractedDate] is not null
			AND [BlobUploadDate] is  not null
			AND StageDate is not null
			AND CleanDate is not null
			AND TransformDate is not null
			AND WarehouseDate is not null
			AND OLAPDate is null
			AND a.[Code] = @ApplicationCode
			)
			
			BEGIN
			
			
			(SELECT TOP (1) SourceFileId 
			FROM [Control].SourceFile SF
			INNER JOIN [Control].SourceFileType sft on sft.SourceFileTypeId = sf.SourceFileTypeId
			LEFT JOIN [Control].[Application] a on sf.ApplicationId = a.[ApplicationId]
			WHERE [FileExtractedDate] is not null
			AND [BlobUploadDate] is  not null
			AND StageDate is not null
			AND CleanDate is not null
			AND TransformDate is not null
			AND WarehouseDate is not null
			AND OLAPDate is null
			AND a.[Code] = @ApplicationCode
			)
			END
			ELSE SELECT 0

END
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [Control].[UpdateSourceFile]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
-- =============================================
-- Author:		Adatis
-- Create date: 18/03/2013
-- Description:	Updates Source File milestone dates
-- =============================================
ALTER PROCEDURE [Control].[UpdateSourceFile]
	@SourceFileId	INT, 
	@Stream			VARCHAR(10),
	@ParentLoadId	INT = NULL
AS
BEGIN
	SET NOCOUNT ON;

	IF @Stream = 'SRC2FILE'
	BEGIN
	    UPDATE Control.SourceFile
		   SET [FileExtractedDate]= GETDATE(),
	           [FileExtractedParentLoadId]= @ParentLoadId,
			   [ModifiedDate] = GETDATE()
	    WHERE SourceFileId = @SourceFileId
	END
	
	IF @Stream = 'FILE2EXT'
	BEGIN
		UPDATE Control.SourceFile
		SET	BlobUploadDate = GETDATE() ,
		[ModifiedDate] = GETDATE()
		WHERE SourceFileId = @SourceFileId
	END
	
	IF @Stream in ('EXT2STG', 'SRC2STG')
	BEGIN
		UPDATE Control.SourceFile
		SET	StageDate = GETDATE()
		, [StageParentLoadId] = @ParentLoadId,
		[ModifiedDate] = GETDATE()
		WHERE SourceFileId = @SourceFileId
	END
	
	IF @Stream = 'STG2CLN'
	BEGIN
		IF @ParentLoadId IS NOT NULL
		BEGIN
			UPDATE Control.SourceFile
			SET	CleanDate = GETDATE()
			, [CleanParentLoadId] = @ParentLoadId,
			[ModifiedDate] = GETDATE()
			WHERE SourceFileId = @SourceFileId
		END
		ELSE
		BEGIN
			UPDATE Control.SourceFile
			SET	CleanDate = GETDATE()
			WHERE SourceFileId = @SourceFileId
		END
	END	
		
	IF @Stream = 'CLN2WAR'
	BEGIN
		UPDATE Control.SourceFile
		SET	WarehouseDate = GETDATE(),
		[ModifiedDate] = GETDATE()
		WHERE SourceFileId = @SourceFileId
	END;

	IF @Stream = 'CLN2TRN'
	BEGIN
		UPDATE Control.SourceFile
		SET	TransformDate = GETDATE(),
		[TransformParentLoadId] = @ParentLoadId,
		[ModifiedDate] = GETDATE()
		WHERE SourceFileId = @SourceFileId
	END;

	IF @Stream = 'STG2TRN'
	BEGIN
		UPDATE Control.SourceFile
		SET	TransformDate = GETDATE(),
		[TransformParentLoadId] = @ParentLoadId,
		[ModifiedDate] = GETDATE()
		WHERE SourceFileId = @SourceFileId
	END;

	IF @Stream in ('TRN2WAR', 'STG2DMT')
	BEGIN
		UPDATE Control.SourceFile
		SET	WarehouseDate = GETDATE(),
		[WarehouseParentLoadId] = @ParentLoadId,
		[ModifiedDate] = GETDATE()
		WHERE SourceFileId = @SourceFileId
	END;

	IF @Stream = 'SRC2STG'
	BEGIN
		UPDATE Control.SourceFile
		SET	StageDate = GETDATE()
		,UnloadFile = 0
		,PurgeFromArchive = 0
		,FileUnloadedDate = NULL
		,FileUnloaded = 0
		,ArchivePurgedDate = NULL
		,ArchivePurged = 0
		WHERE SourceFileId = @SourceFileId
	END

	IF @Stream in ('CLN2MDS', 'STG2MDS')
	BEGIN
		UPDATE Control.SourceFile
		SET	MDSDate = GETDATE()
		WHERE SourceFileId = @SourceFileId
	END

	IF @Stream in ('MDS2CLN', 'MDS2STG')
	BEGIN
		UPDATE Control.SourceFile
		SET	MDSDate = GETDATE()
		WHERE SourceFileId = @SourceFileId
	END


	IF @Stream = 'CLN2WH'
	BEGIN
		UPDATE Control.SourceFile
		SET	WarehouseDate = GETDATE()
		,FileUnloaded = 0
		,UnloadFile = 0
		,IsLoaded = 1
		WHERE SourceFileId = @SourceFileId
	END


	IF @Stream = 'ANA2ARC'
	BEGIN
		UPDATE Control.SourceFile
		SET	WarehouseDate = GETDATE()
		,PurgeFromArchive = 0
		,ArchivePurged = 0
		WHERE SourceFileId = @SourceFileId
	END

	IF @Stream = 'STG2SCR'
	BEGIN
		UPDATE Control.SourceFile
		SET	ScrubDate = GETDATE()
		WHERE SourceFileId = @SourceFileId
	END

	IF @Stream = 'SCR2CLN'
	BEGIN
		UPDATE Control.SourceFile
		SET	CleanDate = GETDATE()
		WHERE SourceFileId = @SourceFileId
	END

	IF @Stream = 'CLN2OLP'
	BEGIN
		UPDATE Control.SourceFile
		SET	OLAPDate = GETDATE()
		,FileUnloaded = 0
		,UnloadFile = 0
		WHERE SourceFileId = @SourceFileId
	END

	IF @Stream = 'WAR2TAB'
	BEGIN
		UPDATE Control.SourceFile
		SET	OLAPDate = GETDATE()
		WHERE SourceFileId = @SourceFileId
	END


END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [Control].[ObtainBulkEntityId]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
ALTER PROCEDURE [Control].[ObtainBulkEntityId] 
	
	@SourceFileList varchar(4000) ,
	@EntityName VARCHAR(50),
	@LoadId int = -1,
	@ParentEntityId INT = NULL   

 AS
 BEGIN
	SET NOCOUNT ON;
--DECLARE	@EntityName VARCHAR(50) = 'OrcUsageComponent'
--DECLARE	@LoadId int = -1
--DECLARE	@ParentEntityId INT = NULL   
--DECLARE @SourceFileList varchar(50) = '2,3,4,5,6,7,8'
--DECLARE @SourceFile AS INT 
--DECLARE C Cursor FOR SELECT VALUE from [Control].[SplitCSV] (@SourceFileList)

DECLARE @SourceFile AS INT 
DECLARE @tblEntityId AS TABLE (EntityId INT)
DECLARE C Cursor FOR SELECT VALUE from [Control].[SpiltCSV] (@SourceFileList)
DECLARE @SourceFileIdNew AS INT
DECLARE @EntityId AS INT
OPEN C

FETCH NEXT FROM C into @SourceFile

WHILE @@FETCH_STATUS = 0
BEGIN
--PRINT @SourceFile

SELECT @SourceFileIdNew = SourceFileId FROM Control.SourceFile WHERE OriginalFileId = @SourceFile

INSERT INTO  @tblEntityId EXEC [Control].[ObtainEntityId] @SourceFileIdNew, @EntityName,@LoadId,@ParentEntityId

FETCH NEXT FROM C INTO @SourceFile


END
CLOSE C

Select * FROM @tblEntityId

END

--DELETE FROM Control.Entity WHERE EntityId IN (5004, 5005)
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO






PRINT N'Creating [Control].[AssignPartitionKey]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO

CREATE PROCEDURE [Control].[AssignPartitionKey]

AS
BEGIN

DECLARE @PartitionKey AS INT  = NEXT VALUE FOR [Control].[PartitionKey] 
UPDATE Control.SourceFile
SET [PartitionKey] = @PartitionKey
WHERE
(IsLoaded = 'False' OR IsLoaded IS NULL)
AND IsToBeLoaded = 'True'
AND [PartitionKey] IS NULL
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[SourceFilesToLoad]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
-- =============================================
-- Author:		Adatis - PRS
-- Create date: 08/09/2017
-- Description:	Gets SourceFileId To Load in the Online Rep Transational Reporting Process
-- =============================================
CREATE PROCEDURE [Control].[SourceFilesToLoad]
	@TotalNoOfUsesTreshold BIGINT 
AS
BEGIN
	SET NOCOUNT ON;

WITH RunningTotals AS (
	SELECT 
		SUM(TotalNoOfUses) OVER (ORDER BY SourceFileId) AS RT,
		SourceFileId, OriginalFileId, 
		TotalNoOfUses,
		ROW_NUMBER() OVER (ORDER BY SourceFileId) RowNumber
	FROM Control.SourceFile SF
		INNER JOIN Control.SourceFileType	SFT
	ON SF.SourceFileTypeId = SFT.SourceFileTypeId
	WHERE  IsToBeLoaded = 1 AND SFT.Code ='Online' AND (IsLoaded = 0 OR IsLoaded IS NULL)
	--OR OriginalFileId IN (55572,55573)
)
SELECT OriginalFileId AS SourceFileId, RT, SourceFileId AS BISystemFileId FROM RunningTotals
WHERE RT < @TotalNoOfUsesTreshold OR RowNumber = 1
ORDER BY SourceFileId
 
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
EXECUTE sp_refreshsqlmodule N'[Audit].[InsertSourceFileProcessStream]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [Audit].[UpdateSourceFileProcessStream]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
EXECUTE sp_refreshsqlmodule N'[Audit].[UpdateSourceFileProcessStream]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [Control].[CheckSourceFilesIfStagedInClean]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
EXECUTE sp_refreshsqlmodule N'[Control].[CheckSourceFilesIfStagedInClean]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [Control].[ClearSourceFileBySource]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
EXECUTE sp_refreshsqlmodule N'[Control].[ClearSourceFileBySource]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [Control].[InsertSourceFile]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
EXECUTE sp_refreshsqlmodule N'[Control].[InsertSourceFile]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [Control].[ObtainActivePartitionKeys]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
EXECUTE sp_refreshsqlmodule N'[Control].[ObtainActivePartitionKeys]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [Control].[ObtainChangedPartitionKeys]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
EXECUTE sp_refreshsqlmodule N'[Control].[ObtainChangedPartitionKeys]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [Control].[ObtainDistributionCodeFromSourceFile]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
EXECUTE sp_refreshsqlmodule N'[Control].[ObtainDistributionCodeFromSourceFile]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [Control].[ObtainDistributionsReadyToProcess]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
EXECUTE sp_refreshsqlmodule N'[Control].[ObtainDistributionsReadyToProcess]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [Control].[ObtainEntityId]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
EXECUTE sp_refreshsqlmodule N'[Control].[ObtainEntityId]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [Control].[ObtainFilesToUnload]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
EXECUTE sp_refreshsqlmodule N'[Control].[ObtainFilesToUnload]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [Control].[ObtainFilesToUnloadDataRetention]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
EXECUTE sp_refreshsqlmodule N'[Control].[ObtainFilesToUnloadDataRetention]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [Control].[ObtainPRBISourceFileId]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
EXECUTE sp_refreshsqlmodule N'[Control].[ObtainPRBISourceFileId]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [Control].[ObtainSourceFileId]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
EXECUTE sp_refreshsqlmodule N'[Control].[ObtainSourceFileId]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [Control].[ObtainSourceFileIdForBlobUpload]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
EXECUTE sp_refreshsqlmodule N'[Control].[ObtainSourceFileIdForBlobUpload]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [Control].[ObtainUnprocessedSourceFiles]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
EXECUTE sp_refreshsqlmodule N'[Control].[ObtainUnprocessedSourceFiles]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [Control].[ProcessSourceFile]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
EXECUTE sp_refreshsqlmodule N'[Control].[ProcessSourceFile]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [Control].[ResetSourceFileByName]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
EXECUTE sp_refreshsqlmodule N'[Control].[ResetSourceFileByName]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
SET IDENTITY_INSERT [Control].[LoadStatusType] OFF;


SET IDENTITY_INSERT [Control].[ProcessStream] ON;
GO
MERGE INTO [Control].[ProcessStream] AS Tgt
USING 
	(VALUES
		(1,'EXT2STG',	'Blob External To Stage', ''	,5),
		(2,'STG2CLN',	'Stage To Clean', '' ,8),
		(3,'CLN2TRN',	'Clean To Transform','',12),
		(4,'TRN2WAR',	'Transform To Warehouse','',18),
		(5,'REF2TRN',	'Reference To Transform','',14),
		(6,'CLN2WAR',	'Clean To Warehouse','',24),
		(7,'TRN2TRN',	'Transform To Transform','',22),
		(8,'TRN2REJ',	'Transform To Reject','',21),
		(9,'SRC2FILE',	'Source To File Extract','',3),
		(10,'STG2TRN',	'Stage to Transform','',16),
		(11,'FILE2EXT',	'File Extract To External','',1),
		(12,'SRC2STG',	'Source System to Staging','',10),
		(13,'WAR2TAB',	'Warehouse To Tabular','',28),
		(14,'MDS2STG',	'MDS Data to Staging','',14),	
		(15,'STG2MDS',	'Staging to MDS','',20),
		(16,'STG2DMT',	'Staging to DataMart','',19),
		(17,'DMT2EXT',	'DataMart to External','',27)
	) AS Src
	(	
		[ProcessStreamId],
		[Code],
		[Name],
		[Description],
		[ProcessStreamOrder]
	)
	ON Tgt.[ProcessStreamId] = Src.[ProcessStreamId]

-- Update matched rows
WHEN MATCHED THEN
	UPDATE
	SET
		 [Code]					= Src.[Code]
		,[Name]					= src.[Name]
		,[Description]			= src.[Description]
		,[ProcessStreamOrder]	= src.[ProcessStreamOrder]

-- Insert new rows
WHEN NOT MATCHED BY TARGET THEN
	INSERT
		(
			[ProcessStreamId],
			[Code],
			[Name],
			[Description],
			[ProcessStreamOrder]
		)
	VALUES
		(
			Src.[ProcessStreamId],
			Src.[Code],
			Src.[Name],
			src.[Description],
			src.[ProcessStreamOrder]
		)

-- Delete rows that are in the target but not the source
WHEN NOT MATCHED BY SOURCE THEN
	DELETE;
GO
SET IDENTITY_INSERT [Control].[ProcessStream] OFF;

SET IDENTITY_INSERT [Control].[SourceFileType] ON;
GO
MERGE INTO [Control].[SourceFileType] AS Tgt
USING 
	(VALUES
		(1,		'DX'		,'DataXchange Distribution Context'		,'DX Partition'	,'Out'	,0	,''			),
		(2,		'UNK'		,'UNKNOWN'								,'Unknown'		,'OUT'	,0	,'UNKNOWN'	),
		(3,		'SAS'		,'SASOWN'								,'SASOWN'		,'OUT'	,0	,''			),
		(4,		'PRBI'		,'PRBI oracle data warehouse'			,'PRBI'			,'OUT'	,0	,''			),
		(5,		'CODA'		,'CODA Data Warehouse'					,'CODA'			,'OUT'	,0	,''			),
		(6,		'TM1'		,'TM1 Planning - Forecasts Budgets'		,'TM1'			,'OUT'	,0	,''			),
		(7,		'MDS'		,'MDS2016 File Load'					,'MDS'			,'OUT'	,0	,''			),
		(8,		'Online'	,'REP Transactional Files'				,'Online'		,'OUT'	,0	,''			)
		) AS Src
	(
		[SourceFileTypeId],	
		[Code],
		[Description],
		[Name],
		[Direction],
		[32BitStageRequired],
		[Collection]
	)
	ON Tgt.[SourceFileTypeId] = Src.[SourceFileTypeId]

-- Update matched rows
WHEN MATCHED THEN
	UPDATE
	SET	
		[Code]					= Src.[Code],
		[Description]			= Src.[Description],
		[Name]					= Src.[Name],
		[Direction]				= Src.[Direction],
		[32BitStageRequired]	= src.[32BitStageRequired],
		[Collection]			= src.[Collection]

-- Insert new rows
WHEN NOT MATCHED BY TARGET THEN
	INSERT
		(
			[SourceFileTypeId],	
			[Code],
			[Description],
			[Name],
			[Direction],
			[32BitStageRequired],
			[Collection]          
		)
	VALUES
		(
			SRC.[SourceFileTypeId],	
			SRC.[Code],
			SRC.[Description],
			SRC.[Name],
			SRC.[Direction],
			SRC.[32BitStageRequired],
			SRC.[Collection]
		)

-- Delete rows that are in the target but not the source
WHEN NOT MATCHED BY SOURCE THEN
	DELETE;
GO
SET IDENTITY_INSERT [Control].[SourceFileType] OFF;

SET IDENTITY_INSERT [Control].[Application] ON;
GO
MERGE INTO [Control].[Application] AS Tgt
USING 
	(VALUES
	-- 	[ApplicationId],[Name],												[Code],			[Description],													  [Priority],	[UpTimeHours],	[ETLType],	[WarehouseType],[Prefix],	[CreatedDate]
		(1,				'Data Experience Online Statements',				'DEOS',			'Data Experience Solution',												null,	 null,			null,		'Azure DW ',	'DX',		SYSDATETIME()),
		(2,				'BroadcastDataQuality',								'BRDDQ',		'DataQuality Solution for AV',											null,	 null,			null,		'DataMart',		'DQ',		SYSDATETIME()),
		(3,				'Broadcast Play to Pay',							'BRDPTP',		'Play to Pay Solution for Broadcast 1 and 2',							null,	 null,			null,		'Azure DW',		'BR',		SYSDATETIME()),
		(4,				'Finance DataMart',									'FDM',			'Finance DataMart for CODA and TM1',									null,	 null,			null,		'DataMart',		'FDM',		SYSDATETIME()),
		(5,				'REP Transactional',								'REPTXN',		'BI DSP Invoice Approval Archive Reporting Finance & Membershp',		null,	 null,			null,		'DataMart',		'OL',		SYSDATETIME()),
		(6,				'ETL System',										'ETLDq',		'ETL DQ System - Rep Load File Analysis Files',							null,	 null,			null,		'DataMart',		'ETLSystem',SYSDATETIME()),
		(7,				'CashOut Reconciliation System',					'CORS',			'CashOut Reconciliation System',										null,	 null,			null,		'Azure DW',		'CORS',		SYSDATETIME()),
		(8,				'Data Experience Online Statements SAS Data Fixes',	'DEOSSAS',		'Data Experience SASA Data Fixes Solution',								null,	 null,			null,		'Azure DW ',	'SAS',		SYSDATETIME()),
		(9,				'BITurqoiseSystem',									'BITS',			'Project Turquoise Joint Ventures CODA - File to Azure to Link Tables',	null,	 null,			null,		'DataMart',		'BITS',		SYSDATETIME()),
		(10,			'DotMailer',										'DOTMAILER',	'DotMailer API Application',											null,	 null,			null,		'DataMart',		'DOTMAILER',SYSDATETIME()),
		(11,			'ICE Files',										'ICEF',			'Solution for loading ICE files',										null,	 null,			null,		'Azure DW ',	'ICE',		SYSDATETIME()),
		(12,			'PreDistribution Play to Pay',						'PDPTP',		'Play to Pay Solution for Pre Distribution',							null,	 null,			null,		'Azure DW',		'PDPTP',	SYSDATETIME()),
		(13,			'Spotify Chart Daily 200',							'SPDCH200',		'Spotify daily chart top 200 datadownload',								null,	 null,			null,		'DataMart',		'SPDCH200',	SYSDATETIME()),
		(14,			'International Financial Reporting - IKFD',		    'IKFD',		    'International Financial Reporting - IKFD',								null,	 null,			null,		'DataMart',		'IKFD',  	SYSDATETIME())

	) AS Src
	(
		[ApplicationId],
		[Name],
     	[Code],
		[Description],
		[Priority],		   
		[UpTimeHours],	   
		[ETLType],		   
        [WarehouseType],
		[Prefix],
		[CreatedDate]
	)
	ON Tgt.[ApplicationId] = Src.[ApplicationId]

-- Update matched rows
WHEN MATCHED THEN
	UPDATE
	SET
		[Name]			   = Src.[Name],
		[Code]			   = Src.[Code],
		[Description]	   = Src.[Description],
		[Priority]		   = Src.[Priority],
		[UpTimeHours]	   = Src.[UpTimeHours],
		[ETLType]		   = Src.[ETLType],
		[WarehouseType]	   = Src.[WarehouseType],
		[Prefix]		   = Src.[Prefix]
-- Insert new rows
WHEN NOT MATCHED BY TARGET THEN
	INSERT
		(
			[ApplicationId],
			[Name],
     		[Code],
			[Description],
			[WarehouseType],
			[Prefix]		
		)
	VALUES
		(
			Src.[ApplicationId],
			Src.[Name],
			Src.[Code],
			Src.[Description],
			Src.[WarehouseType],
			Src.[Prefix]
		)
--  Delete rows that are in the target but not the source
WHEN NOT MATCHED BY SOURCE THEN
	DELETE;
GO
SET IDENTITY_INSERT [Control].[Application] OFF;


GO
