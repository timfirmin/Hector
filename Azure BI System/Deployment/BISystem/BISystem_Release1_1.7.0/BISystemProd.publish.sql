/*
Deployment script for BISystem

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "BISystem"
:setvar DefaultFilePrefix "BISystem"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
--IF EXISTS (SELECT 1
--           FROM   [sys].[databases]
--           WHERE  [name] = N'$(DatabaseName)')
--    BEGIN
--        ALTER DATABASE [$(DatabaseName)]
--            SET ANSI_NULLS OFF,
--                ANSI_PADDING OFF,
--                CONCAT_NULL_YIELDS_NULL OFF 
--            WITH ROLLBACK IMMEDIATE;
--    END


--GO
/*
The column [Control].[SourceFile].[IsReadyForEtlProcessing] on table [Control].[SourceFile] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

--IF EXISTS (select top 1 1 from [Control].[SourceFile])
--    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

--GO
/*
The type for column parameter_value in table [SSIS].[execution_parameter_values] is currently  SQL_VARIANT NULL but is being changed to  NVARCHAR (MAX) NULL. Data loss could occur.
*/

--IF EXISTS (select top 1 1 from [SSIS].[execution_parameter_values])
--    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

--GO
--PRINT N'Dropping unnamed constraint on [Control].[SourceFile]...';


--GO
--ALTER TABLE [Control].[SourceFile] DROP CONSTRAINT [DF__SourceFil__Unloa__1B09D325];


--GO
--PRINT N'Dropping unnamed constraint on [Control].[SourceFile]...';


--GO
--ALTER TABLE [Control].[SourceFile] DROP CONSTRAINT [DF__SourceFil__Creat__1BFDF75E];


--GO
--PRINT N'Dropping unnamed constraint on [Control].[SourceFile]...';


--GO
--ALTER TABLE [Control].[SourceFile] DROP CONSTRAINT [DF__SourceFil__Creat__1CF21B97];


--GO
--PRINT N'Dropping unnamed constraint on [Control].[SourceFile]...';


--GO
--ALTER TABLE [Control].[SourceFile] DROP CONSTRAINT [DF__SourceFil__32Bit__1DE63FD0];


--GO
--PRINT N'Dropping unnamed constraint on [Control].[SourceFile]...';


--GO
--ALTER TABLE [Control].[SourceFile] DROP CONSTRAINT [DF__SourceFil__Purge__1EDA6409];


--GO
--PRINT N'Dropping [Control].[fkEntity_SourceFile]...';


--GO
--ALTER TABLE [Control].[Entity] DROP CONSTRAINT [fkEntity_SourceFile];


--GO
--PRINT N'Dropping [Control].[fkSourceFile_ExtensionType]...';


--GO
--ALTER TABLE [Control].[SourceFile] DROP CONSTRAINT [fkSourceFile_ExtensionType];


--GO
--PRINT N'Dropping [Control].[fkSourceFile_SourceFile]...';


--GO
--ALTER TABLE [Control].[SourceFile] DROP CONSTRAINT [fkSourceFile_SourceFile];


--GO
--PRINT N'Dropping [Control].[fkSourceFile_SourceFileType]...';


--GO
--ALTER TABLE [Control].[SourceFile] DROP CONSTRAINT [fkSourceFile_SourceFileType];


--GO
--PRINT N'Dropping [Control].[fkSourceFile_Application]...';


--GO
--ALTER TABLE [Control].[SourceFile] DROP CONSTRAINT [fkSourceFile_Application];


--GO
--PRINT N'Creating [ROLE-BICENTRE-DEVELOPER]...';


--GO
--CREATE USER [ROLE-BICENTRE-DEVELOPER] FOR EXTERNAL PROVIDER;


--GO
--REVOKE CONNECT TO [ROLE-BICENTRE-DEVELOPER];


--GO
--PRINT N'Creating [ROLE-BICENTRE-DEVELOPER-ADMIN]...';


--GO
--CREATE USER [ROLE-BICENTRE-DEVELOPER-ADMIN] FOR EXTERNAL PROVIDER;


--GO
--REVOKE CONNECT TO [ROLE-BICENTRE-DEVELOPER-ADMIN];


--GO
--PRINT N'Creating <unnamed>...';


--GO
--EXECUTE sp_addrolemember @rolename = N'db_owner', @membername = N'ROLE-BICENTRE-DEVELOPER';


--GO
--PRINT N'Creating <unnamed>...';


--GO
--EXECUTE sp_addrolemember @rolename = N'db_owner', @membername = N'ROLE-BICENTRE-DEVELOPER-ADMIN';


--GO
--PRINT N'Starting rebuilding table [Control].[SourceFile]...';


--GO
--SET QUOTED_IDENTIFIER ON;

--SET ANSI_NULLS OFF;


--GO
--SET QUOTED_IDENTIFIER ON;

--SET ANSI_NULLS OFF;


--GO
--BEGIN TRANSACTION;

--SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

--SET XACT_ABORT ON;

--CREATE TABLE [Control].[tmp_ms_xx_SourceFile] (
--    [SourceFileId]              INT            IDENTITY (1, 1) NOT NULL,
--    [ParentSourceFileId]        INT            NULL,
--    [SourceFileName]            NVARCHAR (255) NOT NULL,
--    [SourceFileTypeId]          INT            NULL,
--    [FileExtensionTypeId]       SMALLINT       NULL,
--    [ApplicationId]             SMALLINT       NULL,
--    [OriginalFileId]            INT            NULL,
--    [ModifiedDate]              DATETIME       NOT NULL,
--    [FileSizeBytes]             BIGINT         NOT NULL,
--    [DataSourceType]            VARCHAR (100)  NULL,
--    [IsCompressed]              BIT            NULL,
--    [Source]                    VARCHAR (400)  NULL,
--    [FileExtractedDate]         DATETIME       NULL,
--    [FileExtractedParentLoadId] INT            NULL,
--    [BlobUploadDate]            DATETIME       NULL,
--    [StageDate]                 DATETIME       NULL,
--    [StageParentLoadId]         INT            NULL,
--    [CleanDate]                 DATETIME       NULL,
--    [CleanParentLoadId]         INT            NULL,
--    [TransformDate]             DATETIME       NULL,
--    [TransformParentLoadId]     INT            NULL,
--    [WarehouseDate]             DATETIME       NULL,
--    [WarehouseParentLoadId]     INT            NULL,
--    [OLAPDate]                  DATETIME       NULL,
--    [ArchivePath]               NVARCHAR (400) NULL,
--    [ArchiveDate]               DATETIME       NULL,
--    [UnloadFile]                BIT            DEFAULT ((0)) NULL,
--    [FileUnloaded]              BIT            NULL,
--    [FileUnloadedDate]          DATETIME       NULL,
--    [LoadId]                    INT            NULL,
--    [CreatedBy]                 [sysname]      DEFAULT (suser_sname()) NOT NULL,
--    [CreatedDate]               DATETIME       DEFAULT (getdate()) NOT NULL,
--    [TotalNoOfUses]             BIGINT         NULL,
--    [32BitStageRequired]        BIT            DEFAULT ((0)) NULL,
--    [MDSDate]                   DATETIME       NULL,
--    [ScrubDate]                 DATETIME       NULL,
--    [LDSDate]                   DATETIME       NULL,
--    [PartitionKey]              INT            NULL,
--    [PurgeFromArchive]          BIT            DEFAULT ((0)) NULL,
--    [ArchivePurged]             BIT            NULL,
--    [ArchivePurgedDate]         DATETIME       NULL,
--    [PreStageDate]              DATETIME       NULL,
--    [IsLoaded]                  BIT            NULL,
--    [IsToBeLoaded]              BIT            NULL,
--    [SourceFileType]            NVARCHAR (255) NULL,
--    [IsReadyForEtlProcessing]   BIT            NOT NULL,
--    CONSTRAINT [tmp_ms_xx_constraint_pkcSourceFileId1] PRIMARY KEY CLUSTERED ([SourceFileId] ASC)
--);

--IF EXISTS (SELECT TOP 1 1 
--           FROM   [Control].[SourceFile])
--    BEGIN
--        SET IDENTITY_INSERT [Control].[tmp_ms_xx_SourceFile] ON;
--        INSERT INTO [Control].[tmp_ms_xx_SourceFile] ([SourceFileId], [ParentSourceFileId], [SourceFileName], [SourceFileTypeId], [FileExtensionTypeId], [ApplicationId], [OriginalFileId], [ModifiedDate], [FileSizeBytes], [DataSourceType], [IsCompressed], [Source], [FileExtractedDate], [FileExtractedParentLoadId], [BlobUploadDate], [StageDate], [StageParentLoadId], [CleanDate], [CleanParentLoadId], [TransformDate], [TransformParentLoadId], [WarehouseDate], [OLAPDate], [ArchivePath], [ArchiveDate], [UnloadFile], [FileUnloaded], [FileUnloadedDate], [LoadId], [CreatedBy], [CreatedDate], [TotalNoOfUses], [32BitStageRequired], [MDSDate], [ScrubDate], [LDSDate], [PartitionKey], [PurgeFromArchive], [ArchivePurged], [ArchivePurgedDate], [PreStageDate], [IsLoaded], [IsToBeLoaded], [SourceFileType], [WarehouseParentLoadId])
--        SELECT   [SourceFileId],
--                 [ParentSourceFileId],
--                 [SourceFileName],
--                 [SourceFileTypeId],
--                 [FileExtensionTypeId],
--                 [ApplicationId],
--                 [OriginalFileId],
--                 [ModifiedDate],
--                 [FileSizeBytes],
--                 [DataSourceType],
--                 [IsCompressed],
--                 [Source],
--                 [FileExtractedDate],
--                 [FileExtractedParentLoadId],
--                 [BlobUploadDate],
--                 [StageDate],
--                 [StageParentLoadId],
--                 [CleanDate],
--                 [CleanParentLoadId],
--                 [TransformDate],
--                 [TransformParentLoadId],
--                 [WarehouseDate],
--                 [OLAPDate],
--                 [ArchivePath],
--                 [ArchiveDate],
--                 [UnloadFile],
--                 [FileUnloaded],
--                 [FileUnloadedDate],
--                 [LoadId],
--                 [CreatedBy],
--                 [CreatedDate],
--                 [TotalNoOfUses],
--                 [32BitStageRequired],
--                 [MDSDate],
--                 [ScrubDate],
--                 [LDSDate],
--                 [PartitionKey],
--                 [PurgeFromArchive],
--                 [ArchivePurged],
--                 [ArchivePurgedDate],
--                 [PreStageDate],
--                 [IsLoaded],
--                 [IsToBeLoaded],
--                 [SourceFileType],
--                 [WarehouseParentLoadId]
--        FROM     [Control].[SourceFile]
--        ORDER BY [SourceFileId] ASC;
--        SET IDENTITY_INSERT [Control].[tmp_ms_xx_SourceFile] OFF;
--    END

--DROP TABLE [Control].[SourceFile];

--EXECUTE sp_rename N'[Control].[tmp_ms_xx_SourceFile]', N'SourceFile';

--EXECUTE sp_rename N'[Control].[tmp_ms_xx_constraint_pkcSourceFileId1]', N'pkcSourceFileId', N'OBJECT';

--COMMIT TRANSACTION;

--SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


--GO
--SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


--GO
--SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


--GO
PRINT N'Starting rebuilding table [SSIS].[execution_parameter_values]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [SSIS].[tmp_ms_xx_execution_parameter_values] (
    [execution_parameter_id] BIGINT         IDENTITY (1, 1) NOT NULL,
    [execution_id]           BIGINT         NOT NULL,
    [object_type]            SMALLINT       NOT NULL,
    [parameter_data_type]    NVARCHAR (128) NOT NULL,
    [parameter_name]         [sysname]      NOT NULL,
    [parameter_value]        NVARCHAR (MAX) NULL,
    [sensitive]              BIT            NOT NULL,
    [required]               BIT            NOT NULL,
    [value_set]              BIT            NOT NULL,
    [runtime_override]       BIT            NOT NULL
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [SSIS].[execution_parameter_values])
    BEGIN
        SET IDENTITY_INSERT [SSIS].[tmp_ms_xx_execution_parameter_values] ON;
        INSERT INTO [SSIS].[tmp_ms_xx_execution_parameter_values] ([execution_parameter_id], [execution_id], [object_type], [parameter_data_type], [parameter_name], [parameter_value], [sensitive], [required], [value_set], [runtime_override])
        SELECT [execution_parameter_id],
               [execution_id],
               [object_type],
               [parameter_data_type],
               [parameter_name],
               CAST ([parameter_value] AS NVARCHAR (MAX)),
               [sensitive],
               [required],
               [value_set],
               [runtime_override]
        FROM   [SSIS].[execution_parameter_values];
        SET IDENTITY_INSERT [SSIS].[tmp_ms_xx_execution_parameter_values] OFF;
    END

DROP TABLE [SSIS].[execution_parameter_values];

EXECUTE sp_rename N'[SSIS].[tmp_ms_xx_execution_parameter_values]', N'execution_parameter_values';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
--PRINT N'Creating [Azure].[Component]...';


--GO
--SET QUOTED_IDENTIFIER ON;

--SET ANSI_NULLS OFF;


--GO
--CREATE TABLE [Azure].[Component] (
--    [ComponentId]   INT           IDENTITY (1, 1) NOT NULL,
--    [TypeId]        INT           NOT NULL,
--    [Name]          VARCHAR (250) NOT NULL,
--    [StateId]       INT           NOT NULL,
--    [Server]        VARCHAR (250) NOT NULL,
--    [ResourceGroup] VARCHAR (250) NULL,
--    CONSTRAINT [PK_Component] PRIMARY KEY CLUSTERED ([ComponentId] ASC)
--);


--GO
--SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


--GO
--PRINT N'Creating [Azure].[Components]...';


--GO
--SET QUOTED_IDENTIFIER ON;

--SET ANSI_NULLS OFF;


--GO
--CREATE TABLE [Azure].[Components] (
--    [ComponentId]     INT           IDENTITY (1, 1) NOT NULL,
--    [ComponentName]   VARCHAR (250) NOT NULL,
--    [ComponentServer] VARCHAR (250) NULL,
--    [ResourceGroup]   VARCHAR (250) NULL,
--    [ComponentType]   VARCHAR (250) NOT NULL
--);


--GO
--SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


--GO
--PRINT N'Creating [Azure].[ComponentState]...';


--GO
--SET QUOTED_IDENTIFIER ON;

--SET ANSI_NULLS OFF;


--GO
--CREATE TABLE [Azure].[ComponentState] (
--    [ComponentStateId] INT           IDENTITY (1, 1) NOT NULL,
--    [StateName]        VARCHAR (255) NOT NULL,
--    CONSTRAINT [PK_ComponentState] PRIMARY KEY CLUSTERED ([ComponentStateId] ASC)
--);


--GO
--SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


--GO
--PRINT N'Creating [Azure].[ComponentStateLog]...';


--GO
--SET QUOTED_IDENTIFIER ON;

--SET ANSI_NULLS OFF;


--GO
--CREATE TABLE [Azure].[ComponentStateLog] (
--    [ComponentStateLogId] INT      IDENTITY (1, 1) NOT NULL,
--    [ComponentId]         INT      NULL,
--    [ComponentStateId]    INT      NULL,
--    [CreatedAt]           DATETIME NOT NULL,
--    CONSTRAINT [PK_ComponentStateLog] PRIMARY KEY CLUSTERED ([ComponentStateLogId] ASC)
--);


--GO
--SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


--GO
--PRINT N'Creating [Azure].[ComponentType]...';


--GO
--SET QUOTED_IDENTIFIER ON;

--SET ANSI_NULLS OFF;


--GO
--CREATE TABLE [Azure].[ComponentType] (
--    [ComponentTypeId] INT           IDENTITY (1, 1) NOT NULL,
--    [TypeName]        VARCHAR (255) NOT NULL,
--    CONSTRAINT [PK_ComponentType] PRIMARY KEY CLUSTERED ([ComponentTypeId] ASC)
--);


--GO
--SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


--GO
--PRINT N'Creating [Azure].[Configuration]...';


--GO
--SET QUOTED_IDENTIFIER ON;

--SET ANSI_NULLS OFF;


--GO
--CREATE TABLE [Azure].[Configuration] (
--    [Configuration] VARCHAR (50)  NOT NULL,
--    [ConfigItem]    VARCHAR (50)  NOT NULL,
--    [Description]   VARCHAR (250) NULL,
--    [Value]         VARCHAR (MAX) NULL
--);


--GO
--SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


--GO
--PRINT N'Creating [Azure].[JobComponentBridge]...';


--GO
--SET QUOTED_IDENTIFIER ON;

--SET ANSI_NULLS OFF;


--GO
--CREATE TABLE [Azure].[JobComponentBridge] (
--    [JobId]       INT NOT NULL,
--    [ComponentId] INT NOT NULL
--);


--GO
--SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


--GO
--PRINT N'Creating [Azure].[JobLog]...';


--GO
--SET QUOTED_IDENTIFIER ON;

--SET ANSI_NULLS OFF;


--GO
--CREATE TABLE [Azure].[JobLog] (
--    [LogId]             INT              IDENTITY (1, 1) NOT NULL,
--    [JobId]             INT              NOT NULL,
--    [ActionName]        VARCHAR (255)    NOT NULL,
--    [ActionDescription] VARCHAR (255)    NOT NULL,
--    [StartDate]         DATETIME         NULL,
--    [EndDate]           DATETIME         NULL,
--    [Result]            INT              NULL,
--    [OperationID]       UNIQUEIDENTIFIER NULL,
--    PRIMARY KEY CLUSTERED ([LogId] ASC)
--);


--GO
--SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


--GO
--PRINT N'Creating [Azure].[JobLogResult]...';


--GO
--SET QUOTED_IDENTIFIER ON;

--SET ANSI_NULLS OFF;


--GO
--CREATE TABLE [Azure].[JobLogResult] (
--    [JobLogResultId]       INT           IDENTITY (1, 1) NOT NULL,
--    [JobResultDescription] VARCHAR (250) NULL,
--    CONSTRAINT [PK_JobLogResult] PRIMARY KEY CLUSTERED ([JobLogResultId] ASC)
--);


--GO
--SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


--GO
--PRINT N'Creating [Azure].[JobReadyForEtlLog]...';


--GO
--SET QUOTED_IDENTIFIER ON;

--SET ANSI_NULLS OFF;


--GO
--CREATE TABLE [Azure].[JobReadyForEtlLog] (
--    [JobReadyForEtlLogId] INT           IDENTITY (1, 1) NOT NULL,
--    [JobId]               INT           NOT NULL,
--    [CreatedAt]           DATETIME2 (7) NOT NULL,
--    [ExecutedAt]          DATETIME2 (7) NULL
--);


--GO
--SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


--GO
--PRINT N'Creating [Azure].[Jobs]...';


--GO
--SET QUOTED_IDENTIFIER ON;

--SET ANSI_NULLS OFF;


--GO
--CREATE TABLE [Azure].[Jobs] (
--    [JobId]          INT           IDENTITY (1, 1) NOT NULL,
--    [JobName]        VARCHAR (250) NOT NULL,
--    [JobShortName]   VARCHAR (250) NOT NULL,
--    [JobDescription] VARCHAR (250) NOT NULL,
--    [JobType]        VARCHAR (250) NOT NULL,
--    [Priority]       INT           NOT NULL,
--    [ApplicationId]  INT           NOT NULL
--);


--GO
--SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


--GO
--PRINT N'Creating [Azure].[Process]...';


--GO
--SET QUOTED_IDENTIFIER ON;

--SET ANSI_NULLS OFF;


--GO
--CREATE TABLE [Azure].[Process] (
--    [ProcessId]      INT           IDENTITY (1, 1) NOT NULL,
--    [ProcessStateId] INT           NOT NULL,
--    [Name]           VARCHAR (255) NOT NULL,
--    [Type]           VARCHAR (255) NOT NULL,
--    [ApplicationId]  INT           NULL,
--    CONSTRAINT [PK_Process] PRIMARY KEY CLUSTERED ([ProcessId] ASC)
--);


--GO
--SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


--GO
--PRINT N'Creating [Azure].[ProcessComponent]...';


--GO
--SET QUOTED_IDENTIFIER ON;

--SET ANSI_NULLS OFF;


--GO
--CREATE TABLE [Azure].[ProcessComponent] (
--    [ProcessId]                       INT      NOT NULL,
--    [ComponentId]                     INT      NOT NULL,
--    [DesiredComponentStateTime]       TIME (7) NOT NULL,
--    [DesiredComponentStateLatestTime] TIME (7) NULL,
--    [DesiredComponentStateId]         INT      NOT NULL
--);


--GO
--SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


--GO
--PRINT N'Creating [Azure].[ProcessState]...';


--GO
--SET QUOTED_IDENTIFIER ON;

--SET ANSI_NULLS OFF;


--GO
--CREATE TABLE [Azure].[ProcessState] (
--    [ProcessStateId] INT           IDENTITY (1, 1) NOT NULL,
--    [StateName]      VARCHAR (255) NOT NULL,
--    CONSTRAINT [PK_ProcessState] PRIMARY KEY CLUSTERED ([ProcessStateId] ASC)
--);


--GO
--SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


--GO
--PRINT N'Creating [Azure].[ProcessStateLog]...';


--GO
--SET QUOTED_IDENTIFIER ON;

--SET ANSI_NULLS OFF;


--GO
--CREATE TABLE [Azure].[ProcessStateLog] (
--    [ProcessStateLogId] INT      IDENTITY (1, 1) NOT NULL,
--    [ProcessId]         INT      NOT NULL,
--    [ProcessStateId]    INT      NOT NULL,
--    [CreatedAt]         DATETIME NOT NULL,
--    CONSTRAINT [PK_PocessStateLog] PRIMARY KEY CLUSTERED ([ProcessStateLogId] ASC)
--);


--GO
--SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


--GO
--PRINT N'Creating [Azure].[Schedule]...';


--GO
--SET QUOTED_IDENTIFIER ON;

--SET ANSI_NULLS OFF;


--GO
--CREATE TABLE [Azure].[Schedule] (
--    [ScheduleId]    INT          IDENTITY (1, 1) NOT NULL,
--    [ComponentId]   INT          NOT NULL,
--    [Action]        VARCHAR (50) NOT NULL,
--    [OverrideFlg]   BIT          NOT NULL,
--    [AutomationJob] VARCHAR (50) NOT NULL
--);


--GO
--SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


--GO
--PRINT N'Creating [Azure].[ScheduleOverride]...';


--GO
--SET QUOTED_IDENTIFIER ON;

--SET ANSI_NULLS OFF;


--GO
--CREATE TABLE [Azure].[ScheduleOverride] (
--    [ScheduleOverrieId] INT           IDENTITY (1, 1) NOT NULL,
--    [ScheduleName]      VARCHAR (250) NULL,
--    [SkipRunningDate]   DATETIME2 (7) NOT NULL,
--    [CreatedAt]         DATETIME2 (7) NOT NULL
--);


--GO
--SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


--GO
PRINT N'Creating [SSIS].[executions]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [SSIS].[executions] (
    [execution_id]                 BIGINT             IDENTITY (1, 1) NOT NULL,
    [folder_name]                  [sysname]          NOT NULL,
    [project_name]                 [sysname]          NOT NULL,
    [package_name]                 NVARCHAR (260)     NOT NULL,
    [reference_id]                 BIGINT             NULL,
    [reference_type]               CHAR (1)           NULL,
    [environment_folder_name]      NVARCHAR (128)     NULL,
    [environment_name]             NVARCHAR (128)     NULL,
    [project_lsn]                  BIGINT             NULL,
    [executed_as_sid]              VARBINARY (85)     NOT NULL,
    [executed_as_name]             NVARCHAR (128)     NOT NULL,
    [use32bitruntime]              BIT                NOT NULL,
    [operation_type]               SMALLINT           NOT NULL,
    [created_time]                 DATETIMEOFFSET (7) NULL,
    [object_type]                  SMALLINT           NULL,
    [object_id]                    BIGINT             NULL,
    [status]                       INT                NULL,
    [start_time]                   DATETIMEOFFSET (7) NULL,
    [end_time]                     DATETIMEOFFSET (7) NULL,
    [caller_sid]                   VARBINARY (85)     NULL,
    [caller_name]                  [sysname]          NOT NULL,
    [process_id]                   INT                NULL,
    [stopped_by_sid]               VARBINARY (85)     NULL,
    [stopped_by_name]              NVARCHAR (128)     NULL,
    [dump_id]                      UNIQUEIDENTIFIER   NULL,
    [server_name]                  NVARCHAR (128)     NULL,
    [machine_name]                 NVARCHAR (128)     NULL,
    [total_physical_memory_kb]     BIGINT             NULL,
    [available_physical_memory_kb] BIGINT             NULL,
    [total_page_file_kb]           BIGINT             NULL,
    [available_page_file_kb]       BIGINT             NULL,
    [cpu_count]                    INT                NULL
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [SSIS].[folders]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [SSIS].[folders] (
    [folder_id]       BIGINT             IDENTITY (1, 1) NOT NULL,
    [name]            [sysname]          NOT NULL,
    [description]     NVARCHAR (1024)    NULL,
    [created_by_sid]  VARBINARY (85)     NOT NULL,
    [created_by_name] NVARCHAR (128)     NOT NULL,
    [created_time]    DATETIMEOFFSET (7) NOT NULL
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
--PRINT N'Creating [Control].[fkEntity_SourceFile]...';


--GO
--ALTER TABLE [Control].[Entity] WITH NOCHECK
--    ADD CONSTRAINT [fkEntity_SourceFile] FOREIGN KEY ([SourceFileId]) REFERENCES [Control].[SourceFile] ([SourceFileId]);


--GO
--PRINT N'Creating [Control].[fkSourceFile_ExtensionType]...';


--GO
--ALTER TABLE [Control].[SourceFile] WITH NOCHECK
--    ADD CONSTRAINT [fkSourceFile_ExtensionType] FOREIGN KEY ([FileExtensionTypeId]) REFERENCES [Control].[FileExtensionType] ([FileExtensionTypeId]);


--GO
--PRINT N'Creating [Control].[fkSourceFile_SourceFile]...';


--GO
--ALTER TABLE [Control].[SourceFile] WITH NOCHECK
--    ADD CONSTRAINT [fkSourceFile_SourceFile] FOREIGN KEY ([ParentSourceFileId]) REFERENCES [Control].[SourceFile] ([SourceFileId]);


--GO
--PRINT N'Creating [Control].[fkSourceFile_SourceFileType]...';


--GO
--ALTER TABLE [Control].[SourceFile] WITH NOCHECK
--    ADD CONSTRAINT [fkSourceFile_SourceFileType] FOREIGN KEY ([SourceFileTypeId]) REFERENCES [Control].[SourceFileType] ([SourceFileTypeId]);


--GO
--PRINT N'Creating [Control].[fkSourceFile_Application]...';


--GO
--ALTER TABLE [Control].[SourceFile] WITH NOCHECK
--    ADD CONSTRAINT [fkSourceFile_Application] FOREIGN KEY ([ApplicationId]) REFERENCES [Control].[Application] ([ApplicationId]);


--GO
--PRINT N'Creating [Azure].[FK_Component_ComponentState_ComponentStateId]...';


--GO
--ALTER TABLE [Azure].[Component] WITH NOCHECK
--    ADD CONSTRAINT [FK_Component_ComponentState_ComponentStateId] FOREIGN KEY ([StateId]) REFERENCES [Azure].[ComponentState] ([ComponentStateId]);


--GO
--PRINT N'Creating [Azure].[FK_ComponentStateLog_Component_ComponentId]...';


--GO
--ALTER TABLE [Azure].[ComponentStateLog] WITH NOCHECK
--    ADD CONSTRAINT [FK_ComponentStateLog_Component_ComponentId] FOREIGN KEY ([ComponentId]) REFERENCES [Azure].[Component] ([ComponentId]);


--GO
--PRINT N'Creating [Azure].[FK_ComponentStateLog_ComponentState_ComponentStateId]...';


--GO
--ALTER TABLE [Azure].[ComponentStateLog] WITH NOCHECK
--    ADD CONSTRAINT [FK_ComponentStateLog_ComponentState_ComponentStateId] FOREIGN KEY ([ComponentStateId]) REFERENCES [Azure].[ComponentState] ([ComponentStateId]);


--GO
--PRINT N'Creating [Azure].[FK_JobLogResult_JobLogResultId]...';


--GO
--ALTER TABLE [Azure].[JobLog] WITH NOCHECK
--    ADD CONSTRAINT [FK_JobLogResult_JobLogResultId] FOREIGN KEY ([Result]) REFERENCES [Azure].[JobLogResult] ([JobLogResultId]);


--GO
--PRINT N'Creating [Azure].[FK_Process_ProcessState_ProcessStateId]...';


--GO
--ALTER TABLE [Azure].[Process] WITH NOCHECK
--    ADD CONSTRAINT [FK_Process_ProcessState_ProcessStateId] FOREIGN KEY ([ProcessStateId]) REFERENCES [Azure].[ProcessState] ([ProcessStateId]);


--GO
--PRINT N'Creating [Azure].[FK_ProcessComponent_Process_ProcessId]...';


--GO
--ALTER TABLE [Azure].[ProcessComponent] WITH NOCHECK
--    ADD CONSTRAINT [FK_ProcessComponent_Process_ProcessId] FOREIGN KEY ([ProcessId]) REFERENCES [Azure].[Process] ([ProcessId]);


--GO
--PRINT N'Creating [Azure].[FK_ProcessComponent_Component_ComponentId]...';


--GO
--ALTER TABLE [Azure].[ProcessComponent] WITH NOCHECK
--    ADD CONSTRAINT [FK_ProcessComponent_Component_ComponentId] FOREIGN KEY ([ComponentId]) REFERENCES [Azure].[Component] ([ComponentId]);


--GO
--PRINT N'Creating [Azure].[FK_ProcessComponent_ComponentState_ComponentStateId]...';


--GO
--ALTER TABLE [Azure].[ProcessComponent] WITH NOCHECK
--    ADD CONSTRAINT [FK_ProcessComponent_ComponentState_ComponentStateId] FOREIGN KEY ([DesiredComponentStateId]) REFERENCES [Azure].[ComponentState] ([ComponentStateId]);


--GO
--PRINT N'Creating [Azure].[FK_PocessStateLog_Component_ComponentId]...';


--GO
--ALTER TABLE [Azure].[ProcessStateLog] WITH NOCHECK
--    ADD CONSTRAINT [FK_PocessStateLog_Component_ComponentId] FOREIGN KEY ([ProcessId]) REFERENCES [Azure].[Process] ([ProcessId]);


--GO
--PRINT N'Creating [Azure].[FK_PocessStateLog_ComponentState_ComponentStateId]...';


--GO
--ALTER TABLE [Azure].[ProcessStateLog] WITH NOCHECK
--    ADD CONSTRAINT [FK_PocessStateLog_ComponentState_ComponentStateId] FOREIGN KEY ([ProcessStateId]) REFERENCES [Azure].[ProcessState] ([ProcessStateId]);


--GO
--PRINT N'Refreshing [Audit].[vExecutionParameterValues]...';


--GO
--SET QUOTED_IDENTIFIER ON;

--SET ANSI_NULLS OFF;


--GO
EXECUTE sp_refreshsqlmodule N'[Audit].[vExecutionParameterValues]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [Audit].[CompareSRC2STGRowCounts]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
ALTER PROC [Audit].[CompareSRC2STGRowCounts]
	@pApplicationCode VARCHAR(80)
AS
/*
 *This SP compares the row counts between the Source to Extract Process and the Extract to Stage Process. This SP is called after the Extract to Stage Process is completed.
 */
DECLARE @MatchedFlag INT = 0;

WITH TempSourceFile AS
(
	SELECT SF.FileExtractedParentLoadId
		  ,SF.StageParentLoadId
		  ,SF.SourceFileId
		  ,SF.SourceFileName
	  FROM [Control].SourceFile AS SF
	  INNER JOIN [Control].[Application] AS A
	  ON SF.ApplicationId = A.ApplicationId 
	 WHERE SF.StageDate		IS NOT NULL 
	   AND SF.CleanDate		IS NULL 
	   AND SF.WarehouseDate	IS NULL
	   AND A.Code = @pApplicationCode
)
, 
LoadIdEXT2STG AS
(
	SELECT LoadId 
	  FROM [Audit].[PackageLoad] 
	 WHERE ParentLoadId IN (
							  SELECT StageParentLoadId 
								FROM TempSourceFile
							)
)
,  
LoadIdSRC2EXT AS
(
	SELECT LoadId 
	  FROM [Audit].[PackageLoad] 
	 WHERE ParentLoadId IN (
								SELECT FileExtractedParentLoadId 
								  FROM TempSourceFile
						    )
)
, 
EXT2STG_Counts AS 
(
	SELECT 
		rt.EntityId,
		InsertedRows,
		FailedRows,
		cet.[Table] AS EntityTypeTable,
		sf.SourceFileName
 FROM [Audit].[RowThroughput] rt 
	INNER JOIN [Control].Entity ce         ON ce.EntityId      = rt.EntityId
	INNER JOIN [Control].[EntityType] cet  ON cet.EntityTypeId = ce.EntityTypeId
	INNER JOIN [Control].[SourceFile] sf   ON sf.SourceFileId  = ce.SourceFileId
	AND sf.SourceFileId IN (
								SELECT SourceFileId 
								  FROM TempSourceFile
							)
WHERE rt.LoadId IN (
						SELECT LoadId 
						  FROM LoadIdEXT2STG 
					)
)
, 
SRC2EXT_Counts
AS
(
SELECT 
	  rt.EntityId
	, SUM(InsertedRows)    AS InsertedRows
	, SUM(FailedRows)      AS FailedRows
	, cet.[Table]          AS EntityTypeTable
	, sf.SourceFileName
  FROM [Audit].[RowThroughput] rt
    INNER JOIN [Control].Entity ce         ON ce.EntityId      = rt.EntityId
	INNER JOIN [Control].[EntityType] cet  ON cet.EntityTypeId = ce.EntityTypeId
										  AND cet.[IsSourceEntity]	= 1 --gets only the one that are source entites
	INNER JOIN [Control].[SourceFile] sf   ON sf.SourceFileId  = ce.SourceFileId
	AND sf.SourceFileId IN (
								SELECT SourceFileId 
								  FROM TempSourceFile
							)
WHERE rt.LoadId In (
						SELECT LoadId 
                          FROM LoadIdSRC2EXT 
				   )
GROUP BY 
	ExecutionId
	, rt.EntityId
	, sf.SourceFileName
	, cet.[Table]

)
, 
Compare_Counts
AS
(
SELECT 
	ec.InsertedRows AS SourceRowCounts, 
	sc.InsertedRows AS TargetRowcounts,
	sc.SourceFileName,
	sc.EntityTypeTable,
	CASE 
		WHEN (ec.InsertedRows = sc.InsertedRows AND sc.FailedRows = 0 ) THEN 1 
		ELSE 0 
	END AS MatchedCountsFlag
FROM SRC2EXT_Counts ec 
	FULL OUTER JOIN EXT2STG_Counts sc 
		ON ec.SourceFileName = sc.SourceFileName
		AND ec.EntityTypeTable = sc.EntityTypeTable
)
SELECT @MatchedFlag = ISNULL(MIN(CAST(MatchedCountsFlag AS INT)), 0) FROM Compare_Counts rt


-- Uncomment the below line to test if package execution stops when there are one or nore tables in source and target with diffrence in rowcounts  
-- SET @MatchedFlag = 0  

DECLARE @SourceFileExists INT = 0;

SELECT @SourceFileExists = ISNULL(SF.SourceFileId, 0)
  FROM [Control].SourceFile AS SF
 INNER JOIN [Control].[Application] AS A
    ON SF.ApplicationId = A.ApplicationId 
 WHERE SF.StageDate		IS NOT NULL 
   AND SF.CleanDate		IS NULL 
   AND SF.WarehouseDate	IS NULL
   AND A.Code = @pApplicationCode

IF @SourceFileExists > 0
BEGIN
    IF @MatchedFlag = 0  
	BEGIN  
		RAISERROR ('SRCT2STG Row counts did Not Match - Stage to Clean Will not Process - See Package Process Report', 16, 1) WITH SETERROR  	
	END
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [Control].[InsertSourceFile]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
ALTER PROCEDURE [Control].[InsertSourceFile]
				 @FileName VARCHAR(250),
				 @LoadId int,
				 @ApplicationCode VARCHAR(80),
				 @Source VARCHAR(80),
				 @SourceFileId int OUT

AS


DECLARE @ApplicationId int


SELECT @ApplicationId = [ApplicationId] FROM [Control].[Application]  WHERE Code = @ApplicationCode


IF NOT EXISTS (SELECT (1) FROM [Control].[SourceFile] WHERE [SourceFileName]= @FileName)
  BEGIN
    INSERT INTO [Control].[SourceFile] (
										[SourceFileName],
										[SourceFileTypeId],
										[ModifiedDate],
										[FileSizeBytes],
										[IsCompressed],
										[Source],
										[UnloadFile],
										[LoadId],
										[ApplicationId]
									   )
       SELECT    @FileName
				,1
				,SYSDATETIME()
				,0 
				,0 
				,@Source
				,0 
				, @LoadId
				, @ApplicationId



  END


  
SET @SourceFileId = (SELECT TOP(1) SourceFileId 
					   FROM [Control].[SourceFile] 
					  WHERE [SourceFileName]= @FileName
					    AND [ApplicationId] = @ApplicationId)

GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [Control].[UpdateSourceFile]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
-- =============================================
-- Author:		Adatis
-- Create date: 18/03/2013
-- Description:	Updates Source File milestone dates
-- =============================================
/****** Object:  StoredProcedure [Control].[UpdateSourceFile]    Script Date: 03/05/2017 11:50:47 ******/
DROP PROCEDURE [Control].[UpdateSourceFile]
GO

/****** Object:  StoredProcedure [Control].[UpdateSourceFile]    Script Date: 03/05/2017 11:50:47 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Adatis
-- Create date: 18/03/2013
-- Description:	Updates Source File milestone dates
-- =============================================
CREATE PROCEDURE [Control].[UpdateSourceFile]
	@SourceFileId	INT, 
	@Stream			VARCHAR(10),
	@ParentLoadId	INT = NULL
AS
BEGIN
	SET NOCOUNT ON;

	IF @Stream = 'SRC2FILE'
	BEGIN
	    UPDATE Control.SourceFile
		   SET [FileExtractedDate]= GETDATE(),
	           [FileExtractedParentLoadId]= @ParentLoadId,
			   [ModifiedDate] = GETDATE()
	    WHERE SourceFileId = @SourceFileId
	END
	
	IF @Stream = 'FILE2EXT'
	BEGIN
		UPDATE Control.SourceFile
		SET	BlobUploadDate = GETDATE() ,
		[ModifiedDate] = GETDATE()
		WHERE SourceFileId = @SourceFileId
	END
	
	IF @Stream in ('EXT2STG', 'SRC2STG')
	BEGIN
		UPDATE Control.SourceFile
		SET	StageDate = GETDATE()
		, [StageParentLoadId] = @ParentLoadId,
		[ModifiedDate] = GETDATE()
		WHERE SourceFileId = @SourceFileId
	END
	
	IF @Stream = 'STG2CLN'
	BEGIN
		IF @ParentLoadId IS NOT NULL
		BEGIN
			UPDATE Control.SourceFile
			SET	CleanDate = GETDATE()
			, [CleanParentLoadId] = @ParentLoadId,
			[ModifiedDate] = GETDATE()
			WHERE SourceFileId = @SourceFileId
		END
		ELSE
		BEGIN
			UPDATE Control.SourceFile
			SET	CleanDate = GETDATE()
			WHERE SourceFileId = @SourceFileId
		END
	END	
		
	IF @Stream = 'CLN2WAR'
	BEGIN
		UPDATE Control.SourceFile
		SET	WarehouseDate = GETDATE(),
		[ModifiedDate] = GETDATE()
		WHERE SourceFileId = @SourceFileId
	END;

	IF @Stream = 'CLN2TRN'
	BEGIN
		UPDATE Control.SourceFile
		SET	TransformDate = GETDATE(),
		[TransformParentLoadId] = @ParentLoadId,
		[ModifiedDate] = GETDATE()
		WHERE SourceFileId = @SourceFileId
	END;

	IF @Stream = 'STG2TRN'
	BEGIN
		UPDATE Control.SourceFile
		SET	TransformDate = GETDATE(),
		[TransformParentLoadId] = @ParentLoadId,
		[ModifiedDate] = GETDATE()
		WHERE SourceFileId = @SourceFileId
	END;

	IF @Stream in ('TRN2WAR', 'STG2DMT')
	BEGIN
		UPDATE Control.SourceFile
		SET	WarehouseDate = GETDATE(),
		[WarehouseParentLoadId] = @ParentLoadId,
		[ModifiedDate] = GETDATE()
		WHERE SourceFileId = @SourceFileId
	END;

	IF @Stream = 'SRC2STG'
	BEGIN
		UPDATE Control.SourceFile
		SET	StageDate = GETDATE()
		,UnloadFile = 0
		,PurgeFromArchive = 0
		,FileUnloadedDate = NULL
		,FileUnloaded = 0
		,ArchivePurgedDate = NULL
		,ArchivePurged = 0
		WHERE SourceFileId = @SourceFileId
	END

	IF @Stream in ('CLN2MDS', 'STG2MDS')
	BEGIN
		UPDATE Control.SourceFile
		SET	MDSDate = GETDATE()
		WHERE SourceFileId = @SourceFileId
	END

	IF @Stream in ('MDS2CLN', 'MDS2STG')
	BEGIN
		UPDATE Control.SourceFile
		SET	MDSDate = GETDATE()
		WHERE SourceFileId = @SourceFileId
	END


	IF @Stream = 'CLN2WH'
	BEGIN
		UPDATE Control.SourceFile
		SET	WarehouseDate = GETDATE()
		,FileUnloaded = 0
		,UnloadFile = 0
		,IsLoaded = 1
		WHERE SourceFileId = @SourceFileId
	END


	IF @Stream = 'ANA2ARC'
	BEGIN
		UPDATE Control.SourceFile
		SET	WarehouseDate = GETDATE()
		,PurgeFromArchive = 0
		,ArchivePurged = 0
		WHERE SourceFileId = @SourceFileId
	END

	IF @Stream = 'STG2SCR'
	BEGIN
		UPDATE Control.SourceFile
		SET	ScrubDate = GETDATE()
		WHERE SourceFileId = @SourceFileId
	END

	IF @Stream = 'SCR2CLN'
	BEGIN
		UPDATE Control.SourceFile
		SET	CleanDate = GETDATE()
		WHERE SourceFileId = @SourceFileId
	END

	IF @Stream = 'CLN2OLP'
	BEGIN
		UPDATE Control.SourceFile
		SET	OLAPDate = GETDATE()
		,FileUnloaded = 0
		,UnloadFile = 0
		WHERE SourceFileId = @SourceFileId
	END

		IF @Stream = 'WAR2OLP'
	BEGIN
		UPDATE Control.SourceFile
		SET	OLAPDate = GETDATE()
		WHERE SourceFileId = @SourceFileId
	END


END

GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
--PRINT N'Creating [Azure].[CheckScheduleOverride]...';


--GO
--SET QUOTED_IDENTIFIER ON;

--SET ANSI_NULLS OFF;


--GO
---- =============================================
---- Author:		Adatis Consulting - PS
---- Create date: 2017-03-06
---- Description:	Checks if schedule is overrided by checking if current date exists in schedule override table for pecified schedule name
---- =============================================

--CREATE PROCEDURE [Azure].[CheckScheduleOverride]
--	@ScheduleName varchar(250),
--	@ShouldScheduleBeSkiped BIT OUTPUT
--AS
--BEGIN
--	SET @ShouldScheduleBeSkiped = 0;
--	IF EXISTS (SELECT * 
--				 FROM [Azure].[ScheduleOverride] 
--				WHERE ScheduleName = @ScheduleName
--				  AND SkipRunningDate = CONVERT(date, SYSDATETIME()))
--		SET @ShouldScheduleBeSkiped = 1;
--END;
--GO
--SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


--GO
--PRINT N'Creating [Azure].[GetComponentsReadyForShutDown]...';


--GO
--SET QUOTED_IDENTIFIER ON;

--SET ANSI_NULLS OFF;


--GO
---- =============================================
---- Author: Adatis Consulting - PS
---- Create date: 2017-03-27
---- Description:	Get Components that are ready for shutdown
---- =============================================

--CREATE PROCEDURE [Azure].[GetComponentsReadyForShutDown]
--AS
--BEGIN
--	WITH ComponentsOfTheProcessesThatAreRunning AS
--	(
--		SELECT 
--			p.ProcessId,
--			ps.StateName,
--			pc.ComponentId,
--			pc.DesiredComponentStateId,
--			c.StateId,
--			c.ResourceGroup,
--			c.Server,
--			c.Name,
--			ct.TypeName
--		FROM Azure.Process p 
--			JOIN Azure.ProcessState ps ON ps.ProcessStateId = p.ProcessStateId
--			JOIN Azure.ProcessComponent pc ON pc.ProcessId = p.ProcessId
--			JOIN Azure.Component c ON pc.ComponentId = c.ComponentId
--			JOIN Azure.ComponentType ct ON ct.ComponentTypeId =c.TypeId
--			JOIN Azure.ComponentState cs ON cs.ComponentStateId = c.StateId
--		WHERE cs.StateName = 'Running'
--		AND ps.StateName ='Running' 
--	)
--	,ComponentsOfTheProcessesThatAreReadyForShutdown AS
--	(
--		SELECT
--			p.ProcessId,
--			ps.StateName,
--			pc.ComponentId,
--			pc.DesiredComponentStateId,
--			c.StateId,
--			c.ResourceGroup,
--			c.Server,
--			c.Name,
--			ct.TypeName
--		FROM Azure.Process p 
--			JOIN Azure.ProcessState ps ON ps.ProcessStateId = p.ProcessStateId
--			JOIN Azure.ProcessComponent pc ON pc.ProcessId = p.ProcessId
--			JOIN Azure.Component c ON pc.ComponentId = c.ComponentId
--			JOIN Azure.ComponentType ct ON ct.ComponentTypeId =c.TypeId
--			JOIN Azure.ComponentState cs ON cs.ComponentStateId = c.StateId
--		WHERE cs.StateName = 'Running'
--		AND ps.StateName = 'Awaiting components release'
--	)
--	,ComponentsReadyForShutDown AS
--	(
--		SELECT * FROM ComponentsOfTheProcessesThatAreReadyForShutdown
--		EXCEPT 
--		SELECT * FROM ComponentsOfTheProcessesThatAreRunning
--	)
--	SELECT DISTINCT * FROM ComponentsReadyForShutDown
--END
--GO
--SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


--GO
--PRINT N'Creating [Azure].[GetConfiguration]...';


--GO
--SET QUOTED_IDENTIFIER ON;

--SET ANSI_NULLS OFF;


--GO
---- =============================================
---- Author: Adatis Consulting - SAW
---- Create date: 2017-03-15
---- Description:	Returns config values for use by Automation Runbooks
---- =============================================

--CREATE PROCEDURE [Azure].[GetConfiguration] (@Configuration varchar(50)) 
--AS
--BEGIN
--SET NOCOUNT ON;

--SELECT 
--	[ConfigItem], 
--	[Value]
--FROM [Azure].[Configuration]
--WHERE [Configuration] = @Configuration OR [Configuration] = 'ALL'

--END
--GO
--SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


--GO
--PRINT N'Creating [Azure].[GetDisabledComponentsRequiredForETL]...';


--GO
--SET QUOTED_IDENTIFIER ON;

--SET ANSI_NULLS OFF;


--GO

---- =============================================
---- Author: Adatis Consulting - PS
---- Create date: 2017-03-06
---- Description:	Gets list of components that are not running at the moment, but are required for Job ETL process 
---- =============================================

--CREATE PROCEDURE [Azure].[GetDisabledComponentsRequiredForETL]
--	@JobId int = 0
--AS
--BEGIN
--	SET NOCOUNT ON;

--	WITH RequiredComponents
--	AS
--	(
--		SELECT
--			c.ComponentId,
--			c.[ComponentName], 
--			c.[ComponentType], 
--			c.[ResourceGroup], 
--			c.[ComponentServer]
--		FROM [Azure].[Jobs] AS j
--			INNER JOIN [Azure].[JobComponentBridge] AS b ON j.[JobId] = b.[JobId]
--			INNER JOIN [Azure].[Components] AS c ON c.[ComponentId] = b.[ComponentId] 
--		WHERE j.[JobId] = @JobId
--	)
--	,CurrentlyRunningComponents
--	AS
--	(
--		SELECT
--			c.ComponentId,
--			c.[ComponentName], 
--			c.[ComponentType], 
--			c.[ResourceGroup], 
--			c.[ComponentServer]
--		FROM [Azure].[JobLog] AS l 
--			INNER JOIN [Azure].[Jobs] AS j ON l.[JobId] = j.[JobId] 
--			INNER JOIN [Azure].[JobComponentBridge] AS b ON j.[JobId] = b.[JobId]
--			INNER JOIN [Azure].[Components] AS c ON b.[ComponentId] = c.[ComponentId]
--			INNER JOIN [Azure].JobLogResult AS r ON r.JobLogResultId = l.Result
--		WHERE r.[JobResultDescription] IN ('Components started')
--	      AND c.[ComponentType] <> 'SQLAgentJob'					--SQLAgent job is not shared beetween runs
--	)
--	SELECT 	
--		RequiredComponents.ComponentId,
--		RequiredComponents.[ComponentName], 
--		RequiredComponents.[ComponentType], 
--		RequiredComponents.[ResourceGroup], 
--		RequiredComponents.[ComponentServer]  
--	FROM RequiredComponents
--		LEFT JOIN CurrentlyRunningComponents
--		ON 	RequiredComponents.ComponentId = CurrentlyRunningComponents.ComponentId
--	WHERE CurrentlyRunningComponents.ComponentId IS NULL

--	SET NOCOUNT OFF;
--END
--GO
--SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


--GO
--PRINT N'Creating [Azure].[GetFinancialJobsReadyToProcess]...';


--GO
--SET QUOTED_IDENTIFIER ON;

--SET ANSI_NULLS OFF;


--GO
---- =============================================
---- Author: Adatis Consulting - PS
---- Create date: 2017-03-06
---- Description:	Checks the source file control table and determines which Application Jobs should be run
---- =============================================

--CREATE PROCEDURE [Azure].[GetFinancialJobsReadyToProcess]
--AS
--BEGIN
--	SET NOCOUNT ON;

--	/* Always Returns Coda Jobs that are ready to process - ETL-ProcessStart Schedule must be executed only once!!! */
--	SELECT
--	   0.[SourceFileId]
--	  ,j.[ApplicationId]
--	  ,j.JobId
--	FROM [Azure].[Jobs] AS j

--    SET NOCOUNT OFF;
--END
--GO
--SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


--GO
--PRINT N'Creating [Azure].[GetJobComponentsReadyForShutDown]...';


--GO
--SET QUOTED_IDENTIFIER ON;

--SET ANSI_NULLS OFF;


--GO
---- =============================================
---- Author: Adatis Consulting - PS
---- Create date: 2017-03-06
---- Description:	Gets the most important job from Azure.JobReadyToEtl that's infrastructure is ready for ETL
---- =============================================

--CREATE PROCEDURE [Azure].[GetJobComponentsReadyForShutDown]
--	@JobId int = 0
--AS
--BEGIN
--	SET NOCOUNT ON;

--	WITH JobComponents
--	AS
--	(
--		SELECT
--			c.ComponentId,
--			c.[ComponentName], 
--			c.[ComponentType], 
--			c.[ResourceGroup], 
--			c.[ComponentServer]
--		FROM [Azure].[Jobs] AS j
--			INNER JOIN [Azure].[JobComponentBridge] AS b ON j.[JobId] = b.[JobId]
--			INNER JOIN [Azure].[Components] AS c ON c.[ComponentId] = b.[ComponentId] 
--		WHERE j.[JobId] = @JobId
--		  AND c.[ComponentType] <> 'SQLAgentJob'
--	)
--	,CurrentlyRunningComponentsThatShouldNotBeShutDown
--	AS
--	(
--		SELECT DISTINCT
--			c.ComponentId,
--			c.[ComponentName], 
--			c.[ComponentType], 
--			c.[ResourceGroup], 
--			c.[ComponentServer]
--		FROM [Azure].[JobLog] AS l 
--			INNER JOIN [Azure].[Jobs] AS j ON l.[JobId] = j.[JobId] 
--			INNER JOIN [Azure].[JobComponentBridge] AS b ON j.[JobId] = b.[JobId]
--			INNER JOIN [Azure].[Components] AS c ON b.[ComponentId] = c.[ComponentId]
--			INNER JOIN [Azure].JobLogResult AS r ON r.JobLogResultId = l.Result
--		WHERE r.[JobResultDescription] IN ('Components started')
--	      AND c.[ComponentType] <> 'SQLAgentJob'
--		  AND l.JobId <> @JobId
--	)
--	SELECT * FROM JobComponents
--	EXCEPT 
--	SELECT * FROM CurrentlyRunningComponentsThatShouldNotBeShutDown

--	SET NOCOUNT OFF;
--END
--GO
--SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


--GO
--PRINT N'Creating [Azure].[GetJobIdByApplicationId]...';


--GO
--SET QUOTED_IDENTIFIER ON;

--SET ANSI_NULLS OFF;


--GO
---- =============================================
---- Author: Adatis Consulting - ES
---- Create date: 2017-02-09
---- Description:	Updates the Azure.JobLog table to status
---- =============================================

--CREATE PROCEDURE [Azure].[GetJobIdByApplicationId] 
--	@ApplicationId int,
--	@JobId int = 0 OUTPUT
--AS
--BEGIN
--	SET NOCOUNT ON;

--	SELECT @JobId = JobId 
--	FROM [Azure].[Jobs]
--	WHERE ApplicationId = @ApplicationId

--	IF @JobId = 0
--		THROW 50000, 'Missing ApplicationId in the Azure.Jobs', 0;

--	SET NOCOUNT OFF;	
--END
--GO
--SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


--GO
--PRINT N'Creating [Azure].[GetJobReadyForEtl]...';


--GO
--SET QUOTED_IDENTIFIER ON;

--SET ANSI_NULLS OFF;


--GO
---- =============================================
---- Author: Adatis Consulting - PS
---- Create date: 2017-03-06
---- Description:	Gets the most important job from Azure.JobReadyToEtl that's infrastructure is ready for ETL
---- =============================================

--CREATE PROCEDURE [Azure].[GetJobReadyForEtl]
--AS
--BEGIN
--	SET NOCOUNT ON;
	
--	BEGIN TRANSACTION AutomationGetJobETLReady

--	/* Updates as Executed (locks record) and captures JobReadyForEtlLogId with the heighest priority */
--	DECLARE @JobReadForEtlLogIdTable TABLE (JobReadForEtlLogId int);

--	WITH MostImportantJobReadyForEtl
--	AS
--	(
--		SELECT TOP(1)
--			e.JobReadyForEtlLogId,
--			e.ExecutedAt
--		FROM Azure.JobReadyForETLLog e 
--			INNER JOIN Azure.Jobs j ON j.[JobId] = e.[JobId]
--		WHERE e.[ExecutedAt] IS NULL
--		ORDER BY j.[Priority] ASC, j.JobId ASC
--	)
--	UPDATE MostImportantJobReadyForEtl SET MostImportantJobReadyForEtl.ExecutedAt = SYSDATETIME()
--	OUTPUT inserted.JobReadyForEtlLogId INTO @JobReadForEtlLogIdTable;

--	/* Extracts @JobReadForEtlLogId from the table */
--	DECLARE @JobReadForEtlLogIdWithMostPriority int = 0;

--	SELECT TOP(1) @JobReadForEtlLogIdWithMostPriority = ISNULL(JobReadForEtlLogId,0)
--	FROM @JobReadForEtlLogIdTable

--	/* Returns data*/
--	SELECT 
--		j.[JobId],
--		j.[ApplicationId], 
--		j.[JobName] AS SqlAgentJobName
--	FROM Azure.JobReadyForETLLog e 
--		INNER JOIN Azure.Jobs j ON j.[JobId] = e.[JobId]
--	WHERE e.JobReadyForEtlLogId = @JobReadForEtlLogIdWithMostPriority

	
--	IF @@TRANCOUNT > 0
--	COMMIT

--    SET NOCOUNT OFF;
--END
--GO
--SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


--GO
--PRINT N'Creating [Azure].[GetJobReadyForShutDown]...';


--GO
--SET QUOTED_IDENTIFIER ON;

--SET ANSI_NULLS OFF;


--GO
---- =============================================
---- Author: Adatis Consulting - PS
---- Create date: 2017-03-06
---- Description:	Gets all JobId  that are ready to be shut down
---- =============================================

--CREATE PROCEDURE [Azure].[GetJobReadyForShutDown]
--AS
--BEGIN
--	SET NOCOUNT ON;
	
--	/* Get Jobs that are ready for shut down */

--	SELECT DISTINCT 
--		l.JobId,
--		l.LogId
--	FROM Azure.JobLog l
--		LEFT JOIN Azure.JobLogResult r ON l.Result = r.JobLogResultId
--	WHERE r.JobResultDescription IN ('Components ready to shutdown') 

--    SET NOCOUNT OFF;
--END
--GO
--SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


--GO
--PRINT N'Creating [Azure].[GetJobsReadyToProcess]...';


--GO
--SET QUOTED_IDENTIFIER ON;

--SET ANSI_NULLS OFF;


--GO
---- =============================================
---- Author: Adatis Consulting - PS
---- Create date: 2017-03-06
---- Description:	Checks the source file control table and determines which Application Jobs should be run
---- =============================================

--CREATE PROCEDURE [Azure].[GetJobsReadyToProcess]
--AS
--BEGIN
--	SET NOCOUNT ON;

--	BEGIN TRANSACTION AutomationGetJobETLReady
--		BEGIN TRY

--			/* Get list of jobs that are associatied with ready to process source files and reset [IsReadyForEtlProcessing] flag to 0 */
--			DECLARE @JobsReadyToProcess TABLE (SourceFileId int, AppcliationId int, JobId int);
--			WITH JobsReadyForEtlProcessing
--			AS
--			(
--				SELECT
--				   s.[SourceFileId]
--				  ,s.[ApplicationId]
--				  ,j.JobId
--				  ,s.IsReadyForEtlProcessing
--				FROM [Control].[SourceFile] AS s
--					JOIN [Azure].[Jobs] AS j ON j.ApplicationId = s.ApplicationId
--				WHERE [IsReadyForEtlProcessing] = 1
--			)
--			Update JobsReadyForEtlProcessing SET [IsReadyForEtlProcessing] = 0 
--			OUTPUT inserted.SourceFileId, inserted.ApplicationId, deleted.JobId INTO @JobsReadyToProcess;	

--			/* Returns Jobs ready to process */
--				SELECT
--				   s.[SourceFileId]
--				  ,s.[ApplicationId]
--				  ,j.JobId
--				FROM [Control].[SourceFile] AS s
--					JOIN [Azure].[Jobs] AS j ON j.ApplicationId = s.ApplicationId
--					JOIN @JobsReadyToProcess AS r ON s.SourceFileId = r.SourceFileId
--		END TRY
--		BEGIN CATCH
--			IF @@TRANCOUNT > 0 AND @@ERROR <> 0
--				ROLLBACK;
--		END CATCH
--	IF @@TRANCOUNT > 0
--	COMMIT

--    SET NOCOUNT OFF;
--END
--GO
--SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


--GO
--PRINT N'Creating [Azure].[GetLoadEndComponents]...';


--GO
--SET QUOTED_IDENTIFIER ON;

--SET ANSI_NULLS OFF;


--GO
---- =============================================
---- Author: Adatis Consulting - ES
---- Create date: 2017-02-15
---- Description:	Get a list of components that we would like to switch off and they are not being used by any other jobs
---- =============================================

--CREATE PROCEDURE [Azure].[GetLoadEndComponents] 

--AS
--BEGIN
--SET NOCOUNT ON;


----Get a list of components that we would like to switch off and they are not being used by any other jobs


--SELECT DISTINCT c.[ComponentName] , c. [ComponentType] , c.[ResourceGroup] , c.[ComponentServer]
--FROM Azure.JobLog l 
--LEFT JOIN  Azure.JobComponentBridge b ON l.JobId = b.JobId
--LEFT JOiN Azure.Components c on c.ComponentId = b.ComponentId
--WHERE Result = '2' and c.ComponentId not in (	
--											  Select  c.ComponentId
--											  FROM [Azure].[JobLog] L
--											  LEFT JOIN  Azure.JobComponentBridge c ON l.JobId = c.JobId
--											  WHERE [Result] = 1)  




--END
--GO
--SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


--GO
--PRINT N'Creating [Azure].[GetLoadJob]...';


--GO
--SET QUOTED_IDENTIFIER ON;

--SET ANSI_NULLS OFF;


--GO
---- =============================================
---- Author:		Adatis Consulting - SAW
---- Create date: 2016-10-11
---- Description:	Gets Action Details from Automationmatrix about the state of the action performed on the object
---- =============================================
--CREATE PROCEDURE   [Azure].[GetLoadJob] 
--AS
--BEGIN
--SET NOCOUNT ON;

--DECLARE @ApplicationId int = 0;
--DECLARE @IsAnythingToProcess BIT = 0;

--EXEC [Azure].[IsAnythingToProcess] 
--		@Process = @IsAnythingToProcess OUT;




--/* Gets the ApplicationId of the file to process */
--IF @IsAnythingToProcess = 1
--	    SET @ApplicationId = (SELECT TOP(1) ApplicationID
--									FROM [Control].[SourceFile]
--									WHERE StageParentLoadId IS NULL
--									 AND FileExtractedDate IS NOT NULL
--									-- AND [BlobUploadDate]  IS NOT NULL
--									 AND [StageDate]	    IS NULL
--									 AND [CleanDate]		IS NULL
--									 AND [WarehouseDate]	IS NULL
--									 ORDER BY ApplicationID)



--				SELECT DISTINCT j.[JobId]
--				 FROM  [Azure].[Components] c 
--				 LEFT JOIN [Azure].[JobComponentBridge] b ON c.[ComponentId]= b.[ComponentId]
--				 LEFT JOIN [Azure].[Jobs] j ON j.[JobId]= b.[JobId]
--				 WHERE j.[ApplicationId]= @ApplicationId;

				
--END
--GO
--SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


--GO
--PRINT N'Creating [Azure].[GetLoadJobEnd]...';


--GO
--SET QUOTED_IDENTIFIER ON;

--SET ANSI_NULLS OFF;


--GO
---- =============================================
---- Author:		Adatis Consulting - SAW
---- Create date: 2016-10-11
---- Description:	Gets Action Details from Automationmatrix about the state of the action performed on the object
---- =============================================
--CREATE PROCEDURE   [Azure].[GetLoadJobEnd] 
--AS
--BEGIN
--SET NOCOUNT ON;


--SELECT DISTINCT JobId
--FROM Azure.JobLog 
--WHERE Result = 2;

--END
--GO
--SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


--GO
--PRINT N'Creating [Azure].[GetMostRecentProcessExecutionStepsAtStatus]...';


--GO
--SET QUOTED_IDENTIFIER ON;

--SET ANSI_NULLS OFF;


--GO
---- =============================================
---- Author: Adatis Consulting - PS
---- Create date: 2017-03-13
---- Description:	Updates the Azure.JobLog table to status
---- =============================================

--CREATE PROCEDURE [Azure].[GetMostRecentProcessExecutionStepsAtStatus] 
--	@Status int
--AS
--BEGIN
--	WITH Executions
--	AS
--	(
--		SELECT 
--			Row_Number() OVER (PARTITION BY s.[ProcessExecutionId] ORDER BY s.[ExecutionStepId] DESC) AS RowNumber
--			,e.[ProcessId]
--			,s.*   
--		FROM Azure.ProcessExecution e
--			INNER JOIN Azure.ProcessExecutionStep s ON e.[ProcessExecutionId] = s.[ProcessExecutionId]
--	)
--	SELECT 
--		 [ProcessId]
--		,[ProcessExecutionId]
--		,[ExecutionStepId]
--		,[CreatedAt]
--		,[Status]
--		,[OperationId]
--	FROM Executions
--	WHERE RowNumber = 1
--	  AND Status = @Status
--END
--GO
--SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


--GO
--PRINT N'Creating [Azure].[GetProcessByApplication]...';


--GO
--SET QUOTED_IDENTIFIER ON;

--SET ANSI_NULLS OFF;


--GO
---- =============================================
---- Author: Adatis Consulting - PS
---- Create date: 2017-03-23
---- Description:	Gets Process by Application
---- =============================================

--CREATE PROCEDURE Azure.GetProcessByApplication
--	@ApplicationId int,
--	@ProcessId int OUTPUT
--AS
--BEGIN
--	SET NOCOUNT ON;

--	SELECT TOP(1)
--		@ProcessId = ProcessId 
--	FROM Azure.Process
--	WHERE ApplicationId =  @ApplicationId;

--	SET NOCOUNT OFF;
--END
--GO
--SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


--GO
--PRINT N'Creating [Azure].[GetProcessComponentDesiredStateForTime]...';


--GO
--SET QUOTED_IDENTIFIER ON;

--SET ANSI_NULLS OFF;


--GO
---- =============================================
---- Author: Adatis Consulting - PS
---- Create date: 2017-03-23
---- Description:	Get Processed and Components that should run now
---- =============================================

--CREATE PROCEDURE [Azure].[GetProcessComponentDesiredStateForTime]
--	@DesiredStateTimeStart Time,
--	@DesiredStateTimeEnd Time = '23:59:59.999'
--AS
--BEGIN
--	SET NOCOUNT ON;

--	SELECT
--		p.ProcessId,
--		pc.ComponentId,
--		pc.DesiredComponentStateId,
--		c.StateId,
--		c.ResourceGroup,
--		c.Server,
--		c.Name,
--		ct.TypeName
--	FROM Azure.Process p
--	JOIN Azure.ProcessState ps ON ps.ProcessStateId = p.ProcessStateId 
--	JOIN Azure.ProcessComponent pc ON pc.ProcessId = p.ProcessId
--	JOIN Azure.Component c ON c.ComponentId = pc.ComponentId
--	JOIN Azure.ComponentType ct ON c.TypeId = ct.ComponentTypeId
--	WHERE [DesiredComponentStateTime] >= @DesiredStateTimeStart
--	AND	[DesiredComponentStateTime] <= @DesiredStateTimeEnd
--	AND ps.StateName = 'Stopped'

--	SET NOCOUNT OFF;
--END
--GO
--SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


--GO
--PRINT N'Creating [Azure].[GetProcessExecutionStepsForLastProcessExecution]...';


--GO
--SET QUOTED_IDENTIFIER ON;

--SET ANSI_NULLS OFF;


--GO
---- =============================================
---- Author:		Adatis Consulting - PS
---- Create date: 2017-03-15
---- Description:	Inserts ProcessExecution
---- =============================================

--CREATE PROCEDURE [Azure].[GetProcessExecutionStepsForLastProcessExecution] 
--	@ProcessExecutionId int
--AS
--BEGIN
--	WITH CTE
--	AS
--	(
--		SELECT TOP(1)
--			 e.[ProcessExecutionId]
--			,e.[ProcessId]
--			,e.[CreatedAt]
--		FROM [Azure].[ProcessExecution] e
--		WHERE e.[ProcessExecutionId] = @ProcessExecutionId 
--		ORDER BY e.[CreatedAt] DESC
--	)
--	SELECT
--		 s.[ProcessExecutionId]
--		,s.[CreatedAt]
--		,s.[Status]
--		,s.[OperationId]  
--	FROM CTE
--	INNER JOIN [Azure].[ProcessExecutionStep] s ON CTE.ProcessExecutionId = s.[ProcessExecutionId];
--END;
--GO
--SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


--GO
--PRINT N'Creating [Azure].[GetProcessReadyForEtl]...';


--GO
--SET QUOTED_IDENTIFIER ON;

--SET ANSI_NULLS OFF;


--GO
---- =============================================
---- Author: Adatis Consulting - PS
---- Create date: 2017-03-24
---- Description:	Gets Process components that are ready for ETL
---- To be called from SQLAgentJob Invoker SSISpackage
---- =============================================

--CREATE PROCEDURE Azure.GetProcessReadyForEtl
--AS
--BEGIN
--	SET NOCOUNT ON;

--	SELECT
--		p.[ProcessId],
--		c.[ComponentId],
--		c.[Name]
--	FROM [Azure].[Process] p
--	JOIN [Azure].[ProcessState] ps ON ps.ProcessStateId = p.ProcessStateId
--	JOIN [Azure].[ProcessComponent] pc ON pc.ProcessId = p.ProcessId
--	JOIN [Azure].[Component] c ON c.ComponentId = pc.ComponentId
--	JOIN [Azure].ComponentType ct ON ct.ComponentTypeId = c.TypeId
--	JOIN Azure.ComponentState cs ON cs.ComponentStateId = c.StateId
--	WHERE ct.TypeName = 'SQLAgentJob'
--	  AND cs.StateName = 'Starting';

--	SET NOCOUNT OFF;
--END;
--GO
--SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


--GO
--PRINT N'Creating [Azure].[GetScheduledComponents]...';


--GO
--SET QUOTED_IDENTIFIER ON;

--SET ANSI_NULLS OFF;


--GO
---- =============================================
---- Author:		Adatis Consulting - SAW
---- Create date: 2016-10-11
---- Description:	Gets Action Details from Automationmatrix about the state of the action performed on the object
---- =============================================
--CREATE PROCEDURE [Azure].[GetScheduledComponents]
--	@ScheduleName varchar(255) --schedule name
--AS
--BEGIN
--	SET NOCOUNT ON;

--	/* Declare variables */
--	DECLARE @ShouldScheduleBeSkipped BIT;

--	/* Check if schedule should run today */
--	EXEC [Azure].[CheckScheduleOverride]
--		@ScheduleName = @ScheduleName,
--		@ShouldScheduleBeSkiped = @ShouldScheduleBeSkipped OUTPUT

--	SET NOCOUNT OFF;

--	/* Returns components for the automation job*/
--	SELECT 
--		ComponentName,
--		ComponentServer,
--		ResourceGroup,
--		ComponentType,
--		Action
--	FROM Azure.Schedule S
--		INNER JOIN Azure.Components C on S.ComponentId = C.ComponentId
--	WHERE S.AutomationJob = @ScheduleName
--		AND @ShouldScheduleBeSkipped = 0;
--END;
--GO
--SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


--GO
--PRINT N'Creating [Azure].[InsertComponentStateLog]...';


--GO
--SET QUOTED_IDENTIFIER ON;

--SET ANSI_NULLS OFF;


--GO
---- =============================================
---- Author: Adatis Consulting - PS
---- Create date: 2017-03-29
---- Description:	Logs Component state at current UTC time
---- =============================================

--CREATE PROCEDURE Azure.InsertComponentStateLog
--	@ComponentId int,
--	@ComponentStateId int
--AS
--BEGIN
--	SET NOCOUNT ON;

--		INSERT INTO [Azure].[ComponentStateLog]
--			(ComponentId, ComponentStateId, CreatedAt)
--		VALUES 
--			(@ComponentId, @ComponentStateId, SYSUTCDATETIME());

--	SET NOCOUNT OFF;
--END;
--GO
--SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


--GO
--PRINT N'Creating [Azure].[InsertJobEndLog]...';


--GO
--SET QUOTED_IDENTIFIER ON;

--SET ANSI_NULLS OFF;


--GO
---- =============================================
---- Author: Adatis Consulting - ES
---- Create date: 2017-02-09
---- Description:	Checks the source file control table and determines whether load is required and gives the list of components that are needed to run the job
---- =============================================

--CREATE PROCEDURE [Azure].[InsertJobEndLog] 
--@JobId int,
--@OperationId varchar(250),
--@ActionName varchar (255)
--AS
--BEGIN
--	SET NOCOUNT ON;


--DECLARE @OperationGUID uniqueidentifier 
--SET @OperationGUID = CONVERT(uniqueidentifier, @OperationId)


--INSERT INTO [Azure].[JobLog] 
--( [JobId],
--  [ActionName],
--  [ActionDescription],
--  [StartDate],
--  [Result],
--  [OperationID])

--VALUES
--(@JobId,
-- 'Job End',
-- 'Shutting down the components used by this jobs that are not being used by anything else' ,
-- sysdatetime(),
-- 3,
-- @OperationGUID)


--END
--GO
--SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


--GO
--PRINT N'Creating [Azure].[InsertJobLog]...';


--GO
--SET QUOTED_IDENTIFIER ON;

--SET ANSI_NULLS OFF;


--GO
---- =============================================
---- Author: Adatis Consulting - PS
---- Create date: 2017-03-06
---- Description:	Creates JobLog entry
---- =============================================

----Alternative solution for job logging

--CREATE PROCEDURE [Azure].[InsertJobLog]
--	@JobId int,
--	@ActionName varchar(255),
--	@ActionDescription varchar(255),
--	@OperationId uniqueidentifier,
--	@Status int
--AS
--BEGIN
--	SET NOCOUNT ON;

--	INSERT INTO Azure.JobLog
--		([JobId],[ActionName],[ActionDescription],[StartDate],[OperationID],[Result])
--	VALUES
--		(@JobId,@ActionName,@ActionDescription,SYSDATETIME(),@OperationID,@Status)

--    SET NOCOUNT OFF;
--END
--GO
--SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


--GO
--PRINT N'Creating [Azure].[InsertJobReadyForEtlLog]...';


--GO
--SET QUOTED_IDENTIFIER ON;

--SET ANSI_NULLS OFF;


--GO
---- =============================================
---- Author: Adatis Consulting - PS
---- Create date: 2017-03-06
---- Description:	Gets the most important job from Azure.JobReadyToEtl that's infrastructure is ready for ETL
---- =============================================

--CREATE PROCEDURE [Azure].[InsertJobReadyForEtlLog]
--	@JobId int
--AS
--BEGIN
--	SET NOCOUNT ON;

--	INSERT INTO Azure.JobReadyForEtlLog
--		(JobId, CreatedAt)
--	VALUES
--		(@JobId, SYSDATETIME())

--    SET NOCOUNT OFF;
--END
--GO
--SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


--GO
--PRINT N'Creating [Azure].[InsertJobStartLog]...';


--GO
--SET QUOTED_IDENTIFIER ON;

--SET ANSI_NULLS OFF;


--GO
---- =============================================
---- Author: Adatis Consulting - ES
---- Create date: 2017-02-09
---- Description:	Checks the source file control table and determines whether load is required and gives the list of components that are needed to run the job
---- =============================================

--CREATE PROCEDURE [Azure].[InsertJobStartLog] 
--@JobId int,
--@OperationId varchar(250)

--AS
--BEGIN
--	SET NOCOUNT ON;


--DECLARE @OperationGUID uniqueidentifier 
--SET @OperationGUID = CONVERT(uniqueidentifier, @OperationId)


--INSERT INTO [Azure].[JobLog] 
--( [JobId],
--  [ActionName],
--  [ActionDescription],
--  [StartDate],
--  [Result],
--  [OperationID])

--VALUES
--(@JobId,
-- 'Job Start',
-- 'Starting the components needed for this job, then running the ETL' ,
-- sysdatetime(),
-- 1,
-- @OperationGUID)


--END
--GO
--SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


--GO
--PRINT N'Creating [Azure].[InsertProcessExecution]...';


--GO
--SET QUOTED_IDENTIFIER ON;

--SET ANSI_NULLS OFF;


--GO
---- =============================================
---- Author:		Adatis Consulting - PS
---- Create date: 2017-03-15
---- Description:	Inserts ProcessExecution
---- =============================================

--CREATE PROCEDURE [Azure].[InsertProcessExecution] 
--	@ProcessId int
--AS
--BEGIN
--	INSERT INTO [Azure].[ProcessExecution]
--		([ProcessId], [CreatedAt])
--	VALUES
--		(@ProcessId, SYSDATETIME())
--END;
--GO
--SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


--GO
--PRINT N'Creating [Azure].[InsertProcessExecutionStep]...';


--GO
--SET QUOTED_IDENTIFIER ON;

--SET ANSI_NULLS OFF;


--GO
---- =============================================
---- Author:		Adatis Consulting - PS
---- Create date: 2017-03-15
---- Description:	Inserts ProcessExecutionStep
---- =============================================

--CREATE PROCEDURE [Azure].[InsertProcessExecutionStep] 
--	@ProcessExecutionId int,
--	@OperationId uniqueidentifier,
--	@Status int
--AS
--BEGIN
--	INSERT INTO [Azure].[ProcessExecutionStep]
--		([ProcessExecutionId], [CreatedAt], [Status], [OperationId])
--	VALUES
--		(@ProcessExecutionId, SYSDATETIME(), @Status, @OperationId)
--END;
--GO
--SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


--GO
--PRINT N'Creating [Azure].[InsertProcessStateLog]...';


--GO
--SET QUOTED_IDENTIFIER ON;

--SET ANSI_NULLS OFF;


--GO
---- =============================================
---- Author: Adatis Consulting - PS
---- Create date: 2017-03-24
---- Description:	Logs Process state at current UTC time
---- =============================================

--CREATE PROCEDURE Azure.InsertProcessStateLog
--	@ProcessId int,
--	@ProcessStateId int
--AS
--BEGIN
--	SET NOCOUNT ON;

--		INSERT INTO [Azure].[ProcessStateLog]
--			(ProcessId, ProcessStateId, CreatedAt)
--		VALUES 
--			(@ProcessId, @ProcessStateId, SYSUTCDATETIME());

--	SET NOCOUNT OFF;
--END;
--GO
--SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


--GO
--PRINT N'Creating [Azure].[InsertScheduleOverride]...';


--GO
--SET QUOTED_IDENTIFIER ON;

--SET ANSI_NULLS OFF;


--GO
---- =============================================
---- Author:		Adatis Consulting - PS
---- Create date: 2017-03-06
---- Description:	Inserts skip dates into [Azure].[ScheduleOverride] when ETL should not be performed. Dates are generated based on first day date and amount of days to skip.  
---- =============================================

--CREATE PROCEDURE [Azure].[InsertScheduleOverride]
--	@ScheduleName VARCHAR(250),
--	@SkipDateStart DATE,
--	@AmountOfDays INT = 1
--AS
--BEGIN
--	SET NOCOUNT ON;
--	/* Variables setup */
--	DECLARE @Now datetime2(7) = SYSDATETIME();
--	DECLARE @CurrentAmountOfDays INT = 0;
--	DECLARE @SkipDates TABLE (
--		ScheduleName	VARCHAR(250), 
--		SkipRunningDate DATE, 
--		CreatedAt		DATETIME2(7)
--	);

--	/* Generates dates to be skipped based on first day date and amount of days to be skipped */
--	WHILE(@CurrentAmountOfDays < @AmountOfDays)
--	BEGIN
--		INSERT INTO @SkipDates --[Azure].[ScheduleOverride]
--			(ScheduleName, SkipRunningDate, CreatedAt)
--		VALUES 
--			(@ScheduleName, DATEADD(DAY,@CurrentAmountOfDays,@SkipDateStart),@Now)
--		SET @CurrentAmountOfDays = @CurrentAmountOfDays + 1;
--	END;

--	SET NOCOUNT OFF;

--	/*Merges skip date to [Azure].[ScheduleOverride] */
--	MERGE INTO [Azure].[ScheduleOverride] AS T  
--    USING @SkipDates As S
--		ON (S.ScheduleName = T.ScheduleName)  
--	   AND (S.SkipRunningDate = T.SkipRunningDate) 
--    WHEN NOT MATCHED BY TARGET THEN
--		INSERT (ScheduleName, SkipRunningDate, CreatedAt) VALUES (S.ScheduleName, S.SkipRunningDate, S.CreatedAt);
--END;
--GO
--SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


--GO
--PRINT N'Creating [Azure].[ResetScheduleOverride]...';


--GO
--SET QUOTED_IDENTIFIER ON;

--SET ANSI_NULLS OFF;


--GO
---- =============================================
---- Author:		Adatis Consulting - SAW
---- Create date: 2016-10-11
---- Description:	Removes all schedule overrides, should be run every morning
---- =============================================
--CREATE PROCEDURE [Azure].[ResetScheduleOverride]
--	@AutomationJob varchar(255),
--	@ComponentName varchar(250)
--AS
--BEGIN
--	UPDATE S 
--		SET OverrideFlg = 0
--	FROM Azure.Schedule S
--END;
--GO
--SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


--GO
--PRINT N'Creating [Azure].[SetScheduleOverride]...';


--GO
--SET QUOTED_IDENTIFIER ON;

--SET ANSI_NULLS OFF;


--GO
---- =============================================
---- Author:		Adatis Consulting - SAW
---- Create date: 2016-10-11
---- Description:	Updates the schedule to override a component from a specific schedule
---- =============================================
--CREATE PROCEDURE [Azure].[SetScheduleOverride]
--	@AutomationJob varchar(255),
--	@ComponentName varchar(250)
--AS
--BEGIN
--	UPDATE S 
--		SET OverrideFlg = 1
--	FROM Azure.Schedule S
--		inner join Azure.Components C on S.ComponentId = C.ComponentId
--	WHERE S.AutomationJob = @AutomationJob
--		AND C.ComponentName = @ComponentName
--END;
--GO
--SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


--GO
--PRINT N'Creating [Azure].[UpdateComponentState]...';


--GO
--SET QUOTED_IDENTIFIER ON;

--SET ANSI_NULLS OFF;


--GO
---- =============================================
---- Author: Adatis Consulting - PS
---- Create date: 2017-03-23
---- Description:	Update component state
---- =============================================

--CREATE PROCEDURE [Azure].[UpdateComponentState]
--	@ComponentId int,
--	@ComponentStateId int
--AS
--BEGIN
--	SET NOCOUNT ON;

--	UPDATE Azure.Component SET [StateId] = @ComponentStateId
--	WHERE ComponentId = @ComponentId

--	SET NOCOUNT OFF;
--END;
--GO
--SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


--GO
--PRINT N'Creating [Azure].[UpdateJobEndLog]...';


--GO
--SET QUOTED_IDENTIFIER ON;

--SET ANSI_NULLS OFF;


--GO
---- =============================================
---- Author: Adatis Consulting - ES
---- Create date: 2017-02-09
---- Description:	Updates the Azure.JobLog table to set Result= 4 when all the components are being shutdown
---- 1=running, 2=successful pending shutdown  3= failed 4= Complete
---- =============================================

--CREATE PROCEDURE [Azure].[UpdateJobEndLog] 
--@JobId int,
--@OperationId varchar(250)

--AS
--BEGIN
--	SET NOCOUNT ON;


--DECLARE @OperationGUID uniqueidentifier 
--SET @OperationGUID = CONVERT(uniqueidentifier, @OperationId)



--UPDATE L
--SET L.[Result] = 4,
--L.[EndDate]= sysdatetime(),
--L.[OperationID]= @OperationGUID
--FROM  [Azure].[JobLog] L
--WHERE [JobId] = @JobId
--AND [OperationID] = @OperationId
				
--END
--GO
--SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


--GO
--PRINT N'Creating [Azure].[UpdateJobEntriesAsFinished]...';


--GO
--SET QUOTED_IDENTIFIER ON;

--SET ANSI_NULLS OFF;


--GO
---- =============================================
---- Author: Adatis Consulting - PS
---- Create date: 2017-03-13
---- Description:	Updates the Azure.JobLog table to status
---- =============================================

--CREATE PROCEDURE [Azure].[UpdateJobEntriesAsFinished] 
--	@JobId int,
--	@OperationId uniqueidentifier,
--	@Status int
--AS
--BEGIN
--	SET NOCOUNT ON;

--	/* Updates JobLog all entries that is ready to be shut down */
--	WITH CTE
--	AS
--	(
--		SELECT TOP (1) 
--			 L.[Result]
--			,L.[EndDate]
--			,L.OperationID
--		FROM [Azure].[JobLog] AS L
--			INNER JOIN Azure.JobLogResult AS R ON L.Result = R.JobLogResultId 
--		WHERE [JobId] = @JobId
--		  AND R.JobResultDescription IN ('Finishing with components')
--		  AND L.EndDate IS NULL
--		ORDER BY JobId ASC, LogId DESC
--	)
--	UPDATE CTE
--	SET	 [Result] = @Status
--		,[OperationID] = @OperationId;

--	/* Updates JobLog all entries that is ready to be shut down */
--	WITH CTE
--	AS
--	(
--		SELECT TOP (1) 
--			 L.[Result]
--			,L.[EndDate]
--			,L.OperationID
--		FROM [Azure].[JobLog] AS L
--			INNER JOIN Azure.JobLogResult AS R ON L.Result = R.JobLogResultId 
--		WHERE [JobId] = @JobId
--		  AND R.JobResultDescription IN ('Finishing with components')
--		  AND L.EndDate IS NULL
--		ORDER BY JobId ASC, LogId DESC
--	)
--	UPDATE CTE
--	SET	 [Result] = @Status
--		,[OperationID] = @OperationId
--		,[EndDate] = SYSDATETIME();

--	SET NOCOUNT OFF;	
--END
--GO
--SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


--GO
--PRINT N'Creating [Azure].[UpdateJobEntriesAsFinishing]...';


--GO
--SET QUOTED_IDENTIFIER ON;

--SET ANSI_NULLS OFF;


--GO
---- =============================================
---- Author: Adatis Consulting - PS
---- Create date: 2017-03-13
---- Description:	Updates the Azure.JobLog table to status
---- =============================================

--CREATE PROCEDURE [Azure].[UpdateJobEntriesAsFinishing] 
--	@JobId int,
--	@OperationId uniqueidentifier,
--	@Status int
--AS
--BEGIN
--	SET NOCOUNT ON;

--	/* Updates JobLog all entries that is ready to be shut down */
--	WITH CTE
--	AS
--	(
--		SELECT TOP (1) 
--			 L.[Result]
--			,L.[EndDate]
--			,L.OperationID
--		FROM [Azure].[JobLog] AS L
--			INNER JOIN Azure.JobLogResult AS R ON L.Result = R.JobLogResultId 
--		WHERE [JobId] = @JobId
--		  AND R.JobResultDescription IN ('Components started','Components ready to shutdown')
--		ORDER BY JobId ASC
--	)
--	UPDATE CTE
--	SET	 [Result] = @Status
--		,[OperationID] = @OperationId;

--	SET NOCOUNT OFF;	
--END
--GO
--SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


--GO
--PRINT N'Creating [Azure].[UpdateJobLog]...';


--GO
--SET QUOTED_IDENTIFIER ON;

--SET ANSI_NULLS OFF;


--GO
---- =============================================
---- Author: Adatis Consulting - ES
---- Create date: 2017-02-09
---- Description:	Updates the Azure.JobLog table to status
---- =============================================

--CREATE PROCEDURE [Azure].[UpdateJobLog] 
--	@JobId int,
--	@OperationId uniqueidentifier,
--	@Status int
--AS
--BEGIN
--	SET NOCOUNT ON;
	
--	WITH CTE
--	AS
--	(
--		SELECT TOP (1) 
--			 L.[Result]
--			,L.[EndDate]
--			,L.OperationID
--		FROM [Azure].[JobLog] AS L
--			INNER JOIN Azure.JobLogResult AS R ON L.Result = R.JobLogResultId 
--		WHERE [JobId] = @JobId
--		  AND R.JobResultDescription IN ('Starting components','Finishing with components')
--		  AND L.EndDate IS NULL
--		ORDER BY JobId ASC
--	)
--	UPDATE CTE
--	SET	 [Result] = @Status
--		,[EndDate] = sysdatetime()
--		,[OperationID] = @OperationId 

--	SET NOCOUNT OFF;	
--END
--GO
--SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


--GO
--PRINT N'Creating [Azure].[UpdateJobStartLog]...';


--GO
--SET QUOTED_IDENTIFIER ON;

--SET ANSI_NULLS OFF;


--GO
---- =============================================
---- Author: Adatis Consulting - ES
---- Create date: 2017-02-09
---- Description:	Updates the Azure.JobLog table to set Result= 2 when all the components have successfully started and the SQL agent job has been successful
---- 1=running, 2=successful pending shutdown  3= failed 4= Complete
---- =============================================

--CREATE PROCEDURE [Azure].[UpdateJobStartLog] 
--@JobId int

--AS
--BEGIN
--	SET NOCOUNT ON;


--UPDATE L
--SET L.[Result] = 2,
--L.[EndDate]= sysdatetime()
--FROM  [Azure].[JobLog] L
--WHERE [JobId] = @JobId
--AND L.[Result] = 1
--END
--GO
--SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


--GO
--PRINT N'Creating [Azure].[UpdateProcessState]...';


--GO
--SET QUOTED_IDENTIFIER ON;

--SET ANSI_NULLS OFF;


--GO
---- =============================================
---- Author: Adatis Consulting - PS
---- Create date: 2017-03-23
---- Description:	Updates Process state
---- =============================================

--CREATE PROCEDURE [Azure].[UpdateProcessState]
--	@ProcessId int,
--	@ProcessStateId int
--AS
--BEGIN
--	SET NOCOUNT ON;

--	UPDATE [Azure].[Process]
--	SET ProcessStateId = @ProcessStateId
--	WHERE ProcessId = @ProcessId;

--	SET NOCOUNT OFF;
--END
--GO
--SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


--GO
--PRINT N'Creating [Reporting].[ObtainDataThroughputData]...';


--GO
--SET QUOTED_IDENTIFIER ON;

--SET ANSI_NULLS OFF;


--GO
--CREATE PROC [Reporting].[ObtainDataThroughputData](@Date Date)

--AS

--DECLARE @StartLoadId int
--DECLARE @FinishExecutionIdId int
--DECLARE @FinishLoadId int
--DECLARE @StartTimeLastMonth As Date
--DECLARE @LoadDate As Date

----Find the beginning of the most recent load - This is Where PackageName = 'SourceToStageProcess'

--SELECT @StartLoadID = MAX(LoadID) 
--FROM [Audit].[PackageLoad]
--WHERE PackageName LIKE '%SourceToStage%Process%'
--AND CONVERT(Date, StartTime) <= @Date 

----Find the Execution Id for End of the most recent Load

--SELECT @FinishExecutionIdID = ISNULL(Min(ExecutionId),999999) 
--FROM [Audit].[PackageLoad]
----WHERE PackageName LIKE '%OLAP%Process%'
--WHERE PackageName LIKE '%Analytics%Process%'
--AND LoadId > @StartLoadID

----Find the last LoadId for the Load

--SELECT @FinishLoadId = MAX(LoadId) 
--FROM [Audit].[PackageLoad]
--WHERE ExecutionId = @FinishExecutionIdID


----PRINT @FinishLoadID  

------Find the day of the Load - we are only going to include Loads that occured on the same day, 
------this will need to be amended if ETL is running over a day.

--SELECT @LoadDate = Convert(Date, StartTime)
--FROM [Audit].[PackageLoad]
--WHERE LoadId = @StartLoadID


----Find the start time last month, we only want to return a months worth of loads

--SELECT 
--	@StartTimeLastMonth = DATEADD(mm, -1, MAX(CAST(StartTime AS DATE))) 
--FROM	
--	Audit.PackageLoad PL
--LEFT JOIN (Select Distinct package_guid From Audit.vPackage Where Name LIKE '%Process%') PD 
--	ON PL.PackageGUID = PD.Package_GUID 
--WHERE CONVERT(Date, StartTime) <= @Date

----Obtain Current Row Counts and Statuses
--;WITH CurrentLoad AS 
--(
--SELECT 
--	 MIN(RT.LoadId) As CurrentLoadId
--	,SUM(RT.InsertedRows) AS SuccessRows
--	,ProcessStream + ' Success Rows' As RowDefinition
--	,CASE WHEN LS.Description = 'Load Failed' THEN '#fff8f9' ELSE '#f9fff8' END As IndicatorColour 
--FROM [Audit].[RowThroughput] RT
--INNER JOIN [Audit].[PackageLoad] PL
--	ON RT.LoadId = PL.LoadId
--INNER JOIN [Control].[LoadStatusType] LS
--	ON LS.LoadStatusTypeId = PL.LoadStatusId
--WHERE RT.LoadId >= @StartLoadID
--AND RT.ExecutableId <= @FinishExecutionIdID
--AND CONVERT(Date, StartTime) <= @LoadDate
--GROUP BY ProcessStream, LS.Description

--UNION ALL
 
--SELECT 
--	 MIN(RT.LoadId) As MinLoadId
--	,SUM(RT.UpdatedRows) AS UpdatedRows
--	,ProcessStream + ' Updated Rows' As RowDefinition
--	,CASE WHEN LS.Description = 'Load Failed' THEN '#fff8f9' ELSE '#f9fff8' END As IndicatorColour 
--FROM [Audit].[RowThroughput] RT
--INNER JOIN [Audit].[PackageLoad] PL
--	ON RT.LoadId = PL.LoadId
--INNER JOIN [Control].[LoadStatusType] LS
--	ON LS.LoadStatusTypeId = PL.LoadStatusId
--WHERE RT.LoadId > = @StartLoadID
--AND CONVERT(Date, StartTime) <= @LoadDate
--AND RT.ExecutionId <= @FinishExecutionIdID
--GROUP BY ProcessStream, LS.Description

--UNION ALL

--SELECT 
--	-2 As MinLoadId
--	,COUNT(*) AS BadRows 
--	,'Bad Rows' As RowDefinition
--	,CASE WHEN COUNT(*) > 0 THEN '#fff8f9' ELSE '#f9fff8' END As IndicatorColour
--FROM Audit.EventFact EF
--INNER JOIN Audit.PackageLoad PL
--	ON Ef.LoadId = PL.LoadId
--WHERE EF.LoadId > = @StartLoadID AND ScreenId IS NULL
--AND CONVERT(Date, StartTime) <= @LoadDate
--AND EF.LoadId <=  @FinishLoadId

--UNION ALL

--SELECT 
--	-1 As MinLoadId
--	,COUNT(*) AS BadRows 
--	,'Rows Failed Data Quality' As RowDefinition
--	,CASE WHEN COUNT(*) > 0 THEN '#fff8f9' ELSE '#f9fff8' END As IndicatorColour --Red #fff8f9 Green 
--FROM Audit.EventFact EF
--INNER JOIN [Audit].[PackageLoad] PL
--	ON EF.LoadId = PL.LoadId
--WHERE EF.LoadId > = @StartLoadID AND ScreenId IS NOT NULL
--AND CONVERT(Date, StartTime) <= @LoadDate
--AND EF.LoadId <=  @FinishLoadId
--)


--,PreviousLoads AS 
--(
--SELECT 
--	 RT.ExecutionId As PreviousLoadId
--	,SUM(RT.InsertedRows) AS PreviousSuccessRows
--	,ProcessStream + ' Success Rows' As RowDefinition
--FROM [Audit].[RowThroughput] RT
--WHERE RT.LoadId < = @StartLoadID AND RT.UpdatedDate > @StartTimeLastMonth
--GROUP BY ProcessStream, ExecutionId

--UNION ALL
 
--SELECT 
--	 RT.ExecutionId As PreviousLoadId
--	,SUM(RT.UpdatedRows) AS UpdatedRows
--	,ProcessStream + ' Updated Rows' As RowDefinition
--FROM [Audit].[RowThroughput] RT
--WHERE RT.LoadId < = @StartLoadID AND RT.UpdatedDate > @StartTimeLastMonth
--AND CONVERT(Date, UpdatedDate) <= @Date
--GROUP BY ProcessStream, ExecutionId

--UNION ALL

--SELECT 
--	PL.LoadId As PreviousLoadId
--	,CASE WHEN EF.LoadId IS NULL Then 0 ELSE COUNT(*) END AS DataQualityRows
--	,'Bad Rows' As RowDefinition
--FROM Audit.EventFact EF
--INNER JOIN [Audit].[PackageLoad] PL
--	ON EF.LoadId = PL.LoadId
--WHERE EF.LoadId <= @StartLoadID AND ScreenId IS NULL AND UpdatedDate > @StartTimeLastMonth
--AND CONVERT(Date, UpdatedDate) <= @Date
--GROUP BY PL.LoadId, EF.LoadId


--UNION ALL

--SELECT 
--	 PL.LoadId As PreviousLoadId
--	,CASE WHEN EF.LoadId IS NULL Then 0 ELSE COUNT(*) END AS DataQualityRows
--	,'Rows Failed Data Quality' As RowDefinition
--FROM Audit.EventFact EF
--RIGHT JOIN [Audit].[PackageLoad] PL
--	ON EF.LoadId = PL.LoadId
--WHERE EF.LoadId <= @StartLoadID AND ScreenId IS NOT NULL AND UpdatedDate > @StartTimeLastMonth
--AND CONVERT(Date, UpdatedDate) <= @Date
--GROUP BY PL.LoadId, EF.LoadId
--) 


--SELECT 
--	 CurrentLoadId
--	,SuccessRows
--	,CL.RowDefinition
--	,IndicatorColour
--	,ISNULL(PreviousLoadId, CurrentLoadId) AS PreviousLoadId
--	,ISNULL(PreviousSuccessRows, 0) AS PreviousSuccessRows
--FROM CurrentLoad CL
--LEFT JOIN PreviousLoads PL
--	ON CL.RowDefinition = PL.RowDefinition
--GO
--SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


--GO
--PRINT N'Creating [Reporting].[ObtainLoadProcessData]...';


--GO
--SET QUOTED_IDENTIFIER ON;

--SET ANSI_NULLS OFF;


--GO
--CREATE PROC [Reporting].[ObtainLoadProcessData](@Date Date)

--AS

--DECLARE @StartLoadID int
--DECLARE @FinishLoadID int
--DECLARE @StartTimeLastMonth As Date
--DECLARE @LoadDate Date

----Find the beginning of the most recent load - This is Where PackageName is for example 'External to Stage Process' or 'Source to Stage Process'

--SELECT @StartLoadID = MAX(LoadID) 
--FROM [Audit].[PackageLoad]
--WHERE PackageName LIKE '%To%Stage%Process'
--AND CONVERT(Date, StartTime) <= @Date

------Find the day of the Load - we are only going to include Loads that occured on the same day, 
------this will need to be amended if ETL is running over a day.

--SELECT @LoadDate = Convert(Date, StartTime)
--FROM [Audit].[PackageLoad]
--WHERE LoadId = @StartLoadID


----Find the End of the most recent Load

--SELECT @FinishLoadID = ISNULL(MIN(LoadID),999999) 
--FROM [Audit].[PackageLoad]
----WHERE PackageName LIKE '%OLAP%Process%'
--WHERE PackageName LIKE '%Warehouse%Process%'
--AND LoadId > @StartLoadID
--AND CONVERT(Date, StartTime) = @LoadDate


----Find the start time last month, we only want to return a months worth of loads

--SELECT 
--	@StartTimeLastMonth = DATEADD(mm, -1, MAX(CAST(StartTime AS DATE))) 
--FROM	
--	Audit.PackageLoad PL
--LEFT JOIN (Select Distinct package_guid From Audit.vPackage Where Name LIKE '%Process%' OR Name LIKE '%Global%Executor%') PD 
--	ON PL.PackageGUID = PD.Package_GUID 
--WHERE CONVERT(Date, StartTime) <= @Date


--;WITH CurrentLoad AS
--(
--SELECT PackageName,
--	   Duration,
--	   LS.[Name] As LoadStatus,
--	   EP.ProcessStream,
--	   'Load Process: ' + PL.LoadProcess + ' Id: ' + CONVERT(CHAR,PL.LoadId) +  CHAR(13) + CHAR(10) + 'Started By: ' + CreatedBy + CHAR(13) + CHAR(10) + 'Started At: ' + CONVERT(CHAR,StartTime) AS ToolTip,
--	   PL.StartTime,
--	   PL.LoadId As CurrentLoadId
--  FROM 
--  --Add a subquery to return the latest value for each guid.
--  [Audit].[PackageLoad] PL
--  INNER JOIN Control.LoadStatusType LS
--	ON PL.LoadStatusId = LS.LoadStatusTypeId
--  LEFT JOIN Control.EntityProcessStream EP
--	ON EP.LoadId = PL.LoadId
--  WHERE ParentLoadId IS NULL
--  AND (PackageName like '%Process%'
--  OR PackageName like '%Global%Executor%')
--  AND PL.LoadId >= @StartLoadID
--  AND PL.LoadId <= @FinishLoadID
--  AND CONVERT(Date, StartTime) = @LoadDate
--)

--,PreviousLoads AS
--(
--SELECT 
--	 PL.Duration As DurationHistory
--	,ISNULL(PL.LoadId,0) As HistoryLoadId
--	,CL.Duration AS CurrentDuration
--	,CL.LoadStatus
--	,CL.PackageName
--	,CL.StartTime
--	,CL.ToolTip
--	,CL.ProcessStream
--	,CL.CurrentLoadId
--FROM [Audit].[PackageLoad] PL
--RIGHT JOIN CurrentLoad CL
--	ON CL.PackageName = PL.PackageName
--WHERE PL.StartTime > @StartTimeLastMonth
--AND  CONVERT(Date, PL.StartTime) <= @Date 

--)

--SELECT 
--	DurationHistory
--	,HistoryLoadId
--	,CurrentDuration
--	,LoadStatus
--	,PackageName 
--	,ToolTip
--	,StartTime
--	,ProcessStream
--	,CurrentLoadId
--FROM PreviousLoads
--ORDER BY PackageName, HistoryLoadId DESC
--GO
--SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


--GO
--PRINT N'Creating [Reporting].[ObtainPackageLoadSummary]...';


--GO
--SET QUOTED_IDENTIFIER ON;

--SET ANSI_NULLS OFF;


--GO
---- =============================================
---- Author:		Adatis Consulting
---- Create date: 15-10-2010
---- Description:	A Stored procedure for standard ETL Dashboard Reports : Dataset 'DS_DWLoad'
---- Used In:		*.rdl (Reporting Services Report) 
----Updates:
----	15/12/2010 - JK - Added a date parameter.
----  17/11/2014 - JOC - Correct issue with total packages count.
---- =============================================
--CREATE PROCEDURE [Reporting].[ObtainPackageLoadSummary]

--	--This will cause the load durations to be pulled back on the day passed in
--	@Date DATE
	
--AS
--BEGIN

--SET DATEFORMAT DMY
--SET NOCOUNT ON
--Declare @ProjectID int = null

--declare @$prog varchar(50), 
--	@$errno int, 
--	@$errmsg varchar(4000), 
--	@$proc_section_nm varchar(50),
--	@$row_cnt INT,
--	@$error_db_name varchar(50), 
--	@$CreateUserName varchar(128),   -- last user changed the data 
--	@$CreateMachineName varchar(128), -- last machine changes-procedure were run from
--	@$CreateSource varchar(128), -- last process that made the changes
--	@MaxLoadId INT		

--select @$errno = NULL,  @$errmsg = NULL,  @$proc_section_nm = NULL
--	,  @$prog = LEFT(object_name(@@procid),50), @$row_cnt = NULL
--	, @$error_db_name = db_name();
----=========
--BEGIN TRY;
----=========

----DECLARE @Date DATE = '2013-05-16';

--	WITH e AS(
--		SELECT 
--			E.[status]
--			,E.[folder_name] + '\' + E.[project_name] + '\' + E.[package_name] AS pkgPath 
--		FROM 
--			[$(SSISDB)].[catalog].[executions] E
--		LEFT JOIN [$(SSISDB)].[catalog].[projects] P 
--			ON E.project_name = P.name 
--		WHERE 
--			CONVERT (DATE, [start_time]) >= @Date 
--			AND 
--			project_id IN (SELECT DISTINCT project_id FROM Audit.vPackage WHERE Name LIKE '%Process%')
--	)
--	SELECT
--	(SELECT COUNT(1) FROM E) AS AllPackages,
--	(SELECT COUNT(1) FROM E WHERE [status] = 4) AS Failed,
--	(SELECT COUNT(1) FROM E WHERE [status] = 2) AS Running,
--	(SELECT COUNT(1) FROM E WHERE [status] = 7) AS Success,
--	(SELECT COUNT(1) FROM E WHERE [status] != 2 AND [status] != 4 AND [status] != 7) AS Others,
--	(SELECT COUNT(DISTINCT([pkgPath])) FROM e) AS DistinctRunPackages,
--	--(SELECT COUNT(1) FROM [$(SSISDB)].[catalog].[packages]) AS TotalPackages 
--	(SELECT COUNT([pkgPath]) FROM e) AS TotalPackages


----========
--END TRY

----========

--BEGIN CATCH
----===========
--set @$errmsg = Left('Error ' +
--		CASE
--			WHEN @$errno > 0 THEN CAST(@$errno as varchar)
--			ELSE Cast(ERROR_NUMBER() as varchar)
--		END + 'in proc ' + isnull(@$prog,' ') + ' ' + 
--		CASE 
--			WHEN @$errno > 0 THEN isnull(@$errmsg,' ') 
--			ELSE isnull(@$errmsg,' ') + ISNULL(ERROR_MESSAGE(),'')
--		END ,4000);

--raiserror (@$errmsg, 16, 1); 

--IF (ISNULL(@$errno,0) = 0 )
--	set @$errno = ERROR_NUMBER();

--END CATCH

--SET NOCOUNT OFF; 

--RETURN @$errno;

--END
--GO
--SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


--GO
--PRINT N'Creating Permission...';


--GO
--GRANT EXECUTE
--    ON SCHEMA::[Audit] TO [db_subscribed_application];


--GO
--PRINT N'Creating Permission...';


--GO
--GRANT INSERT
--    ON SCHEMA::[Azure] TO [db_subscribed_application];


--GO
--PRINT N'Creating Permission...';


--GO
--GRANT EXECUTE
--    ON SCHEMA::[Control] TO [db_subscribed_application];


--GO
PRINT N'Refreshing [Audit].[CompareSTG2CLNRowCounts]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
EXECUTE sp_refreshsqlmodule N'[Audit].[CompareSTG2CLNRowCounts]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [Audit].[InsertSourceFileProcessStream]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
EXECUTE sp_refreshsqlmodule N'[Audit].[InsertSourceFileProcessStream]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [Audit].[UpdateSourceFileProcessStream]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
EXECUTE sp_refreshsqlmodule N'[Audit].[UpdateSourceFileProcessStream]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [Azure].[GetLoadStartParameters]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
EXECUTE sp_refreshsqlmodule N'[Azure].[GetLoadStartParameters]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [Control].[CheckSourceFilesIfStagedInClean]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
EXECUTE sp_refreshsqlmodule N'[Control].[CheckSourceFilesIfStagedInClean]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [Control].[ObtainActivePartitionKeys]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
EXECUTE sp_refreshsqlmodule N'[Control].[ObtainActivePartitionKeys]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [Control].[ObtainChangedPartitionKeys]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
EXECUTE sp_refreshsqlmodule N'[Control].[ObtainChangedPartitionKeys]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [Control].[ObtainDistributionCodeFromSourceFile]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
EXECUTE sp_refreshsqlmodule N'[Control].[ObtainDistributionCodeFromSourceFile]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [Control].[ObtainDistributionsReadyToProcess]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
EXECUTE sp_refreshsqlmodule N'[Control].[ObtainDistributionsReadyToProcess]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [Control].[ObtainEntityId]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
EXECUTE sp_refreshsqlmodule N'[Control].[ObtainEntityId]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [Control].[ObtainFilesToUnload]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
EXECUTE sp_refreshsqlmodule N'[Control].[ObtainFilesToUnload]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [Control].[ObtainFilesToUnloadDataRetention]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
EXECUTE sp_refreshsqlmodule N'[Control].[ObtainFilesToUnloadDataRetention]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [Control].[ObtainPRBISourceFileId]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
EXECUTE sp_refreshsqlmodule N'[Control].[ObtainPRBISourceFileId]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [Control].[ObtainSourceFileId]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
EXECUTE sp_refreshsqlmodule N'[Control].[ObtainSourceFileId]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [Control].[ObtainSourceFileIdForBlobUpload]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
EXECUTE sp_refreshsqlmodule N'[Control].[ObtainSourceFileIdForBlobUpload]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [Control].[ObtainSourceFileIdForProcess]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
EXECUTE sp_refreshsqlmodule N'[Control].[ObtainSourceFileIdForProcess]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [Control].[ObtainUnprocessedSourceFiles]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
EXECUTE sp_refreshsqlmodule N'[Control].[ObtainUnprocessedSourceFiles]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [Control].[ProcessSourceFile]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
EXECUTE sp_refreshsqlmodule N'[Control].[ProcessSourceFile]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [Control].[ObtainBulkEntityId]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
EXECUTE sp_refreshsqlmodule N'[Control].[ObtainBulkEntityId]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Alter table [Control].[EntityType]...';


ALTER TABLE [Control].[EntityType]

DROP CONSTRAINT uc_TableNameApplicationId

ALTER TABLE [Control].[EntityType]

ADD CONSTRAINT uc_TableNameApplicationId UNIQUE ([Table], ApplicationId, [Schema])


GO

/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
SET IDENTITY_INSERT [Control].[EntityType] ON;
GO
MERGE INTO [Control].[EntityType] AS Tgt
USING 
	(VALUES
	  --[EI],	[PETI],	[AI],	[IS],	[HMS],	[Name],										[Code],									[Description],													[Schema],				[Table],									[CreatedBy]							[CreatedDate]
		(1,		-1,		1,		1,		0,		N'Address',									N'dxaddress',							N'Address Table',												N'DATAXCHANGE',			N'DX_ADDRESS',								N'Simon.Whiteley@prsformusic.com',	SYSDATETIME()),
		(2,		-1,		1,		1,		0,		N'Country',									N'dxcountry',							N'DX Country Table',											N'DATAXCHANGE',			N'DX_COUNTRY',								N'Simon.Whiteley@prsformusic.com',	SYSDATETIME()),
		(3,		-1,		1,		1,		1,		N'StatementWorkDetail',						N'dxstmtwkdt',							N'DX Statement Work Details',									N'DATAXCHANGE',			N'DX_STMT_WKDT',							N'Simon.Whiteley@prsformusic.com',	SYSDATETIME()),
		(4,		-1,		1,		1,		0,		N'Society',									N'dxsociety',							N'DX Society Table',											N'DATAXCHANGE',			N'DX_SOCIETY',								N'Simon.Whiteley@prsformusic.com',	SYSDATETIME()),
		(6,		NULL,	1,		0,		0,		N'DimSociety',								N'dimSociety',							N'Online Statements Dim Society',								N'Warehouse',			N'DimSociety',								N'Simon.Whiteley@prsformusic.com',	SYSDATETIME()),
		(7,		NULL,	1,		0,		0,		N'DimMember',								N'dimMember',							N'Online Statements Dim Member',								N'Warehouse',			N'DimMember',								N'Simon.Whiteley@prsformusic.com',	SYSDATETIME()),
		(8,		NULL,	1,		0,		0,		N'DimDistribution',							N'dimDistribution',						N'Online Statements Dim Distribution',							N'Warehouse',			N'DimDistribution',							N'Simon.Whiteley@prsformusic.com',	SYSDATETIME()),
		(11,	NULL,	1,		0,		0,		N'FactDistributedRoyalty',					N'DistRoyalty',							N'Fact Distributed Royalty',									N'Warehouse',			N'FactDistributedRoyalty',					N'Simon.Whiteley@prsformusic.com',	SYSDATETIME()),
		(16,	-1,		1,		1,		0,		N'AffiliateStatement',						N'dxastmt',								N'Affilate Statement table',									N'DATAXCHANGE',			N'DX_A_STMT',								N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(17,	-1,		1,		1,		0,		N'AffiliateStatementEDetail',				N'dxastmtedet',							N'Affiliate Statement E Detail table',							N'DATAXCHANGE',			N'DX_A_STMT_EDET',							N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(18,	-1,		1,		1,		0,		N'AffiliateStatementFDetail',				N'dxastmtfdet',							N'Affiliate Statement F Detail table',							N'DATAXCHANGE',			N'DX_A_STMT_FDET',							N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(19,	-1,		1,		1,		0,		N'BroadcastRegion',							N'dxbroadcastregion',					N'DX broadcast region table',									N'DATAXCHANGE',			N'DX_BROADCAST_REGION',						N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(21,	-1,		1,		1,		0,		N'CAE',										N'dxcae',								N'Dx cae table',												N'DATAXCHANGE',			N'DX_CAE',									N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(22,	-1,		1,		1,		0,		N'Currency',								N'dxcurrency',							N'DX Currency table',											N'DATAXCHANGE',			N'DX_CURRENCY',								N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(23,	-1,		1,		1,		0,		N'Distribution',							N'dxdistribution',						N'DX Distribution table',										N'DATAXCHANGE',			N'DX_DISTRIBUTION',							N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(26,	-1,		1,		1,		0,		N'DistributionLoadControl',					N'dxdistributionloadcontrol',			N'DX Distribution Load Control table',							N'DATAXCHANGE',			N'DX_DISTRIBUTION_LOAD_CONTROL',			N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(27,	-1,		1,		1,		0,		N'EEAStatementDetails',						N'dxeeastmtdet',						N'DX EEA Statement Details Table',								N'DATAXCHANGE',			N'DX_EEA_STMT_DET',							N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(28,	-1,		1,		1,		0,		N'EEAStatementSummary',						N'dxeeastmtsumm',						N'DX EEA Statement Summary table',								N'DATAXCHANGE',			N'DX_EEA_STMT_SUMM',						N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(29,	-1,		1,		1,		0,		N'ElectronicStatement',						N'dxestmt',								N'DX ElectronicStatement table',								N'DATAXCHANGE',			N'DX_E_STMT',								N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(30,	-1,		1,		1,		0,		N'ElectronicStatementGeneralAdjustment',	N'dxestmtgnad',							N'DX Electronic statement general adjustment table',			N'DATAXCHANGE',			N'DX_E_STMT_GNAD',							N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(31,	-1,		1,		1,		0,		N'ElectronicStatementPaymentDetail',		N'dxestmtpymtdet',						N'DX Elecronic Statement Payment Details table',				N'DATAXCHANGE',			N'DX_E_STMT_PYMT_DET',						N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(32,	-1,		1,		1,		0,		N'Invoices',								N'dxinvoices',							N'DX Invoices table',											N'DATAXCHANGE',			N'DX_INVOICES',								N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(33,	-1,		1,		1,		0,		N'Licensees',								N'dxlicensees',							N'DX Licensees table',											N'DATAXCHANGE',			N'DX_LICENSEES',							N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(34,	-1,		1,		1,		0,		N'LicensingBodies',							N'dxlicensingbodies',					N'DX Licensing Bodies table',									N'DATAXCHANGE',			N'DX_LICENSING_BODIES',						N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(35,	-1,		1,		1,		0,		N'MajorMember',								N'dxmajormember',						N'DX Major member table',										N'DATAXCHANGE',			N'DX_MAJOR_MEMBER',							N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(36,	-1,		1,		1,		0,		N'Membership',								N'dxmembership',						N'DX Membership tables',										N'DATAXCHANGE',			N'DX_MEMBERSHIP',							N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(37,	-1,		1,		1,		0,		N'MembershipType',							N'dxmembershiptype',					N'DX Membership Type table',									N'DATAXCHANGE',			N'DX_MEMBERSHIP_TYPE',						N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(40,	-1,		1,		1,		0,		N'MemberSourceSocieties',					N'dxmembersourcesocieties',				N'DX Member Source Societies table',							N'DATAXCHANGE',			N'DX_MEMBER_SOURCE_SOCIETIES',				N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(41,	-1,		1,		1,		0,		N'MemberStatements',						N'dxmemberstatements',					N'DX Member Statements table',									N'DATAXCHANGE',			N'DX_MEMBER_STATEMENTS',					N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(42,	-1,		1,		1,		0,		N'StatementInstructionLicensingBodies',		N'dxmvstmtinstrlibos',					N'DX Statement Instruction Licensing Bodies table',				N'DATAXCHANGE',			N'DX_MV_STMT_INSTR_LIBOS',					N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(43,	-1,		1,		1,		0,		N'ProductTypes',							N'dxproducttypes',						N'DX Product Types table',										N'DATAXCHANGE',			N'DX_PRODUCT_TYPES',						N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(44,	-1,		1,		1,		0,		N'PaymentInstruction',						N'dxpymtinstruction',					N'DX PaymentInstruction table',									N'DATAXCHANGE',			N'DX_PYMT_INSTRUCTION',						N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(45,	-1,		1,		1,		0,		N'PaperStatement',							N'dxpstmt',								N'DX Paper Statement table',									N'DATAXCHANGE',			N'DX_P_STMT',								N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(46,	-1,		1,		1,		0,		N'PaperStatementAccountDetails',			N'dxpstmtaccdet',						N'DX Paper Statement Account Details table',					N'DATAXCHANGE',			N'DX_P_STMT_ACC_DET',						N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(47,	-1,		1,		1,		0,		N'PaperStatementCommissionInvoice',			N'dxpstmtcomminvoice',					N'DX Paper Statement Commission Invoice table',					N'DATAXCHANGE',			N'DX_P_STMT_COMM_INVOICE',					N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(48,	-1,		1,		1,		0,		N'PaperStatementGeneralAdjustmentLines',	N'dxpstmtgad',							N'DX Paper Statement General Adjustment Lines table',			N'DATAXCHANGE',			N'DX_P_STMT_GAD',							N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(49,	-1,		1,		1,		0,		N'PaperStatementNOPEarningLines',			N'dxpstmtnopearndet',					N'DX Paper Statement NOP Earning Lines table',					N'DATAXCHANGE',			N'DX_P_STMT_NOP_EARN_DET',					N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(50,	-1,		1,		1,		0,		N'PaperStatementNOPPaymentLines',			N'dxpstmtnoppymtdet',					N'DX Paper Statement NOP Payment Lines table',					N'DATAXCHANGE',			N'DX_P_STMT_NOP_PYMT_DET',					N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(55,	-1,		1,		1,		0,		N'PaperStatementTopFiveEarners',			N'dxpstmttopfiveearners',				N'DX Paper Statement Top Five Eaners table',					N'DATAXCHANGE',			N'DX_P_STMT_TOP_FIVE_EARNERS',				N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(56,	-1,		1,		1,		0,		N'PaperStatementVATLines',					N'dxpstmtvtdt',							N'DX Paper Stateent VAT Lines table',							N'DATAXCHANGE',			N'DX_P_STMT_VTDT',							N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(57,	-1,		1,		1,		0,		N'RollupMember',							N'dxrollupmember',						N'DX Rollup Member table',										N'DATAXCHANGE',			N'DX_ROLLUP_MEMBER',						N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(58,	-1,		1,		1,		0,		N'ScottishPostCodes',						N'dxscottishpostcodes',					N'DX Scottish PostCodes table',									N'DATAXCHANGE',			N'DX_SCOTTISH_POST_CODES',					N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(59,	-1,		1,		1,		0,		N'ServiceTypes',							N'dxservicetypes',						N'DX Service Types table',										N'DATAXCHANGE',			N'DX_SERVICE_TYPES',						N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(60,	-1,		1,		1,		0,		N'SocietyUsageLink',						N'dxsocietyusagelink',					N'DX Society Usage Link table',									N'DATAXCHANGE',			N'DX_SOCIETY_USAGE_LINK',					N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(63,	-1,		1,		1,		0,		N'StatementInstruction',					N'dxstatementinstruction',				N'DX Statement Instruction table',								N'DATAXCHANGE',			N'DX_STATEMENT_INSTRUCTION',				N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(64,	-1,		1,		1,		0,		N'StatementRun',							N'dxstatementrun',						N'DX Statement Run table',										N'DATAXCHANGE',			N'DX_STATEMENT_RUN',						N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(65,	-1,		1,		1,		0,		N'StandardTaxRate',							N'dxstdtaxrate',						N'DX Standard Tax Rate table',									N'DATAXCHANGE',			N'DX_STD_TAX_RATE',							N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(66,	-1,		1,		1,		0,		N'StatementInstructionSocieties',			N'dxstinsocieties',						N'DX Statement Instruction Societies table',					N'DATAXCHANGE',			N'DX_STIN_SOCIETIES',						N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(67,	-1,		1,		1,		0,		N'StatementAddition',						N'dxstmtaddt',							N'DX Statement addition table',									N'DATAXCHANGE',			N'DX_STMT_ADDT',							N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(68,	-1,		1,		1,		0,		N'StatementDetails',						N'dxstmtdetail',						N'DX Statement Detail table',									N'DATAXCHANGE',			N'DX_STMT_DETAIL',							N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(69,	-1,		1,		1,		0,		N'StatementDummyAddress',					N'dxstmtdummyaddress',					N'DX Statement Dummy Address table',							N'DATAXCHANGE',			N'DX_STMT_DUMMY_ADDRESS',					N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(70,	-1,		1,		1,		0,		N'Territory',								N'dxterritorytis',						N'DX Territory table',											N'DATAXCHANGE',			N'DX_TERRITORY_TIS',						N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(71,	-1,		1,		1,		0,		N'UsageCategories',							N'dxusagecategories',					N'DX Usage Categories table',									N'DATAXCHANGE',			N'DX_USAGE_CATEGORIES',						N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(72,	-1,		1,		1,		0,		N'UsageGroup',								N'dxusagegroup',						N'DX Usage Group table',										N'DATAXCHANGE',			N'DX_USAGE_GROUP',							N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(73,	-1,		1,		1,		0,		N'UsageGroupSummary',						N'dxusagegroupsumm',					N'DX Usage Group Summary table',								N'DATAXCHANGE',			N'DX_USAGE_GROUP_SUMM',						N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(74,	-1,		1,		1,		0,		N'UsageGroupType',							N'dxusagegrouptype',					N'DX Usage Group Type table',									N'DATAXCHANGE',			N'DX_USAGE_GROUP_TYPE',						N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(75,	-1,		1,		1,		0,		N'WithheldSocietyTax',						N'dxwithheldsocietytax',				N'DX Withheld society tax table',								N'DATAXCHANGE',			N'DX_WITHHELD_SOCIETY_TAX',					N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(76,	-1,		1,		1,		0,		N'PaperStatementAccountShare',				N'dxpstmtaccshare',						N'DX Paper Statement Account Share table',						N'DATAXCHANGE',			N'DX_P_STMT_ACC_SHARE',						N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(77,	NULL,	1,		0,		0,		N'AdjustmentLine',							N'AdjustmentLine',						N'Online Statements Adjustment Line',							N'Warehouse',			N'AdjustmentLine',							N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(78,	NULL,	1,		0,		0,		N'CommissionInvoice',						N'CommissionInvoice',					N'OnlineStatements Commission Invoice',							N'Warehouse',			N'CommissionInvoice',						N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(84,	NULL,	1,		0,		0,		N'CommissionInvoiceLine',					N'CommInvoiceLine',						N'Online Statements Comm Invoice Line',							N'Warehouse',			N'CommissionInvoiceLine',					N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(85,	NULL,	1,		0,		0,		N'DimAdjustmentReason',						N'dimAdjustmentReason',					N'Online Statements Adjustment Reason',							N'Warehouse',			N'DimAdjustmentReason',						N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(86,	NULL,	1,		0,		0,		N'DimBroadcaster',							N'dimBroadcaster',						N'Online Statements Dim Broadcaster',							N'Warehouse',			N'DimBroadcaster',							N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(87,	NULL,	1,		0,		0,		N'DimCountry',								N'dimCountry',							N'Online Statements Dim Country',								N'Warehouse',			N'DimCountry',								N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(90,	NULL,	1,		0,		0,		N'DimDate',									N'dimDate',								N'Online Statements Dim Date',									N'Warehouse',			N'DimDate',									N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(92,	NULL,	1,		0,		0,		N'DimInterestedParty',						N'dimInterestedParty',					N'Online Statements Dim Interested Party',						N'Warehouse',			N'DimInterestedParty',						N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(93,	NULL,	1,		0,		0,		N'DimInvoice',								N'dimInvoice',							N'Online Statements Dim Invoice',								N'Warehouse',			N'DimInvoice',								N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(94,	NULL,	1,		0,		0,		N'DimLicensingBody',						N'dimLicensingBody',					N'Online Statements Dim Licensing Body',						N'Warehouse',			N'DimLicensingBody',						N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(96,	NULL,	1,		0,		0,		N'DimProduct',								N'dimProduct',							N'Online Statements Dim Product',								N'Warehouse',			N'DimProduct',								N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(97,	NULL,	1,		0,		0,		N'DimRecording',							N'dimRecording',						N'Online Statements Dim Recording',								N'Warehouse',			N'DimRecording',							N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(98,	NULL,	1,		0,		0,		N'DimRoleType',								N'dimRoleType',							N'Online Statements Dim Role Type',								N'Warehouse',			N'DimRoleType',								N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(105,	NULL,	1,		0,		0,		N'DimRoyaltyClassification',				N'dimRoyaltyClass',						N'Dim Royalty Classification',									N'Warehouse',			N'DimRoyaltyClassification',				N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(106,	NULL,	1,		0,		0,		N'DimUsageClassification',					N'dimUsageClass',						N'Dim Usage Classification',									N'Warehouse',			N'DimUsageClassification',					N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(107,	NULL,	1,		0,		0,		N'DimUsageGroup',							N'dimUsageGroup',						N'Online Statements Dim Usage Group',							N'Warehouse',			N'DimUsageGroup',							N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(108,	NULL,	1,		0,		0,		N'DimWork',									N'dimWork',								N'Online Stateents Dim Work',									N'Warehouse',			N'DimWork',									N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(110,	NULL,	1,		0,		0,		N'GeneralRoyaltyLine',						N'GeneralRoyaltyLine',					N'General Loyalty Line',										N'Warehouse',			N'GeneralRoyaltyLine',						N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(112,	NULL,	1,		0,		0,		N'NopEarningLine',							N'NopEarningLine',						N'Nop Earning Line',											N'Warehouse',			N'NopEarningLine',							N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(113,	NULL,	1,		0,		0,		N'NopNoteText',								N'NopNoteText',							N'Nop Note Text ',												N'Warehouse',			N'NopNoteText',								N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(114,	NULL,	1,		0,		0,		N'NopPaymentLine',							N'NopPaymentLine',						N'Nop Payment Line',											N'Warehouse',			N'NopPaymentLine',							N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(115,	NULL,	1,		0,		0,		N'NoteText',								N'NoteText',							N'Note Text',													N'Warehouse',			N'NoteText',								N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(116,	NULL,	1,		0,		0,		N'OnlineStatement',							N'OnlineStatement',						N'Online Statement',											N'Warehouse',			N'OnlineStatement',							N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(117,	NULL,	1,		0,		0,		N'SourceStatement',							N'SourceStatement',						N'Source Statement',											N'Warehouse',			N'SourceStatement',							N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(119,	NULL,	1,		0,		0,		N'StatementLicensingBody',					N'StatemtLicensingBody',				N'Statement Licensing Body',									N'Warehouse',			N'StatementLicensingBody',					N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(120,	NULL,	1,		0,		0,		N'ThirdPartyStatementGroup',				N'ThrdPrtyStmtGroup',					N'Third Party Statement Group',									N'Warehouse',			N'ThirdPartyStatementGroup',				N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(126,	NULL,	1,		0,		0,		N'ThirdPartyStatementGroupOnlineStatement',	N'ThrdPrtyStmtGrpOlSt',					N'Third Party Statement Group Online Statement',				N'Warehouse',			N'ThirdPartyStatementGroupOnlineStatement',	N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(127,	NULL,	1,		0,		0,		N'UsageGroupRoyaltyLine',					N'UsageGrpRoyLine',						N'Usage Group Royalty Line',									N'Warehouse',			N'UsgaeGroupRoyaltyLine',					N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(128,	NULL,	1,		0,		0,		N'VATInvoice',								N'VATInvoice',							N'VATInvoice',													N'Warehouse',			N'VATInvoice',								N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(129,	NULL,	1,		0,		0,		N'VATInvoiceLine',							N'VATInvoiceLine',						N'VATInvoiceLine',												N'Warehouse',			N'VATInvoiceLine',							N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(130,	NULL,	1,		0,		0,		N'DimWorkAttributes',						N'dimWorkAttributes',					N'Online Statements Dim Work Attributes',						N'Warehouse',			N'DimWorkAttributes',						N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(131,	NULL,	1,		0,		0,		N'TempDistributedRoyalty',					N'TempDistributedRoyalty',				N'Temp Distributed Royalty',									N'Transform',			N'TempDistributedRoyalty',					N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(132,	NULL,	1,		0,		0,		N'TempDistributedRoyaltyWkdt',				N'TempDistributedRoyaltyWkdt',			N'Temp Distributed Royalty Wkdt',								N'Transform',			N'TempDistributedRoyaltyWkdt',				N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(133,	NULL,	1,		0,		0,		N'TempDistributedRoyaltyAddt',				N'TempDistributedRoyaltyAddt',			N'Temp Distributed Royalty Addt',								N'Transform',			N'TempDistributedRoyaltyAddt',				N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(134,	NULL,	1,		0,		0,		N'TempStatement',							N'TempStatement',						N'Temp Statement',												N'Transform',			N'TempStatement',							N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(135,	NULL,	1,		0,		0,		N'TempStatementShare',						N'TempStatementShare',					N'Temp Statement Share',										N'Transform ',			N'TempStatementShare',						N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(137,	NULL,	1,		1,		0,		N'ReportsText',								N'reportstext',							N'Reports Text',												N'DATAXCHANGE',			N'REPORTS_TEXT',							N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(138,	NULL,	1,		1,		0,		N'ReportTypes',								N'reporttypes',							N'Report Types',												N'DATAXCHANGE',			N'REPORT_TYPES',							N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(139,	NULL,	1,		1,		0,		N'StatementInstrumentLiboList',				N'dxstmtinstrlibolist',					N'StatementInstrumentLicensingBodyList table',					N'DATAXCHANGE',			N'DX_STMT_INSTR_LIBO_LIST',					N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(140,	NULL,	2,		0,		0,		N'BroadcastDataQualityFormat5',				N'brcdqformat5',						N'Broadcast DataQuality Format5',								N'BRCDataQuality',		N'BRC_DQ_Format5',							N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(143,	NULL,	2,		0,		0,		N'BroadcastDataQualityFormat50',			N'brcdqformat50',						N'Broadcast DataQuality Format50',								N'BRCDataQuality',		N'BRC_DQ_Format50',							N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(144,	NULL,	2,		0,		0,		N'BroadcastDataQualityFormat52',			N'brcdqformat52',						N'Broadcast DataQuality Format52',								N'BRCDataQuality',		N'BRC_DQ_Format52',							N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(146,	NULL,	2,		0,		0,		N'BroadcastDataQualityFormat303',			N'brcdqformat303',						N'Broadcast DataQuality Format303',								N'BRCDataQuality',		N'BRC_DQ_Format303',						N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(147,	NULL,	2,		0,		0,		N'BroadcastDataQualityFormat51',			N'brcdqformat51',						N'Broadcast DataQuality Format51',								N'BRCDataQuality',		N'BRC_DQ_Format51',							N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(148,	NULL,	2,		0,		0,		N'BroadcastDataQualityFormat51a',			N'brcdqformat51a',						N'Broadcast DataQuality Format51a',								N'BRCDataQuality',		N'BRC_DQ_Format51a',						N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(149,	NULL,	2,		0,		0,		N'BroadcastDataQualityFormatS1',			N'brcdqformats1',						N'Broadcast DataQuality FormatS1',								N'BRCDataQuality',		N'BRC_DQ_FormatS1',							N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(150,	NULL,	2,		0,		0,		N'BroadcastDataQualityFormatS2',			N'brcdqformats2',						N'Broadcast DataQuality FormatS2',								N'BRCDataQuality',		N'BRC_DQ_FormatS2',							N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(151,	NULL,	1,		0,		0,		N'TempFactDistributedRoyalty',				N'TempFactDistributedRoyalty',			N'Temp Fact Distributed Royalty',								N'Transform',			N'TempFactDistributedRoyalty',				N'Chris.Ellis@prsformusic.com',		SYSDATETIME()),
		(153,	NULL,	1,		1,		0,		N'StatementMembershipLiboList',				N'dxstmtmbrlibolist',					N'StatementMembershipLicensingBodyList table',					N'DATAXCHANGE',			N'DX_STMT_MBR_LIBO_LIST',					N'Jonathan.Myers@prsformusic.com',	SYSDATETIME()),
		(154,	NULL,	1,		0,		0,		N'TempPayeeStatement',						N'TempPayeeStatement',					N'Temp Payee Statement table',									N'Transform',			N'TempPayeeStatement',						N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(155,	NULL,	1,		0,		0,		N'TempMbrStatement',						N'TempMbrStatement',					N'Temp Mbr Statement table',									N'Transform',			N'TempMbrStatement',						N'vandana.bangera@prsformusic.com',	SYSDATETIME()),		
		(157,	NULL,	3,		1,		0,		N'Dim File',								N'prbidimfile',							N'Oracle Dim_File table',										N'PRBI_DW',				N'DIM_FILE',								N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(158,	NULL,	3,		1,		0,		N'Dim Third Party Tree',					N'prbidimthirdpartytree',				N'Oracle Dim_ThirdPartyTree table',								N'PRBI_DW',				N'DIM_THIRD_PARTY_TREE',					N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(159,	NULL,	3,		0,		0,		N'Dim Date',								N'prbidimdate',							N'Oracle Dim_Date table',										N'PRBI_DW',				N'DIM_DATE',								N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(160,	NULL,	3,		1,		0,		N'Dim Production',							N'prbidimproduction',					N'Oracle Dim_Production table',									N'PRBI_DW',				N'DIM_PRODUCTION',							N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(163,	NULL,	3,		1,		0,		N'Dim Broadcaster',							N'prbidimbroadcaster',					N'Oracle Dim_Broadcaster table',								N'PRBI_DW',				N'DIM_BROADCASTER',							N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(164,	NULL,	3,		1,		0,		N'Dim Usage Of Work Status',				N'prbidimusageofworkstatus',			N'Oracle Dim_Usage_Of_Work_Status table',						N'PRBI_DW',				N'DIM_USAGE_OF_WORK_STATUS',				N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(169,	NULL,	3,		1,		0,		N'Dim Right Type',							N'prbidimrighttype',					N'Oracle Dim_Right_Type table',									N'PRBI_DW',				N'DIM_RIGHT_TYPE',							N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(172,	NULL,	3,		1,		0,		N'Dim Work',								N'prbidimwork',							N'Oracle Dim_Work table',										N'PRBI_DW',				N'DIM_WORK',								N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(173,	NULL,	3,		1,		0,		N'Dim Transmission Status',					N'prbidimtransmissionstatus',			N'Oracle Dim_Transmission_Status table',						N'PRBI_DW',				N'DIM_TRANSMISSION_STATUS',					N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(174,	NULL,	3,		1,		0,		N'Dim Usage Distribution Code',				N'prbidimusagedistributioncode',		N'Oracle Dim_Usage_Distribution_Code table',					N'PRBI_DW',				N'DIM_USAGE_DISTRIBUTION_CODE',				N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(177,	NULL,	1,		0,		0,		N'TempMbrStatementSociety',					N'TempMbrStatementSociety',				N'Temp Mbr Statement Society table',							N'Transform',			N'TempMbrStatementSociety',					N'jonathan.myers@prsformusic.com',	SYSDATETIME()),
		(178,	NULL,	3,		1,		0,		N'Dim Music Origin',						N'prbidimmusicorigin',					N'Oracle Dim_Music_Origin table',								N'PRBI_DW',				N'DIM_MUSIC_ORIGIN',						N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(179,	NULL,	3,		0,		0,		N'DimRightType',							N'DimRightType',						N'DimRightType table',											N'PipelineWarehouse',	N'DimRightType',							N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(200,	-1,		4,		1,		0,		N'CodaBalance',								N'codabalance',							N'CODA oas_balances',											N'CodaStaging',			N'Coda_Balance',							N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(201,	-1,		4,		1,		0,		N'CodaCompany',								N'codacompany',							N'CODA oas_company',											N'CodaStaging',			N'Coda_Company',							N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(202,	-1,		4,		1,		0,		N'CodaDocument',							N'codadocument',						N'CODA oas_document',											N'CodaStaging',			N'Coda_Document',							N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(203,	-1,		4,		1,		0,		N'CodaTransactions',						N'codatransactions',					N'CODA Transactions oas_head joined oas_list',					N'CodaStaging',			N'Coda_Transactions',						N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(204,	-1,		4,		1,		0,		N'CodaElement',								N'codaelement',							N'CODA oas_element',											N'CodaStaging',			N'Coda_Element',							N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(205,	-1,		4,		1,		0,		N'CodaGroupList',							N'codagrouplist',						N'CODA oas_grplist joined oas_group',							N'CodaStaging',			N'Coda_GroupList',							N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(206,	-1,		4,		1,		0,		N'CodaTM1Budgets',							N'codatm1budgets',						N'TM1 Budgets csv export',										N'CodaStaging',			N'Coda_TM1Budgets',							N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(207,	-1,		4,		1,		0,		N'CodaTM1Forecasts',						N'codatm1forecasts',					N'TM1 Forecasts csv export',									N'CodaStaging',			N'Coda_TM1Forecasts',						N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(208,	-1,		4,		1,		0,		N'CodaMDS_EL1',								N'codamdsel1',							N'CODA MDS 2016 EL1 export',									N'CodaStaging',			N'Coda_MDS_EL1',							N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(209,	-1,		4,		1,		0,		N'CodaMDS_EL2',								N'codamdsel2',							N'CODA MDS 2016 EL2 export',									N'CodaStaging',			N'Coda_MDS_EL2',							N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(210,	-1,		4,		1,		0,		N'CodaMDS_EL12',							N'codamdsel12',							N'CODA MDS 2016 EL1 + EL2 export',								N'CodaStaging',			N'Coda_MDS_EL12',							N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(211,	-1,		4,		1,		0,		N'CodaUsrCapab',							N'codausrcapab',						N'CODA USer Capability Security Details',						N'CodaStaging',			N'Coda_UsrCapab',							N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(212,	-1,		4,		1,		0,		N'CodaMDS_EL123',							N'codamdsel123',						N'CODA MDS 2016 EL1 + EL2 +  EL3 export',						N'CodaStaging',			N'Coda_MDS_EL123',							N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(220,	-1,		4,		0,		0,		N'FactBalance',								N'factcodabalance',						N'Finance DataMart oas_balances',								N'CodaWarehouse',		N'Fact_Balance',							N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(221,	-1,		4,		0,		0,		N'DimCompany',								N'dimcompany',							N'Finance DataMart company dimension',							N'CodaWarehouse',		N'Dim_Company',								N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(222,	-1,		4,		0,		0,		N'DimDocument',								N'dimdocument',							N'Finance DataMart document dimension',							N'CodaWarehouse',		N'Dim_Document',							N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(223,	-1,		4,		0,		0,		N'FactTransactions',						N'facttransactions',					N'Finance DataMart Transactions',								N'CodaWarehouse',		N'Fact_Transactions',						N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(224,	-1,		4,		0,		0,		N'DimAccountsEL1',							N'dimaccountsel1',						N'Finance DataMart Coda EL1 Accounts Dimension',				N'CodaWarehouse',		N'Dim_Accounts_EL1',						N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(225,	-1,		4,		0,		0,		N'DimAccountsEL2',							N'dimaccountsel2',						N'Finance DataMart Coda EL2 Accounts Dimension',				N'CodaWarehouse',		N'Dim_Accounts_EL2',						N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(226,	-1,		4,		0,		0,		N'DimAccountsEL3',							N'dimaccountsel3',						N'Finance DataMart Coda EL3 Accounts Dimension',				N'CodaWarehouse',		N'Dim_Accounts_EL3',						N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(227,	-1,		4,		0,		0,		N'DimAccountsEL4',							N'dimaccountsel4',						N'Finance DataMart Coda EL4 Accounts Dimension',				N'CodaWarehouse',		N'Dim_Accounts_EL4',						N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(228,	-1,		4,		0,		0,		N'DimAccountsEL5',							N'dimaccountsel5',						N'Finance DataMart Coda EL5 Accounts Dimension',				N'CodaWarehouse',		N'Dim_Accounts_EL5',						N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(229,	-1,		4,		0,		0,		N'DimAccountsEL6',							N'dimaccountsel6',						N'Finance DataMart Coda EL6 Accounts Dimension',				N'CodaWarehouse',		N'Dim_Accounts_EL6',						N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(230,	-1,		4,		0,		0,		N'FactTM1Planning',							N'codatm1planning',						N'TM1 Budgets csv export',										N'CodaWarehouse',		N'Coda_TM1Planning',						N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(231,	-1,		4,		0,		0,		N'DimDMMappings',							N'dimdmmappings',						N'Finance DataMart Coda EL1+2+3 Dim_DM_Mappings',				N'CodaWarehouse',		N'Dim_DM_Mappings',							N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(232,	-1,		4,		0,		0,		N'DimCustomerScheme',						N'dimcustomerscheme',					N'EL1+2 Dim_CustomerScheme',									N'CodaWarehouse',		N'Dim_CustomerScheme',						N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(300,	NULL,	3,		0,		0,		N'DimBroadcaster',							N'DimBroadcaster',						N'Play to Pay DimBroadcaster table',							N'PipelineWarehouse',	N'DimBroadcaster',							N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(301,	NULL,	3,		0,		0,		N'DimFile',									N'DimFile',								N'Play to Pay DimFile table',									N'PipelineWarehouse',	N'DimFile',									N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(302,	NULL,	3,		0,		0,		N'DimMusicOrigin',							N'DimMusicOrigin',						N'Play to Pay DimMusicOrigin table',							N'PipelineWarehouse',	N'DimMusicOrigin',							N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(303,	NULL,	3,		0,		0,		N'DimProduction',							N'DimProduction',						N'Play to Pay DimProduction table',								N'PipelineWarehouse',	N'DimProduction',							N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(304,	NULL,	3,		0,		0,		N'DimThirdPartyTree',						N'DimThirdPartyTree',					N'Play to Pay DimThirdPartyTree table',							N'PipelineWarehouse',	N'DimThirdPartyTree',						N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(305,	NULL,	3,		0,		0,		N'DimTransmissionStatus',					N'DimTransmissionStatus',				N'Play to Pay DimTransmissionStatus table',						N'PipelineWarehouse',	N'DimTransmissionStatus',					N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(306,	NULL,	3,		0,		0,		N'DimUsageDistributionCode',				N'DimUsageDistributionCode',			N'Play to Pay DimUsageDistributionCode table',					N'PipelineWarehouse',	N'DimUsageDistributionCode',				N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(307,	NULL,	3,		0,		0,		N'DimUsageOfWorkStatus',					N'DimUsageOfWorkStatus',				N'Play to Pay DimUsageOfWorkStatus table',						N'PipelineWarehouse',	N'DimUsageOfWorkStatus',					N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(308,	NULL,	3,		0,		0,		N'DimWork',									N'DimWork',								N'Play to Pay DimWork table',									N'PipelineWarehouse',	N'DimWork',									N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(309,	NULL,	3,		0,		0,		N'FactUsageOfWork',							N'FactUsageOfWork',						N'Play to Pay FactUsageOfWork table',							N'PipelineWarehouse',	N'FactUsageOfWork',							N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(310,	NULL,	3,		1,		0,		N'Dim Time',								N'prbidimtime',							N'Oracle Dim_Time table',										N'PRBI_DW',				N'DIM_TIME',								N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(311,	NULL,	3,		0,		0,		N'DimTime',									N'DimTime',								N'Play to Pay DimTime table',									N'PipelineWarehouse',	N'DimTime',									N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(312,	NULL,	3,		1,		1,		N'FactUsageOfWorkPl',						N'prbifactusageofworkpl',				N'Oracle Fact_Usage_Of_Work table',								N'PRBI_DW',				N'FACT_USAGE_OF_WORK_PL',					N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(313,	NULL,	3,		1,		1,		N'FactUsageOfWorkWl',						N'prbifactusageofworkwl',				N'Oracle Fact_Usage_Of_Work table',								N'PRBI_DW',				N'FACT_USAGE_OF_WORK_WL',					N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(314,	NULL,	3,		0,		0,		N'TempFactUsageOfWorkExisting',				N'prbitempfactusageofworkexisting',		N'Oracle Fact_Usage_Of_Work table',								N'PipelineTransform',	N'TempFactUsageOfWorkExisting',				N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(315,	NULL,	3,		0,		0,		N'TempFactUsageOfWorkNew',					N'prbitempfactusageofworknew',			N'Oracle Fact_Usage_Of_Work table',								N'PipelineTransform',	N'TempFactUsageOfWorkNew',					N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(316,	NULL,	3,		0,		0,		N'TempFactUsageOfWorkChanged',				N'prbitempfactusageofworkchanged',		N'Oracle Fact_Usage_Of_Work table',								N'PipelineTransform',	N'TempFactUsageOfWorkChanged',				N'emma.stewart@prsformusic.com',	SYSDATETIME()),			
		(317,	NULL,	3,		1,		0,		N'Dim Role Type',							N'prbidimroletype',						N'Oracle DIM_ROLE_TYPE table',									N'PRBI_DW',				N'DIM_ROLE_TYPE',							N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(318,	NULL,	3,		1,		0,		N'Dim Ownership Ip',						N'prbidimownershipip',					N'Oracle DIM_OWNERSHIP_IP table',								N'PRBI_DW',				N'DIM_OWNERSHIP_IP',						N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(319,	NULL,	3,		1,		0,		N'Fact Work Ownership Ip',					N'prbifactworkownershipip',				N'Oracle FACT_WORK_OWNERSHIP_IP table',							N'PRBI_DW',				N'FACT_WORK_OWNERSHIP_IP',					N'emma.stewart@prsformusic.com',	SYSDATETIME()),	
		(320,	NULL,	3,		0,		0,		N'DimRoleType',								N'DimRoleType',							N'Play to Pay DimRoleType table',								N'PipelineWarehouse',	N'DimRoleType',								N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(321,	NULL,	3,		0,		0,		N'DimOwnershipIp',							N'DimOwnershipIp',						N'Play to Pay DimOwnershipIp table',							N'PipelineWarehouse',	N'DimOwnershipIp',							N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(322,	NULL,	3,		0,		0,		N'FactWorkOwnershipIp',						N'FactWorkOwnershipIp',					N'Play to Pay FactWorkOwnershipIp table',						N'PipelineWarehouse',	N'FactWorkOwnershipIp',						N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(324,	NULL,	3,		1,		0,		N'Dim Broadcaster Attributes',				N'prbidimbroadcasterattributes',		N'Oracle Dim Broadcaster Attributes Table',						N'PRBI_DW',				N'DIM_BROADCASTER_ATTRIBUTES',				N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(325,	NULL,	3,		1,		0,		N'Dim Tune Code Group',						N'prbidimtunecodegroup',				N'Oracle Dim Tune Code Group Table',							N'PRBI_DW',				N'DIM_TUNE_CODE_GROUP',						N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(326,	NULL,	3,		1,		0,		N'Dim Music Classification',				N'prbidimmusicclassification',			N'Oracle Dim Music Classification Table',						N'PRBI_DW',				N'DIM_MUSIC_CLASSIFICATION',				N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(327,	NULL,	3,		1,		0,		N'Dim Usage Classification',				N'prbidimusageclassification',			N'Oracle Dim Usage Classification Table',						N'PRBI_DW',				N'DIM_USAGE_CLASSIFICATION',				N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(328,	NULL,	3,		1,		0,		N'Dim Mech Usage Classification',			N'prbidimmechusageclassification',		N'Oracle Dim Mech Usage Classification Table',					N'PRBI_DW',				N'DIM_MECH_USAGE_CLASSIFICATION',			N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(329,	NULL,	3,		1,		0,		N'Dim MCPS Licence Type',					N'prbidimmcpslicencetype',				N'Oracle Dim MCPS Licence Type Table',							N'PRBI_DW',				N'DIM_MCPS_LICENCE_TYPE',					N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(330,	NULL,	3,		1,		0,		N'Dim Bro Attribute Purpose   ',			N'prbidimbroattributepurpose',			N'Oracle Dim Bro Attribute Purpose    Table',					N'PRBI_DW',				N'DIM_BRO_ATTRIBUTE_PURPOSE   ',			N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(331,	NULL,	3,		1,		0,		N'Fact Bro Attributes',						N'prbifactbroattributes',				N'Oracle Fact Bro Attributes Table',							N'PRBI_DW',				N'FACT_BRO_ATTRIBUTES',						N'tim.firmin@prsformusic.com',		SYSDATETIME()),	
		(332,	NULL,	3,		1,		0,		N'Fact Bro MCPS Licence Type',				N'prbifactbromcpslicencetype',			N'Oracle Fact Bro MCPS Licence Type Table',						N'PRBI_DW',				N'FACT_BRO_MCPS_LICENCE_TYPE',				N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(333,	NULL,	3,		1,		0,		N'Fact Bro Right Type',						N'prbifactbrorighttype',				N'Oracle Fact Bro Right Type Table',							N'PRBI_DW',				N'FACT_BRO_RIGHT_TYPE',						N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(334,	NULL,	3,		1,		0,		N'Fact Tune Code Group',					N'prbifacttunecodegroup',				N'Oracle Fact Tune Code Group Table',							N'PRBI_DW',				N'FACT_TUNE_CODE_GROUP',					N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(335,	NULL,	3,		1,		0,		N'Dim Ownership CAE Group',					N'prbidimownershipcaegroup',			N'Oracle Dim Ownership CAE Group Table',						N'PRBI_DW',				N'DIM_OWNERSHIP_CAE_GROUP',					N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(336,	NULL,	3,		1,		0,		N'Fact Ownership CAE Group',				N'prbifactownershipcaegroup',			N'Oracle Fact Ownership CAE Group Table',						N'PRBI_DW',				N'FACT_OWNERSHIP_CAE_GROUP',				N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(337,	NULL,	3,		1,		0,		N'Fact Bro Sample Date',					N'prbifactbrosampledate',				N'Oracle Fact Bro Sample Date Table',							N'PRBI_DW',				N'FACT_BRO_SAMPLE_DATE',					N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(338,	NULL,	3,		0,		0,		N'DimBroadcasterAttributes',				N'DimBroadcasterAttributes',			N'Play to Pay Dim Broadcaster Attributes Table',				N'PipelineWarehouse',	N'DimBroadcasterAttributes',				N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(339,	NULL,	3,		0,		0,		N'DimTuneCodeGroup',						N'DimTuneCodeGroup',					N'Play to Pay Dim Tune Code Group Table',						N'PipelineWarehouse',	N'DimTuneCodeGroup',						N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(340,	NULL,	3,		0,		0,		N'DimMusicClassification',					N'DimMusicClassification',				N'Play to Pay Dim Music Classification Table',					N'PipelineWarehouse',	N'DimMusicClassification',					N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(341,	NULL,	3,		0,		0,		N'DimUsageClassification',					N'DimUsageClassification',				N'Play to Pay Dim Usage Classification Table',					N'PipelineWarehouse',	N'DimUsageClassification',					N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(342,	NULL,	3,		0,		0,		N'DimMechUsageClassification',				N'DimMechUsageClassification',			N'Play to Pay Dim Mech Usage Classification Table',				N'PipelineWarehouse',	N'DimMechUsageClassification',				N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(343,	NULL,	3,		0,		0,		N'DimMCPSLicenceType',						N'DimMCPSLicenceType',					N'Play to Pay Dim MCPS Licence Type Table',						N'PipelineWarehouse',	N'DimMCPSLicenceType',						N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(344,	NULL,	3,		0,		0,		N'DimBroAttributePurpose',					N'DimBroAttributePurpose',				N'Play to Pay Dim Bro Attribute Purpose Table',					N'PipelineWarehouse',	N'DimBroAttributePurpose',					N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(345,	NULL,	3,		0,		0,		N'FactBroAttributes',						N'FactBroAttributes',					N'Play to Pay Fact Bro Attributes Table',						N'PipelineWarehouse',	N'FactBroAttributes',						N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(346,	NULL,	3,		0,		0,		N'FactBroSampleDate',						N'FactBroSampleDate',					N'Play to Pay Fact Bro Sample Date Table',						N'PipelineWarehouse',	N'FactBroSampleDate',						N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(347,	NULL,	3,		0,		0,		N'FactBroMCPSLicenceType',					N'FactBroMCPSLicenceType',				N'Play to Pay Fact Bro MCPS Licence Type Table',				N'PipelineWarehouse',	N'FactBroMCPSLicenceType',					N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(348,	NULL,	3,		0,		0,		N'FactBroRightType',						N'FactBroRightType',					N'Play to Pay Fact Bro Right Type Table',						N'PipelineWarehouse',	N'FactBroRightType',						N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(349,	NULL,	3,		0,		0,		N'FactTuneCodeGroup',						N'FactTuneCodeGroup',					N'Play to Pay Fact Tune Code Group Table',						N'PipelineWarehouse',	N'FactTuneCodeGroup',						N'tim.firmin@prsformusic.com',		SYSDATETIME()),		
		(350,	NULL,	3,		0,		0,		N'DimOwnershipCAEGroup',					N'DimOwnershipCAEGroup',				N'Play to Pay Dim Ownership CAE Group Table',					N'PipelineWarehouse',	N'DimOwnershipCAEGroup',					N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(351,	NULL,	3,		0,		0,		N'FactOwnershipCAEGroup',					N'FactOwnershipCAEGroup',				N'Play to Pay Fact Ownership CAE Group Table',					N'PipelineWarehouse',	N'FactOwnershipCAEGroup',					N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(352,	NULL,	3,		0,		0,		N'DimDate',									N'dimDate',								N'Play to Pay Dim Date',										N'PipelineWarehouse',	N'DimDate',									N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(395,	NULL,	2,		0,		0,		N'Format303Line00',							N'brcformat303line00',					N'Broadcast DataQuality Scrub Format303 Line00',				N'Format303',			N'Line00',									N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(396,	NULL,	2,		0,		0,		N'Format303Line10',							N'brcformat303line10',					N'Broadcast DataQuality Scrub Format303 Line10',				N'Format303',			N'Line10',									N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(397,	NULL,	2,		0,		0,		N'Format303Line20',							N'brcformat303line20',					N'Broadcast DataQuality Scrub Format303 Line20',				N'Format303',			N'Line20',									N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(398,	NULL,	2,		0,		0,		N'Format303Line99',							N'brcformat303line99',					N'Broadcast DataQuality Scrub Format303 Line99',				N'Format303',			N'Line99',									N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(399,	NULL,	2,		0,		0,		N'Format5Line00',							N'brcformat5line00',					N'Broadcast DataQuality Scrub Format5 Line00',					N'Format5',				N'Line00',									N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(400,	NULL,	2,		0,		0,		N'Format5Line10',							N'brcformat5line10',					N'Broadcast DataQuality Scrub Format5 Line10',					N'Format5',				N'Line10',									N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(401,	NULL,	2,		0,		0,		N'Format5Line20',							N'brcformat5line20',					N'Broadcast DataQuality Scrub Format5 Line20',					N'Format5',				N'Line20',									N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(402,	NULL,	2,		0,		0,		N'Format5Line99',							N'brcformat5line99',					N'Broadcast DataQuality Scrub Format5 Line99',					N'Format5',				N'Line99',									N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(403,	NULL,	2,		0,		0,		N'Format50Line00',							N'brcformat50line00',					N'Broadcast DataQuality Scrub Format50 Line00',					N'Format50',			N'Line00',									N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(404,	NULL,	2,		0,		0,		N'Format50Line10',							N'brcformat50line10',					N'Broadcast DataQuality Scrub Format50 Line10',					N'Format50',			N'Line10',									N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(405,	NULL,	2,		0,		0,		N'Format50Line20',							N'brcformat50line20',					N'Broadcast DataQuality Scrub Format50 Line20',					N'Format50',			N'Line20',									N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(406,	NULL,	2,		0,		0,		N'Format50Line99',							N'brcformat50line99',					N'Broadcast DataQuality Scrub Format50 Line99',					N'Format50',			N'Line99',									N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(407,	NULL,	2,		0,		0,		N'Format51Line00',							N'brcformat51line00',					N'Broadcast DataQuality Scrub Format51 Line00',					N'Format51',			N'Line00',									N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(408,	NULL,	2,		0,		0,		N'Format51Line10',							N'brcformat51line10',					N'Broadcast DataQuality Scrub Format51 Line10',					N'Format51',			N'Line10',									N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(409,	NULL,	2,		0,		0,		N'Format51Line20',							N'brcformat51line20',					N'Broadcast DataQuality Scrub Format51 Line20',					N'Format51',			N'Line20',									N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(410,	NULL,	2,		0,		0,		N'Format51Line99',							N'brcformat51line99',					N'Broadcast DataQuality Scrub Format51 Line99',					N'Format51',			N'Line99',									N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(411,	NULL,	2,		0,		0,		N'Format52Line00',							N'brcformat52line00',					N'Broadcast DataQuality Scrub Format52 Line00',					N'Format52',			N'Line00',									N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(412,	NULL,	2,		0,		0,		N'Format52Line10',							N'brcformat52line10',					N'Broadcast DataQuality Scrub Format52 Line10',					N'Format52',			N'Line10',									N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(413,	NULL,	2,		0,		0,		N'Format52Line20',							N'brcformat52line20',					N'Broadcast DataQuality Scrub Format52 Line20',					N'Format52',			N'Line20',									N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(414,	NULL,	2,		0,		0,		N'Format52Line99',							N'brcformat52line99',					N'Broadcast DataQuality Scrub Format52 Line99',					N'Format52',			N'Line99',									N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(415,	NULL,	2,		0,		0,		N'Format51aLine00',							N'brcformat51aline00',					N'Broadcast DataQuality Scrub Format51a Line00',				N'Format51a',			N'Line00',									N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(416,	NULL,	2,		0,		0,		N'Format51aLine10',							N'brcformat51aline10',					N'Broadcast DataQuality Scrub Format51a Line10',				N'Format51a',			N'Line10',									N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(417,	NULL,	2,		0,		0,		N'Format51aLine20',							N'brcformat51aline20',					N'Broadcast DataQuality Scrub Format51a Line20',				N'Format51a',			N'Line20',									N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(418,	NULL,	2,		0,		0,		N'Format51aLine99',							N'brcformat51aline99',					N'Broadcast DataQuality Scrub Format51a Line99',				N'Format51a',			N'Line99',									N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(419,	NULL,	2,		0,		0,		N'FormatS1Line00',							N'brcformats1line00',					N'Broadcast DataQuality Scrub FormatS1 Line00',					N'FormatS1',			N'Line00',									N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(420,	NULL,	2,		0,		0,		N'FormatS1Line10',							N'brcformats1line10',					N'Broadcast DataQuality Scrub FormatS1 Line10',					N'FormatS1',			N'Line10',									N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(421,	NULL,	2,		0,		0,		N'FormatS1Line20',							N'brcformats1line20',					N'Broadcast DataQuality Scrub FormatS1 Line20',					N'FormatS1',			N'Line20',									N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(422,	NULL,	2,		0,		0,		N'FormatS1Line99',							N'brcformats1line99',					N'Broadcast DataQuality Scrub FormatS1 Line99',					N'FormatS1',			N'Line99',									N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(423,	NULL,	2,		0,		0,		N'FormatS2Line00',							N'brcformats2line00',					N'Broadcast DataQuality Scrub FormatS2 Line00',					N'FormatS2',			N'Line00',									N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(424,	NULL,	2,		0,		0,		N'FormatS2Line10',							N'brcformats2line10',					N'Broadcast DataQuality Scrub FormatS2 Line10',					N'FormatS2',			N'Line10',									N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(425,	NULL,	2,		0,		0,		N'FormatS2Line20',							N'brcformats2line20',					N'Broadcast DataQuality Scrub FormatS2 Line20',					N'FormatS2',			N'Line20',									N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(426,	NULL,	2,		0,		0,		N'FormatS2Line99',							N'brcformats2line99',					N'Broadcast DataQuality Scrub FormatS2 Line99',					N'FormatS2',			N'Line99',									N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(427,	NULL,	2,		0,		1,		N'ExtractData',								N'brcExtractData',						N'Broadcast DataQuality Extract Data',							N'Raw',					N'ExtractData',								N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(428,	NULL,	2,		0,		1,		N'MDSChannel',								N'brcMDSChannel',						N'Broadcast DataQuality MDS Channel',							N'MDS',					N'Channel',								    N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(429,	NULL,	2,		0,		1,		N'MDSChannelProductionType',				N'brcMDSChannelProductionType',			N'Broadcast DataQuality MDS ChannelProductionType',				N'MDS',					N'ChannelProductionType',					N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(430,	NULL,	2,		0,		1,		N'MDSFileSchedule',							N'brcMDSFileSchedule',					N'Broadcast DataQuality MDS FileSchedule',						N'MDS',					N'FileSchedule',							N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(431,	NULL,	2,		0,		0,		N'DataQualityScrubAvLine00',				N'brcDataQualityScrubAvLine00',			N'Broadcast DataQuality DataQuality Av Line00',					N'ScrubAv',					N'Line00',									N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(432,	NULL,	2,		0,		0,		N'DataQualityScrubAvLine10',				N'brcDataQualityScrubAvLine10',			N'Broadcast DataQuality DataQuality Av Line10',					N'ScrubAv',					N'Line10',									N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(433,	NULL,	2,		0,		0,		N'DataQualityScrubAvLine20',				N'brcDataQualityScrubAvLine20',			N'Broadcast DataQuality DataQuality Av Line20',					N'ScrubAv',					N'Line20',									N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(434,	NULL,	2,		0,		0,		N'DataQualityScrubAvLine99',				N'brcDataQualityScrubAvLine99',			N'Broadcast DataQuality DataQuality Av Line99',					N'ScrubAv',					N'Line99',									N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(435,	NULL,	2,		0,		0,		N'CleanAvLine00',							N'brcDataQualityCleanAvLine00',			N'Broadcast DataQuality Clean Av Line00',						N'Av',					N'Line00',									N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(436,	NULL,	2,		0,		0,		N'CleanAvLine10',							N'brcDataQualityCleanAvLine10',			N'Broadcast DataQuality Clean Av Line10',						N'Av',					N'Line10',									N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(437,	NULL,	2,		0,		0,		N'CleanAvLine20',							N'brcDataQualityCleanAvLine20',			N'Broadcast DataQuality Clean Av Line20',						N'Av',					N'Line20',									N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(438,	NULL,	2,		0,		0,		N'CleanAvLine99',							N'brcDataQualityCleanAvLine99',			N'Broadcast DataQuality Clean Av Line99',						N'Av',					N'Line99',									N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(439,	NULL,	2,		0,		0,		N'CleanAvFile',								N'brcDataQualityCleanAvFile',			N'Broadcast DataQuality Clean Av File',							N'Av',					N'File',									N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(440,	NULL,	2,		0,		0,		N'CleanRadioLine00',						N'brcDataQualityCleanRadioLine00',		N'Broadcast DataQuality Clean Radio Line00',					N'Radio',				N'Line00',									N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(441,	NULL,	2,		0,		0,		N'CleanRadioLine10',						N'brcDataQualityCleanRadioLine10',		N'Broadcast DataQuality Clean Radio Line10',					N'Radio',				N'Line10',									N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(442,	NULL,	2,		0,		0,		N'CleanRadioLine20',						N'brcDataQualityCleanRadioLine20',		N'Broadcast DataQuality Clean Radio Line20',					N'Radio',				N'Line20',									N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(443,	NULL,	2,		0,		0,		N'CleanRadioLine99',						N'brcDataQualityCleanRadioLine99',		N'Broadcast DataQuality Clean Radio Line99',					N'Radio',				N'Line99',									N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(444,	NULL,	2,		0,		0,		N'CleanRadioFile',							N'brcDataQualityCleanRadioFile',		N'Broadcast DataQuality Clean Radio File',						N'Radio',				N'File',									N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(445,	NULL,	2,		0,		0,		N'ConfigRuleThreshold',						N'brcDataQualityConfigRuleThreshold',	N'Broadcast DataQuality Config RuleThreshold',					N'Config',				N'RuleThreshold',							N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(446,	NULL,	2,		0,		0,		N'ConfigScoreThreshold',					N'brcDataQualityConfigScoreThreshold',	N'Broadcast DataQuality Config Score Threshold',				N'Config',				N'ScoreThreshold',							N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(447,	NULL,	2,		0,		0,		N'DataQualityScrubRadioLine00',				N'brcDataQualityScrubRadioLine00',		N'Broadcast DataQuality DataQuality Radio Line00',				N'ScrubRadio',				N'Line00',									N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(448,	NULL,	2,		0,		0,		N'DataQualityScrubRadioLine10',				N'brcDataQualityScrubRadioLine10',		N'Broadcast DataQuality DataQuality Radio Line10',				N'ScrubRadio',				N'Line10',									N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(449,	NULL,	2,		0,		0,		N'DataQualityScrubRadioLine20',				N'brcDataQualityScrubRadioLine20',		N'Broadcast DataQuality DataQuality Radio Line20',				N'ScrubRadio',				N'Line20',									N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(450,	NULL,	2,		0,		0,		N'DataQualityScrubRadioLine99',				N'brcDataQualityScrubRadioLine99',		N'Broadcast DataQuality DataQuality Radio Line99',				N'ScrubRadio',				N'Line99',									N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(451,	NULL,	2,		0,		0,		N'DataQualityCleanAvTabLine10',				N'brcDataQualityCleanAvTabLine10',		N'Broadcast DataQuality Clean Av Tab Line 10',					N'TabAv',					N'Line10',									N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(452,	NULL,	2,		0,		0,		N'DataQualityCleanAvTabLine20',				N'brcDataQualityCleanAvTabLine20',		N'Broadcast DataQuality Clean Av Tab Line 20',					N'TabAv',					N'Line20',									N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(453,	NULL,	2,		0,		0,		N'DataQualityCleanRadioTabLine10',			N'brcDataQualityCleanRadioTabLine10',	N'Broadcast DataQuality Clean Radio Tab Line 10',				N'TabRadio',				N'Line10',									N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(454,	NULL,	2,		0,		0,		N'DataQualityCleanRadioTabLine20',			N'brcDataQualityCleanRadioTabLine20',	N'Broadcast DataQuality Clean Radio Tab Line 20',				N'TabRadio',				N'Line20',									N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(455,	NULL,	2,		0,		0,		N'DataQualityDimChannel',					N'brcDataQualityDimChannel',			N'Broadcast DataQuality Dim Channel',							N'Dim',					N'Channel',									N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(456,	NULL,	2,		0,		0,		N'DataQualityDimDQProduction',				N'brcDataQualityDimDQProduction',		N'Broadcast DataQuality Dim DQProduction',						N'Dim',					N'DQProduction',							N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(457,	NULL,	2,		0,		0,		N'DataQualityDimDQProductionType',			N'brcDataQualityDimDQProductionType',	N'Broadcast DataQuality Dim DQProductionType',					N'Dim',					N'DQProductionType',						N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(458,	NULL,	2,		0,		0,		N'DataQualityDimDQRule',					N'brcDataQualityDimDQRule',				N'Broadcast DataQuality Dim DQRule',							N'Dim',					N'DQRule',									N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(459,	NULL,	2,		0,		0,		N'DataQualityDimFileLog',					N'brcDataQualityDimFileLog',			N'Broadcast DataQuality Dim FileLog',							N'Dim',					N'FileLog',									N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(460,	NULL,	2,		0,		0,		N'DataQualityDimScoreThreshold',			N'brcDataQualityDimScoreThreshold',		N'Broadcast DataQuality Dim ScoreThreshold',					N'Dim',					N'ScoreThreshold',							N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(461,	NULL,	2,		0,		0,		N'DataQualityDimScreen',					N'brcDataQualityDimScreen',				N'Broadcast DataQuality Dim Screen',							N'Dim',					N'Screen',									N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(462,	NULL,	2,		0,		0,		N'DataQualityFactDQFile',					N'brcDataQualityFactDQFile',			N'Broadcast DataQuality Fact DQFile',							N'Fact',				N'DQFile',									N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(463,	NULL,	2,		0,		0,		N'DataQualityFactDQOutcome',				N'brcDataQualityFactDQOutcome',			N'Broadcast DataQuality Fact DQOutcome',						N'Fact',				N'DQOutcome',								N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(464,	NULL,	2,		0,		0,		N'ReportingMissingDays',					N'brcReportingMissingDays',				N'Broadcast DataQuality Reporting Missing Days',				N'Reporting',			N'MissingDays',								N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(465,	NULL,	2,		0,		0,		N'ReportingProductionTypes',				N'brcReportingProductionTypes',			N'Broadcast DataQuality Reporting Missing Production Types',	N'Reporting',			N'MissingProductionTypes',					N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(466,	NULL,	2,		0,		0,		N'StatsAverageUsage',						N'brcStatsAverageUsage',				N'Broadcast DataQuality Stats Average Usage',					N'Stats',				N'AverageUsage',							N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(467,	NULL,	2,		0,		0,		N'StatsDQAggRowsBreakdown',					N'brcStatsDQAggRowsBreakdown',			N'Broadcast DataQuality Stats DQAggRowsBreakdown',				N'Stats',				N'DQAggRowsBreakdown',						N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(468,	NULL,	2,		0,		0,		N'StatsDQAggRulesBreakdown',				N'brcStatsDQAggRulesBreakdown',			N'Broadcast DataQuality Stats DQAggRulesBreakdown',				N'Stats',				N'DQAggRulesBreakdown',						N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(469,	NULL,	2,		0,		0,		N'StatsDQFileScore',						N'brcStatsDQFileScore',					N'Broadcast DataQuality Stats FileScore',						N'Stats',				N'DQFileScore',								N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(470,	NULL,	2,		0,		0,		N'StatsFileBreakDown',						N'brcStatsFileBreakDown',				N'Broadcast DataQuality Stats FileBreakDown',					N'Stats',				N'FileBreakDown',							N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(500,	-1,		6,		1,		0,		N'ETL_DATA_FIX',							N'blobetldatafix',						N'ETLSystem Data File ETL_DATA_FIX',							N'staging',				N'ETL_DATA_FIX',							N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(501,	-1,		6,		1,		0,		N'ETL_ERROR_LOG',							N'blobetlerrorlog',						N'ETLSystem Data File ETL_ERROR_LOG',							N'staging',				N'ETL_ERROR_LOG',							N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(502,	-1,		6,		1,		0,		N'ETL_JOB_CTRL',							N'blobetljobctrl',						N'ETLSystem Data File ETL_JOB_CTRL',							N'staging',				N'ETL_JOB_CTRL',							N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(510,	-1,		6,		1,		0,		N'ETLDataFix',								N'etldatafix',							N'ETLSystem Datamart Table ETLDataFix',							N'datamart',			N'ETLDataFix',								N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(511,	-1,		6,		1,		0,		N'ETLErrorLog',								N'etlerrorlog',							N'ETLSystem Datamart Table ETLErrorLog',						N'datamart',			N'ETLErrorLog',								N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(512,	-1,		6,		1,		0,		N'ETLJobControl',							N'etljobctrl',							N'ETLSystem Datamart Table ETLJobControl',						N'datamart',			N'ETLJobControl',							N'tim.firmin@prsformusic.com',		SYSDATETIME())
	) AS Src
	(
		 EntityTypeId
		,ParentEntityTypeId
		,ApplicationId
		,IsSourceEntity
		,[HasMultipleSourceFile]
		,Name
		,Code
		,[Description]
		,[Schema]
		,[Table]
		,[CreatedBy]
        ,[CreatedDate]
	)
	ON Tgt.EntityTypeId = Src.EntityTypeId

-- Update matched rows
WHEN MATCHED THEN
	UPDATE
	SET
		[ApplicationId]			= Src.[ApplicationId],
		[IsSourceEntity]	    = Src.[IsSourceEntity],
		[HasMultipleSourceFile]	= Src.[HasMultipleSourceFile],
		[Name]					= Src.[Name],
		[Code]					= Src.[Code],
		[ParentEntityTypeId]	= Src.[ParentEntityTypeId],
		[Description]			= Src.[Description],
		[Schema]				= Src.[Schema],
		[Table]					= Src.[Table],
		[CreatedBy]				= Src.[CreatedBy],
        [CreatedDate]			= Src.[CreatedDate]

-- Insert new rows
WHEN NOT MATCHED BY TARGET THEN
	INSERT
		(
			[EntityTypeId],
			[ApplicationId],
			[IsSourceEntity],
			[HasMultipleSourceFile],
			[Name],				
			[Code],				
			[ParentEntityTypeId],
			[Description],		
			[Schema],			
			[Table],				
			[CreatedBy],			
			[CreatedDate]		
		)
	VALUES
		(
			Src.[EntityTypeId],
			Src.[ApplicationId],
			Src.[IsSourceEntity],
			Src.[HasMultipleSourceFile],
			Src.[Name],
			Src.[Code],
			src.[ParentEntityTypeId],
			src.[Description],
			src.[Schema],
			src.[Table],
			src.[CreatedBy],			
			src.[CreatedDate]
		)

--  Delete rows that are in the target but not the source
WHEN NOT MATCHED BY SOURCE THEN
	DELETE;
GO
SET IDENTITY_INSERT [Control].[EntityType] OFF;



SET IDENTITY_INSERT [Control].[LoadStatusType] ON;
GO
MERGE INTO [Control].[LoadStatusType] AS Tgt
USING 
	(VALUES
		(1,'In Progress','Load In Progress','InProgress','PostDeployment Script', SYSDATETIME()),
		(2,'Successful','Load Completed Successfully','Success','PostDeployment Script',SYSDATETIME()),
		(3,'Failed','Load Failed','Failed','PostDeployment Script',SYSDATETIME()),
		(4,'Reset','Load flagged for reset','Reset','PostDeployment Script',SYSDATETIME()),
		(5,'Already Run','Load Already Run','AlreadyRun','PostDeployment Script',SYSDATETIME())
	) AS Src
	(
		[LoadStatusTypeId],
		[Name],
		[Description],
		[ShortName],
		[UpdateUser],
		[UpdateTime]
	)
	ON Tgt.[LoadStatusTypeId] = Src.[LoadStatusTypeId]

-- Update matched rows
WHEN MATCHED THEN
	UPDATE
	SET
		[Name]			   = Src.[Name],
		[Description]	   = Src.[Description],
		[ShortName]		   = src.[ShortName],
		[UpdateUser]	   = Src.[UpdateUser],
		[UpdateTime]	   = Src.[UpdateTime]
-- Insert new rows
WHEN NOT MATCHED BY TARGET THEN
	INSERT
		(
			[LoadStatusTypeId],
			[Name],			
			[Description],	
			[ShortName],		
			[UpdateUser],		
			[UpdateTime]	
		)
	VALUES
		(
			Src.[LoadStatusTypeId],
			Src.[Name],			
			Src.[Description],	
			src.[ShortName],		
			src.[UpdateUser],		
			src.[UpdateTime]	
		)

--  Delete rows that are in the target but not the source
WHEN NOT MATCHED BY SOURCE THEN
	DELETE;
GO
SET IDENTITY_INSERT [Control].[LoadStatusType] OFF;


SET IDENTITY_INSERT [Control].[ProcessStream] ON;
GO
MERGE INTO [Control].[ProcessStream] AS Tgt
USING 
	(VALUES
		(1,'EXT2STG',	'Blob External To Stage', ''	,1),
		(2,'STG2CLN',	'Stage To Clean', '' ,3),
		(3,'CLN2TRN',	'Clean To Transform','',4),
		(4,'TRN2WAR',	'Transform To Warehouse','',6),
		(5,'REF2TRN',	'Reference To Transform','',7),
		(6,'CLN2WAR',	'Clean To Warehouse','',8),
		(7,'TRN2TRN',	'Transform To Transform','',9),
		(8,'TRN2REJ',	'Transform To Reject','',10),
		(9,'SRC2FILE',	'Source To File Extract','',11),
		(10,'STG2TRN',	'Stage to Transform','',4),
		(11,'FILE2EXT',	'File Extract To Blob External','',0),
		(12,'SRC2STG',	'Source System to Staging','',2),
		(13,'WAR2TAB',	'Warehouse To Tabular','',12),
		(14,'MDS2STG',	'MDS Data to Staging','',13),	
		(15,'STG2MDS',	'Staging to MDS','',14)
	) AS Src
	(	
		[ProcessStreamId],
		[Code],
		[Name],
		[Description],
		[ProcessStreamOrder]
	)
	ON Tgt.[ProcessStreamId] = Src.[ProcessStreamId]

-- Update matched rows
WHEN MATCHED THEN
	UPDATE
	SET
		 [Code]					= Src.[Code]
		,[Name]					= src.[Name]
		,[Description]			= src.[Description]
		,[ProcessStreamOrder]	= src.[ProcessStreamOrder]

-- Insert new rows
WHEN NOT MATCHED BY TARGET THEN
	INSERT
		(
			[ProcessStreamId],
			[Code],
			[Name],
			[Description],
			[ProcessStreamOrder]
		)
	VALUES
		(
			Src.[ProcessStreamId],
			Src.[Code],
			Src.[Name],
			src.[Description],
			src.[ProcessStreamOrder]
		)

-- Delete rows that are in the target but not the source
WHEN NOT MATCHED BY SOURCE THEN
	DELETE;
GO
SET IDENTITY_INSERT [Control].[ProcessStream] OFF;

SET IDENTITY_INSERT [Control].[SourceFileType] ON;
GO
MERGE INTO [Control].[SourceFileType] AS Tgt
USING 
	(VALUES
		(1, 'DX','DataXchange Distribution Context', 'DX Partition', 'Out',0,''),
		(2,'UNK','UNKNOWN','Unknown','OUT',0,'UNKNOWN'),
		(3,'SAS','SASOWN','SASOWN','OUT',0,''),
		(4,'PRBI','PRBI oracle data waehouse','PRBI','OUT',0,''),
		(5,'CODA','CODA Data Warehouse','CODA','OUT',0,''),
		(6,'TM1','TM1 Planning - Forecasts Budgets','TM1','OUT',0,''),
		(7,'MDS','MDS2016 File Load','MDS','OUT',0,'')
		) AS Src
	(
		[SourceFileTypeId],	
		[Code],
		[Description],
		[Name],
		[Direction],
		[32BitStageRequired],
		[Collection]
	)
	ON Tgt.[SourceFileTypeId] = Src.[SourceFileTypeId]

-- Update matched rows
WHEN MATCHED THEN
	UPDATE
	SET	
		[Code]					= Src.[Code],
		[Description]			= Src.[Description],
		[Name]					= Src.[Name],
		[Direction]				= Src.[Direction],
		[32BitStageRequired]	= src.[32BitStageRequired],
		[Collection]			= src.[Collection]

-- Insert new rows
WHEN NOT MATCHED BY TARGET THEN
	INSERT
		(
			[SourceFileTypeId],	
			[Code],
			[Description],
			[Name],
			[Direction],
			[32BitStageRequired],
			[Collection]          
		)
	VALUES
		(
			SRC.[SourceFileTypeId],	
			SRC.[Code],
			SRC.[Description],
			SRC.[Name],
			SRC.[Direction],
			SRC.[32BitStageRequired],
			SRC.[Collection]
		)

-- Delete rows that are in the target but not the source
WHEN NOT MATCHED BY SOURCE THEN
	DELETE;
GO
SET IDENTITY_INSERT [Control].[SourceFileType] OFF;

SET IDENTITY_INSERT [Control].[Application] ON;
GO
MERGE INTO [Control].[Application] AS Tgt
USING 
	(VALUES
		(1,'Data Experience Online Statements','DEOS','Data Experience Solution', null, null, null ,'Azure DW ','DX', SYSDATETIME()),
		(2,'BroadcastDataQuality','BRDDQ','DataQuality Solution for AV', null, null, null , 'DataMart', 'DQ',SYSDATETIME()),
		(3,'Broadcast Play to Pay','BRDPTP','Play to Pay Solution for Broadcast 1 and 2', null, null, null , 'Azure DW', 'BR',SYSDATETIME()),
		(4,'Finance DataMart','FDM','Finance DataMart for CODA and TM1', null, null, null , 'DataMart', 'FDM',SYSDATETIME()),
		(5,'REP Transactional','REPTXN','BI DSP Invoice Approval, Archive Reporting Finance & Membershp', null, null, null , 'DataMart', 'OL',SYSDATETIME()),
		(6,'ETL System','ETLsystem','ETL System - Rep Load File Analysis Files', null, null, null , 'DataMart', 'ETLSys',SYSDATETIME()),
		(7,'CashOut Reconciliation System','CORS','CashOut Reconciliation System', null, null, null , 'Azure DW', 'CORS',SYSDATETIME())
	) AS Src
	(
		[ApplicationId],
		[Name],
     	[Code],
		[Description],
		[Priority],		   
		[UpTimeHours],	   
		[ETLType],		   
        [WarehouseType],
		[Prefix],
		[CreatedDate]
	)
	ON Tgt.[ApplicationId] = Src.[ApplicationId]

-- Update matched rows
WHEN MATCHED THEN
	UPDATE
	SET
		[Name]			   = Src.[Name],
		[Code]			   = Src.[Code],
		[Description]	   = Src.[Description],
		[Priority]		   = Src.[Priority],
		[UpTimeHours]	   = Src.[UpTimeHours],
		[ETLType]		   = Src.[ETLType],
		[WarehouseType]	   = Src.[WarehouseType],
		[Prefix]		   = Src.[Prefix]
-- Insert new rows
WHEN NOT MATCHED BY TARGET THEN
	INSERT
		(
			[ApplicationId],
			[Name],
     		[Code],
			[Description],
			[WarehouseType],
			[Prefix]		
		)
	VALUES
		(
			Src.[ApplicationId],
			Src.[Name],
			Src.[Code],
			Src.[Description],
			Src.[WarehouseType],
			Src.[Prefix]
		)
--  Delete rows that are in the target but not the source
WHEN NOT MATCHED BY SOURCE THEN
	DELETE;
GO
SET IDENTITY_INSERT [Control].[Application] OFF;


SET IDENTITY_INSERT [Config].[Parameter] ON;
GO

MERGE INTO [Config].[Parameter] AS Tgt
USING 
	(
	VALUES
		(1,'ETLState', 'Holds ETL state', NULL, NULL, NULL ,'Ready')
	) 
	AS Src
	(
		[ParmaterId],      
		[ParamaterCode],      
		[ParamaterShortDesc], 
		[ParamaterDesc],      
		[ParameterType],      
		[ParameterValue],     
		[ParameterDataType]  
	)
	ON Tgt.ParmaterId = Src.ParmaterId

-- Update matched rows
WHEN MATCHED THEN
	UPDATE
	SET
		[ParamaterCode]      = Src.[ParamaterCode],     
		[ParamaterShortDesc] = Src.[ParamaterShortDesc], 
		[ParamaterDesc]      = Src.[ParamaterDesc], 
		[ParameterType]      = Src.[ParameterType],     
		[ParameterValue]     = Src.[ParameterValue],    
		[ParameterDataType]  = Src.[ParameterDataType]  
-- Insert new rows
WHEN NOT MATCHED BY TARGET THEN
	INSERT
		(
			[ParmaterId],      
			[ParamaterCode],      
			[ParamaterShortDesc], 
			[ParamaterDesc],      
			[ParameterType],      
			[ParameterValue],     
			[ParameterDataType]  	
		)
	VALUES
		(
			Src.[ParmaterId],	 
			Src.[ParamaterCode],     
			Src.[ParamaterShortDesc],
			Src.[ParamaterDesc], 
			Src.[ParameterType],     
			Src.[ParameterValue],    
			Src.[ParameterDataType]  
		)
--  Delete rows that are in the target but not the source
WHEN NOT MATCHED BY SOURCE THEN
	DELETE;
GO
SET IDENTITY_INSERT [Config].[Parameter] OFF;


SET IDENTITY_INSERT [Control].[CleanseRuleType] ON;
GO
MERGE INTO [Control].CleanseRuleType AS Tgt
USING 
	(VALUES
		(10, 'ReplaceWith'),
		(20, 'RemoveTrailing'),
		(30, 'ToUpper'),
		(40, 'ToLower'),
		(50, 'Capitalise'),
		(60, 'RemoveNonNumbers')
	) AS Src
	(
		  CleanseRuleTypeId
		 ,Name    
	)
	ON Tgt.CleanseRuleTypeId = Src.CleanseRuleTypeId

-- Update matched rows
WHEN MATCHED THEN
	UPDATE
	SET
		  Name = Src.Name

-- Insert new rows
WHEN NOT MATCHED BY TARGET THEN
	INSERT
		(
			 CleanseRuleTypeId
			,Name      
		)
	VALUES
		(
			 Src.CleanseRuleTypeId
			,Src.Name 
		)

-- Delete rows that are in the target but not the source
WHEN NOT MATCHED BY SOURCE THEN
DELETE;
GO

SET IDENTITY_INSERT [Control].CleanseRuleType OFF;

SET IDENTITY_INSERT Control.DataQualityRuleType ON;
GO
MERGE INTO Control.DataQualityRuleType AS Tgt
USING 
	(VALUES
		(10, 'Regex'),
		(20, 'Range'),
		(30, 'Containts'),
		(40, 'BeginsWith'),
		(50, 'Pattern'),
		(60, 'MDM')
	) AS Src
	(
		  DataQualityRuleTypeId
		 ,Name    
	)
	ON Tgt.DataQualityRuleTypeId = Src.DataQualityRuleTypeId

-- Update matched rows
WHEN MATCHED THEN
	UPDATE
	SET
		  Name = Src.Name

-- Insert new rows
WHEN NOT MATCHED BY TARGET THEN
	INSERT
		(
			 DataQualityRuleTypeId
			,Name      
		)
	VALUES
		(
			 Src.DataQualityRuleTypeId
			,Src.Name 
		);

-- Delete rows that are in the target but not the source
--WHEN NOT MATCHED BY SOURCE THEN
--	DELETE;

SET IDENTITY_INSERT Control.DataQualityRuleType OFF;


MERGE INTO DataQuality.HarmoniseRule AS Tgt
USING 
	(VALUES
		 (1,'PostCode','ToUpper',1)
		,(2,'Group','ToUpper',1)
			
	) AS Src
	(
	   [HarmoniseRuleId]
      ,[ColumnName]
      ,[CleanseType]
      ,[EntityTypeID]
	)
	ON Tgt.[HarmoniseRuleId] = Src.[HarmoniseRuleId]

-- Update matched rows
WHEN MATCHED THEN
UPDATE 
   SET [HarmoniseRuleId]	=		src.[HarmoniseRuleId]
      ,[ColumnName]			=		src.[ColumnName]
      ,[CleanseType]		=		src.[CleanseType]
      ,[EntityTypeID]		=		src.[EntityTypeID]
      

-- Insert new rows
WHEN NOT MATCHED BY TARGET THEN
	INSERT
		(
	   [HarmoniseRuleId]
      ,[ColumnName]
      ,[CleanseType]
      ,[EntityTypeID]
     
		)
	VALUES
		(
		 src.[HarmoniseRuleId]
		,src.[ColumnName]
		,src.[CleanseType]
		,src.[EntityTypeID]
		
		);

-- Delete rows that are in the target but not the source
--WHEN NOT MATCHED BY SOURCE THEN
--	DELETE;

	--SET IDENTITY_INSERT  DataQuality.HarmoniseRule  OFF;

SET IDENTITY_INSERT DataQuality.DataIntegrityType ON 
GO

MERGE INTO DataQuality.DataIntegrityType AS Tgt
USING 
	(VALUES
		(0, 'N', 'Not Checked'),
		(1, 'P', 'Passed'),
		(2, 'F', 'Failed')
	) AS Src
	(
		 IntegrityTypeId
		,Code
		,Name
	)
	ON Tgt.IntegrityTypeId = Src.IntegrityTypeId

-- Update matched rows
WHEN MATCHED THEN
	UPDATE
	SET
		 Code				= Src.Code
		,Name		= Src.Name

-- Insert new rows
WHEN NOT MATCHED BY TARGET THEN
	INSERT
		(
			 IntegrityTypeId
			,Code
			,Name
		)
	VALUES
		(
			 Src.IntegrityTypeId
			,Src.Code
			,Src.Name
		)

-- Delete rows that are in the target but not the source
WHEN NOT MATCHED BY SOURCE THEN
	DELETE;
GO
	SET IDENTITY_INSERT  DataQuality.DataIntegrityType  OFF

SET IDENTITY_INSERT DataQuality.Screen ON 
GO
MERGE INTO DataQuality.Screen AS Tgt
USING 
	(VALUES
		-- Column rules

		-- Format 5 Line 10

		(1,'Series Indicator','Valid Series Indicator Check',NULL,NULL,'DataQuality Format5 Line10',	1,	'SeriesIndicator NOT IN(''Y'', ''N'', '''')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(2,'Production/Series Name','Production/Series Name Mandatory Column Check',NULL,NULL,'DataQuality Format5 Line10',	1,	'ProductionName = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(3,'Series Number','Series Number Population Check',NULL,NULL,'DataQuality Format5 Line10',	1,	'SeriesIndicator = ''Y'' AND SeriesNumber = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(4,'Episode Name','Episode Name Population Check',NULL,NULL,'DataQuality Format5 Line10',	1,	'SeriesIndicator = ''Y'' AND EpisodeNumber = '''' AND EpisodeName = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(5,'Episode Number','Episode Number Population Check',NULL,NULL,'DataQuality Format5 Line10',	1,	'SeriesIndicator = ''Y'' AND EpisodeNumber = '''' AND EpisodeName = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(6,'Transmission Station','Transmission Station Population Check',NULL,NULL,'DataQuality Format5 Line10',	1,	'TransmissionStation = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(7,'Daily Transmission Schedule Date','Daily Transmission Schedule Date Population Check',NULL,NULL,'DataQuality Format5 Line10',	1,	'DailyTransmissionScheduleDate = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(8,'Transmission Time','Transmission Time Population Check',NULL,NULL,'DataQuality Format5 Line10',	1,	'TransmissionTime = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(9,'Production Company','Production Company Population Check',NULL,NULL,'DataQuality Format5 Line10',	1,	'ProductionSourceIndicator = ''C'' AND ProductionCompany = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(10,'First Transmission Indicator','Valid First Transmission Indicator Check',NULL,NULL,'DataQuality Format5 Line10',	1,	'FirstTransmissionIndicator NOT IN(''Y'', ''N'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		 --Reference rule previously removed as MDS not available.
		(11,'Music Content Indicator','Valid Music Content Indicator Check',NULL,NULL,'DataQuality Format5 Line10',	1,	'ENT.MusicContentIndicator IS NULL',NULL, 'LEFT JOIN MDS.mdm.MusicContent MC ON ENT.MusicContentIndicator = MC.Code',	NULL, NULL, 'AV'),
		(12,'Production Type','Valid Production Type Check',NULL,NULL,'DataQuality Format5 Line10',	1,	'ENT.ProductionType IS NULL',NULL, 'LEFT JOIN MDS.mdm.ProductionType PT ON ENT.ProductionType = PT.Code',	NULL, NULL, 'AV'),
		(13,'Production Source Indicator','Valid Production Source Indicator Check',NULL,NULL,'DataQuality Format5 Line10',	1,	'ENT.ProductionSourceIndicator IS NULL',NULL, 'LEFT JOIN MDS.mdm.ProductionSource PS ON ENT.ProductionSourceIndicator = PS.Code',	NULL, NULL, 'AV'),
		(14,'Domestic International Indicator','Valid Domestic International Indicator Check',NULL,NULL,'DataQuality Format5 Line10',	1,	'ENT.DomesticInternationalIndicator IS NULL',NULL, 'LEFT JOIN MDS.mdm.DomesticInternationalTransmission DI ON ENT.DomesticInternationalIndicator = DI.Code',	NULL, NULL, 'AV'),
		 --Column rule
		(15,'MCPS Blanket Indicator','Valid MCPS Blanket Indicator Check',NULL,NULL,'DataQuality Format5 Line10',	1,	'MCPSBlanketIndicator NOT IN(''Y'', ''N'', '''')',NULL, NULL,	NULL, NULL, 'AV'),
		-- Reference rule
		(16,'Local Network Indicator','Valid Local Network Indicator Check',NULL,NULL,'DataQuality Format5 Line10',	1,	'ENT.LocalNetworkIndicator IS NULL',NULL, 'LEFT JOIN MDS.mdm.LocalNetworkBroadcast LN ON ENT.LocalNetworkIndicator = LN.Code',	NULL, NULL, 'AV'),
		(17,'Territory Code','Valid Territory Check',NULL,NULL,'DataQuality Format5 Line10',	1,	'ENT.TerritoryCode IS NULL',NULL, 'LEFT JOIN MDS.mdm.Territory T ON ENT.TerritoryCode = T.Code',	NULL, NULL, 'AV'),
	--	 Column rule
		(18,'Valid Amendment Indicator','Valid Amendment Indicator Check',NULL,NULL,'DataQuality Format5 Line10',	1,	'AmendmentIndicator NOT IN(''Y'', ''N'', '''')',NULL, NULL,	NULL, NULL, 'AV'),
		
		
		-- Format 5 Line 20
		(30,'Production Reference Number','Production Reference Number Check',NULL,NULL,'DataQuality Format5 Line20',	1,	'ProductionReferenceNumber = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(31,'Music Item Sequence','Music Item Sequence Check',NULL,NULL,'DataQuality Format5 Line20',	1,	'MusicItemSequence = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(32,'Product Album Promo Title','Product Album Promo Title Check',NULL,NULL,'DataQuality Format5 Line20',	1,	'ProductAlbumPromoTitle = '''' AND MusicOriginClassification IN(''C'',''L'')  AND ProductCatalogueNumber  = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(33,'Product Label','Product Label Check',NULL,NULL,'DataQuality Format5 Line20',	1,	'ProductLabel = '''' AND MusicOriginClassification IN(''C'',''L'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(34,'Product Catalogue Number','Product Catalogue Number Check',NULL,NULL,'DataQuality Format5 Line20',	1,	'ProductCatalogueNumber = '''' AND MusicOriginClassification IN(''C'',''L'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(35,'Music Duration','Music Duration Check',NULL,NULL,'DataQuality Format5 Line20',	1,	'ISNULL(MusicDuration,0) <= 0',	NULL,	NULL,	NULL, NULL, 'AV'),
		(36,'Music Usage Classification','Music Usage Classification Check',NULL,NULL,'DataQuality Format5 Line20',	1,	'MusicUsageClassification NOT IN(''B'',''F'',''M'',''S'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(37,'Music Origin Classification','Music Origin Classification Check',NULL,NULL,'DataQuality Format5 Line20',	1,	'MusicOriginClassification NOT IN(''C'',''L'',''P'',''R'',''T'',''V'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(38,'Prior Approval Indicator','Prior Approval Indicator Check',NULL,NULL,'DataQuality Format5 Line20',	1,	'PriorApprovalIndicator NOT IN(''N'',''Y'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(39,'Music Commission Flag','Music Commission Flag Check',NULL,NULL,'DataQuality Format5 Line20',	1,	'MusicCommissionFlag NOT IN(''N'',''Y'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(40,'Licensing Status Of Commissioned Music','Licensing Status Of Commissioned Music Check', NULL,NULL,'DataQuality Format5 Line20',	1,	'LicensingStatusofCommissionedMusic NOT IN(''N'',''Y'') AND MusicCommissionFlag = ''Y''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(41,'Music Composer/Author','Music Composer/Author Check', NULL,NULL,'DataQuality Format5 Line20',	1,	'MusicComposerAuthor = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(42,'Music Publisher','Music Publisher Check', NULL,NULL,'DataQuality Format5 Line20',	1,	'MusicPublisher = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(43,'Music Performer','Music Performer Check', NULL,NULL,'DataQuality Format5 Line20',	1,	'MusicPerformer = '''' AND MusicOriginClassification = ''C''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(44,'Music Dubbing Flag','Music Dubbing Flag Check', NULL,NULL,'DataQuality Format5 Line20',	1,	'MusicDubbingFlag NOT IN(''Y'',''N'')',	NULL,	NULL,	NULL, NULL, 'AV'),



		--Format 5 Line 00

		(60,'Extract Date','Extract Date Check',NULL,NULL,'DataQuality Format5 Line00',	1,	'ExtractDate IS NULL',	NULL,	NULL,	NULL, NULL, 'AV'),
		(61,'Supplier Name','Supplier Name Check',NULL,NULL,'DataQuality Format5 Line00',	1,	'SupplierName = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(62,'Version Number','Version Number Check',NULL,NULL,'DataQuality Format5 Line00',	1,	'VersionNumber = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(63,'SupplierId','SupplierId Check',NULL,NULL,'DataQuality Format5 Line00',	1,	'SupplierId = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(64,'Log Type','Log Type Check',NULL,NULL,'DataQuality Format5 Line00',	1,	'LogType = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),

		--Format 5 Line 99

		(70,'Number Of Records','Number Of Records Check',NULL,NULL,'DataQuality Format5 Line99',	1,	'RecordCount IS NULL',	NULL,	NULL,	NULL, NULL, 'AV'),

	
		-- Format 303 Line 10

		--(1,'Series Indicator','Valid Series Indicator Check',NULL,NULL,'DataQuality Format303 Line10',	1,	'SeriesIndicator NOT IN(''Y'', ''N'', '''')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(71,'Production/Series Name','Production/Series Name Mandatory Column Check',NULL,NULL,'DataQuality Format303 Line10',	1,	'ProductionName = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		--(3,'Series Number','Series Number Population Check',NULL,NULL,'DataQuality Format303 Line10',	1,	'SeriesIndicator = ''Y'' AND SeriesNumber = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(72,'Episode Name','Episode Name Population Check',NULL,NULL,'DataQuality Format303 Line10',	1,	'EpisodeNumber = '''' AND EpisodeName = '''' AND ProductionName = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(73,'Episode Number','Episode Number Population Check',NULL,NULL,'DataQuality Format303 Line10',	1,	'EpisodeNumber = '''' AND EpisodeName = '''' AND ProductionName = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(74,'Transmission Station','Transmission Station Population Check',NULL,NULL,'DataQuality Format303 Line10',	1,	'TransmissionStation = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		--(75,'Transmission Date','Transmission Date Population Check',NULL,NULL,'DataQuality Format303 Line10',	1,	'TransmissionDate = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(76,'Transmission Time','Transmission Time Population Check',NULL,NULL,'DataQuality Format303 Line10',	1,	'TransmissionTime = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		--(77,'Production Company','Production Company Population Check',NULL,NULL,'DataQuality Format303 Line10',	1,	'ProductionSourceIndicator = ''C'' AND ProductionCompany = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		--(10,'First Transmission Indicator','Valid First Transmission Indicator Check',NULL,NULL,'DataQuality Format303 Line10',	1,	'FirstTransmissionIndicator NOT IN(''Y'', ''N'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		 
		 --Reference rule previously removed as MDS not available.
		
		(78,'Music Content Indicator','Valid Music Content Indicator Check',NULL,NULL,'DataQuality Format303 Line10',	1,	'ENT.MusicContentIndicator IS NULL',NULL, 'LEFT JOIN MDS.mdm.MusicContent MC ON ENT.MusicContentIndicator = MC.Code',	NULL, NULL, 'AV'),
		(79,'Production Type','Valid Production Type Check',NULL,NULL,'DataQuality Format303 Line10',	1,	'ENT.ProductionType IS NULL',NULL, 'LEFT JOIN MDS.mdm.ProductionType PT ON ENT.ProductionType = PT.Code',	NULL, NULL, 'AV'),
		(80,'Production Source Indicator','Valid Production Source Indicator Check',NULL,NULL,'DataQuality Format303 Line10',	1,	'ENT.ProductionSourceIndicator IS NULL',NULL, 'LEFT JOIN MDS.mdm.ProductionSource PS ON ENT.ProductionSourceIndicator = PS.Code',	NULL, NULL, 'AV'),
		--(14,'Domestic International Indicator','Valid Domestic International Indicator Check',NULL,NULL,'DataQuality Format303 Line10',	1,	'ENT.DomesticInternationalIndicator IS NULL',NULL, 'LEFT JOIN MDS.mdm.DomesticInternationalTransmission DI ON ENT.DomesticInternationalIndicator = DI.Code',	NULL, NULL, 'AV'),
		 --Column rule
		(81,'MCPS Blanket Indicator','Valid MCPS Blanket Indicator Check',NULL,NULL,'DataQuality Format303 Line10',	1,	'MCPSBlanketIndicator NOT IN(''Y'', ''N'')',NULL, NULL,	NULL, NULL, 'AV'),
		-- Reference rule
		(82,'Local Network Indicator','Valid Local Network Indicator Check',NULL,NULL,'DataQuality Format303 Line10',	1,	'ENT.LocalNetworkIndicator IS NULL',NULL, 'LEFT JOIN MDS.mdm.LocalNetworkBroadcast LN ON ENT.LocalNetworkIndicator = LN.Code',	NULL, NULL, 'AV'),
		--(17,'Territory Code','Valid Territory Check',NULL,NULL,'DataQuality Format303 Line10',	1,	'ENT.TerritoryCode IS NULL',NULL, 'LEFT JOIN MDS.mdm.Territory T ON ENT.TerritoryCode = T.Code',	NULL, NULL, 'AV'),
	
	--	 Column rule
		(83,'Valid Amendment Indicator','Valid Amendment Indicator Check',NULL,NULL,'DataQuality Format303 Line10',	1,	'AmendmentIndicator NOT IN(''Y'', ''N'')',NULL, NULL,	NULL, NULL, 'AV'),
		
		
		-- Format 303 Line 20
		(84,'Production Reference Number','Production Reference Number Check',NULL,NULL,'DataQuality Format303 Line20',	1,	'ProductionReferenceNumber = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(85,'Music Item Sequence','Music Item Sequence Check',NULL,NULL,'DataQuality Format303 Line20',	1,	'MusicItemSequence = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		--(86,'Product Album Promo Title','Product Album Promo Title Check',NULL,NULL,'DataQuality Format303 Line20',	1,	'ProductAlbumPromoTitle = '''' AND MusicOriginClassification IN(''C'',''L'')  AND ProductCatalogueNumber  = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		--(87,'Product Label','Product Label Check',NULL,NULL,'DataQuality Format303 Line20',	1,	'ProductLabel = '''' AND MusicOriginClassification IN(''C'',''L'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		--(88,'Product Catalogue Number','Product Catalogue Number Check',NULL,NULL,'DataQuality Format303 Line20',	1,	'ProductCatalogueNumber = '''' AND MusicOriginClassification IN(''C'',''L'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(89,'Music Duration','Music Duration Check',NULL,NULL,'DataQuality Format303 Line20',	1,	'ISNULL(MusicDuration,0) <= 0',	NULL,	NULL,	NULL, NULL, 'AV'),
		(90,'Music Usage Classification','Music Usage Classification Check',NULL,NULL,'DataQuality Format303 Line20',	1,	'MusicUsageClassification NOT IN(''B'',''F'',''S'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(91,'Music Origin Classification','Music Origin Classification Check',NULL,NULL,'DataQuality Format303 Line20',	1,	'MusicOriginClassification NOT IN(''C'',''L'',''P'',''R'',''T'',''V'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(92,'Prior Approval Indicator','Prior Approval Indicator Check',NULL,NULL,'DataQuality Format303 Line20',	1,	'PriorApprovalIndicator NOT IN(''N'',''Y'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		--(93,'Music Commission Flag','Music Commission Flag Check',NULL,NULL,'DataQuality Format303 Line20',	1,	'MusicCommissionFlag NOT IN(''N'',''Y'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(94,'Licensing Status Of Commissioned Music','Licensing Status Of Commissioned Music Check', NULL,NULL,'DataQuality Format303 Line20',	1,	'LicensingStatusofCommissionedMusic NOT IN(''N'',''Y'') AND MusicCommissionFlag = ''Y''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(95,'Music Composer/Author','Music Composer/Author Check', NULL,NULL,'DataQuality Format303 Line20',	1,	'MusicComposerAuthor = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(96,'Music Publisher','Music Publisher Check', NULL,NULL,'DataQuality Format303 Line20',	1,	'MusicPublisher = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(97,'Music Performer','Music Performer Check', NULL,NULL,'DataQuality Format303 Line20',	1,	'MusicPerformer = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		--(44,'Music Dubbing Flag','Music Dubbing Flag Check', NULL,NULL,'DataQuality Format303 Line20',	1,	'MusicDubbingFlag NOT IN(''Y'',''N'')',	NULL,	NULL,	NULL, NULL, 'AV'),



		--Format 303 Line 00

		(98,'Extract Date','Extract Date Check',NULL,NULL,'DataQuality Format303 Line00',	1,	'ExtractDate IS NULL',	NULL,	NULL,	NULL, NULL, 'AV'),
		(99,'Supplier Name','Supplier Name Check',NULL,NULL,'DataQuality Format303 Line00',	1,	'SupplierName = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(100,'Version Number','Version Number Check',NULL,NULL,'DataQuality Format303 Line00',	1,	'VersionNumber = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(101,'SupplierId','SupplierId Check',NULL,NULL,'DataQuality Format303 Line00',	1,	'SupplierId = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(102,'Log Type','Log Type Check',NULL,NULL,'DataQuality Format303 Line00',	1,	'LogType = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),

		--Format 303 Line 99

		(103,'Number Of Records','Number Of Records Check',NULL,NULL,'DataQuality Format303 Line99',	1,	'RecordCount IS NULL',	NULL,	NULL,	NULL, NULL, 'AV'),

		-- Format 50 Line 10

		(104,'Series Indicator','Valid Series Indicator Check',NULL,NULL,'DataQuality Format50 Line10',	1,	'SeriesIndicator NOT IN(''Y'', ''N'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(105,'Production/Series Name','Production/Series Name Mandatory Column Check',NULL,NULL,'DataQuality Format50 Line10',	1,	'ProductionName = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		--(106,'Series Number','Series Number Population Check',NULL,NULL,'DataQuality Format50 Line10',	1,	'SeriesIndicator = ''Y'' AND SeriesNumber = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(107,'Episode Name','Episode Name Population Check',NULL,NULL,'DataQuality Format50 Line10',	1,	'SeriesIndicator = ''Y'' AND EpisodeNumber = '''' AND EpisodeName = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(108,'Episode Number','Episode Number Population Check',NULL,NULL,'DataQuality Format50 Line10',	1,	'SeriesIndicator = ''Y'' AND EpisodeNumber = '''' AND EpisodeName = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(109,'Transmission Station','Transmission Station Population Check',NULL,NULL,'DataQuality Format50 Line10',	1,	'TransmissionStation = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(110,'Daily Transmission Schedule Date','Daily Transmission Schedule Date Population Check',NULL,NULL,'DataQuality Format50 Line10',	1,	'DailyTransmissionScheduleDate = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(111,'Transmission Time','Transmission Time Population Check',NULL,NULL,'DataQuality Format50 Line10',	1,	'TransmissionTime = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(112,'Production Company','Production Company Population Check',NULL,NULL,'DataQuality Format50 Line10',	1,	'ProductionSourceIndicator = ''C'' AND ProductionCompany = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(113,'First Transmission Indicator','Valid First Transmission Indicator Check',NULL,NULL,'DataQuality Format50 Line10',	1,	'FirstTransmissionIndicator NOT IN(''Y'', ''N'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		 --Reference rule previously removed as MDS not available.
		(114,'Music Content Indicator','Valid Music Content Indicator Check',NULL,NULL,'DataQuality Format50 Line10',	1,	'ENT.MusicContentIndicator IS NULL',NULL, 'LEFT JOIN MDS.mdm.MusicContent MC ON ENT.MusicContentIndicator = MC.Code',	NULL, NULL, 'AV'),
		(115,'Production Type','Valid Production Type Check',NULL,NULL,'DataQuality Format50 Line10',	1,	'ENT.ProductionType IS NULL',NULL, 'LEFT JOIN MDS.mdm.ProductionType PT ON ENT.ProductionType = PT.Code',	NULL, NULL, 'AV'),
		(116,'Production Source Indicator','Valid Production Source Indicator Check',NULL,NULL,'DataQuality Format50 Line10',	1,	'ENT.ProductionSourceIndicator IS NULL',NULL, 'LEFT JOIN MDS.mdm.ProductionSource PS ON ENT.ProductionSourceIndicator = PS.Code',	NULL, NULL, 'AV'),
		--(117,'Domestic International Indicator','Valid Domestic International Indicator Check',NULL,NULL,'DataQuality Format50 Line10',	1,	'ENT.DomesticInternationalIndicator IS NULL',NULL, 'LEFT JOIN MDS.mdm.DomesticInternationalTransmission DI ON ENT.DomesticInternationalIndicator = DI.Code',	NULL, NULL, 'AV'),
		 --Column rule
		(118,'MCPS Blanket Indicator','Valid MCPS Blanket Indicator Check',NULL,NULL,'DataQuality Format50 Line10',	1,	'MCPSBlanketIndicator NOT IN(''Y'', ''N'', '''')',NULL, NULL,	NULL, NULL, 'AV'),
		-- Reference rule
		(119,'Local Network Indicator','Valid Local Network Indicator Check',NULL,NULL,'DataQuality Format50 Line10',	1,	'ENT.LocalNetworkIndicator IS NULL',NULL, 'LEFT JOIN MDS.mdm.LocalNetworkBroadcast LN ON ENT.LocalNetworkIndicator = LN.Code',	NULL, NULL, 'AV'),
		--(120,'Territory Code','Valid Territory Check',NULL,NULL,'DataQuality Format50 Line10',	1,	'ENT.TerritoryCode IS NULL',NULL, 'LEFT JOIN MDS.mdm.Territory T ON ENT.TerritoryCode = T.Code',	NULL, NULL, 'AV'),
	--	 Column rule
		--(121,'Valid Amendment Indicator','Valid Amendment Indicator Check',NULL,NULL,'DataQuality Format50 Line10',	1,	'AmendmentIndicator NOT IN(''Y'', ''N'', '''')',NULL, NULL,	NULL, NULL, 'AV'),
		
		
		-- Format 50 Line 20
		(122,'Production Reference Number','Production Reference Number Check',NULL,NULL,'DataQuality Format50 Line20',	1,	'ProductionReferenceNumber = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(123,'Music Item Sequence','Music Item Sequence Check',NULL,NULL,'DataQuality Format50 Line20',	1,	'MusicItemSequence = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(124,'Product Album Promo Title','Product Album Promo Title Check',NULL,NULL,'DataQuality Format50 Line20',	1,	'ProductAlbumPromoTitle = '''' AND MusicOriginClassification IN(''C'',''L'')  AND ProductCatalogueNumber  = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(125,'Product Label','Product Label Check',NULL,NULL,'DataQuality Format50 Line20',	1,	'ProductLabel = '''' AND MusicOriginClassification IN(''C'',''L'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(126,'Product Catalogue Number','Product Catalogue Number Check',NULL,NULL,'DataQuality Format50 Line20',	1,	'ProductCatalogueNumber = '''' AND MusicOriginClassification IN(''C'',''L'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(127,'Music Duration','Music Duration Check',NULL,NULL,'DataQuality Format50 Line20',	1,	'ISNULL(MusicDuration,0) <= 0',	NULL,	NULL,	NULL, NULL, 'AV'),
		(128,'Music Usage Classification','Music Usage Classification Check',NULL,NULL,'DataQuality Format50 Line20',	1,	'MusicUsageClassification NOT IN(''B'',''F'',''M'',''S'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(129,'Music Origin Classification','Music Origin Classification Check',NULL,NULL,'DataQuality Format50 Line20',	1,	'MusicOriginClassification NOT IN(''C'',''L'',''P'',''R'',''T'',''V'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(130,'Prior Approval Indicator','Prior Approval Indicator Check',NULL,NULL,'DataQuality Format50 Line20',	1,	'PriorApprovalIndicator NOT IN(''N'',''Y'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(131,'Music Commission Flag','Music Commission Flag Check',NULL,NULL,'DataQuality Format50 Line20',	1,	'MusicCommissionFlag NOT IN(''N'',''Y'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(132,'Licensing Status Of Commissioned Music','Licensing Status Of Commissioned Music Check', NULL,NULL,'DataQuality Format50 Line20',	1,	'LicensingStatusofCommissionedMusic NOT IN(''N'',''Y'') AND MusicCommissionFlag = ''Y''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(133,'Music Composer/Author','Music Composer/Author Check', NULL,NULL,'DataQuality Format50 Line20',	1,	'MusicComposerAuthor = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(134,'Music Publisher','Music Publisher Check', NULL,NULL,'DataQuality Format50 Line20',	1,	'MusicPublisher = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(135,'Music Performer','Music Performer Check', NULL,NULL,'DataQuality Format50 Line20',	1,	'MusicPerformer = '''' AND MusicOriginClassification = ''C''',	NULL,	NULL,	NULL, NULL, 'AV'),
		--(136,'Music Dubbing Flag','Music Dubbing Flag Check', NULL,NULL,'DataQuality Format50 Line20',	1,	'MusicDubbingFlag NOT IN(''Y'',''N'')',	NULL,	NULL,	NULL, NULL, 'AV'),



		--Format 50 Line 00

		(137,'Extract Date','Extract Date Check',NULL,NULL,'DataQuality Format50 Line00',	1,	'ExtractDate IS NULL',	NULL,	NULL,	NULL, NULL, 'AV'),
		(138,'Supplier Name','Supplier Name Check',NULL,NULL,'DataQuality Format50 Line00',	1,	'SupplierName = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(139,'Version Number','Version Number Check',NULL,NULL,'DataQuality Format50 Line00',	1,	'VersionNumber = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(140,'SupplierId','SupplierId Check',NULL,NULL,'DataQuality Format50 Line00',	1,	'SupplierId = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(141,'Log Type','Log Type Check',NULL,NULL,'DataQuality Format50 Line00',	1,	'LogType = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),

		--Format 50 Line 99

		(142,'Number Of Records','Number Of Records Check',NULL,NULL,'DataQuality Format50 Line99',	1,	'RecordCount IS NULL',	NULL,	NULL,	NULL, NULL, 'AV'),


		-- Format 52 Line 10

		(143,'Series Indicator','Valid Series Indicator Check',NULL,NULL,'DataQuality Format52 Line10',	1,	'SeriesIndicator NOT IN(''Y'', ''N'', '''')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(144,'Production/Series Name','Production/Series Name Mandatory Column Check',NULL,NULL,'DataQuality Format52 Line10',	1,	'ProductionName = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(145,'Series Number','Series Number Population Check',NULL,NULL,'DataQuality Format52 Line10',	1,	'SeriesIndicator = ''Y'' AND SeriesNumber = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(146,'Episode Name','Episode Name Population Check',NULL,NULL,'DataQuality Format52 Line10',	1,	'SeriesIndicator = ''Y'' AND EpisodeNumber = '''' AND EpisodeName = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(147,'Episode Number','Episode Number Population Check',NULL,NULL,'DataQuality Format52 Line10',	1,	'SeriesIndicator = ''Y'' AND EpisodeNumber = '''' AND EpisodeName = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(148,'Transmission Station','Transmission Station Population Check',NULL,NULL,'DataQuality Format52 Line10',	1,	'TransmissionStation = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(149,'Daily Transmission Schedule Date','Daily Transmission Schedule Date Population Check',NULL,NULL,'DataQuality Format52 Line10',	1,	'DailyTransmissionScheduleDate = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(150,'Transmission Time','Transmission Time Population Check',NULL,NULL,'DataQuality Format52 Line10',	1,	'TransmissionTime = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(151,'Production Company','Production Company Population Check',NULL,NULL,'DataQuality Format52 Line10',	1,	'ProductionSourceIndicator = ''C'' AND ProductionCompany = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(152,'First Transmission Indicator','Valid First Transmission Indicator Check',NULL,NULL,'DataQuality Format52 Line10',	1,	'FirstTransmissionIndicator NOT IN(''Y'', ''N'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		 --Reference rule previously removed as MDS not available.
		(153,'Music Content Indicator','Valid Music Content Indicator Check',NULL,NULL,'DataQuality Format52 Line10',	1,	'ENT.MusicContentIndicator IS NULL',NULL, 'LEFT JOIN MDS.mdm.MusicContent MC ON ENT.MusicContentIndicator = MC.Code',	NULL, NULL, 'AV'),
		(154,'Production Type','Valid Production Type Check',NULL,NULL,'DataQuality Format52 Line10',	1,	'ENT.ProductionType IS NULL',NULL, 'LEFT JOIN MDS.mdm.ProductionType PT ON ENT.ProductionType = PT.Code',	NULL, NULL, 'AV'),
		(155,'Production Source Indicator','Valid Production Source Indicator Check',NULL,NULL,'DataQuality Format52 Line10',	1,	'ENT.ProductionSourceIndicator IS NULL',NULL, 'LEFT JOIN MDS.mdm.ProductionSource PS ON ENT.ProductionSourceIndicator = PS.Code',	NULL, NULL, 'AV'),
		--(156,'Domestic International Indicator','Valid Domestic International Indicator Check',NULL,NULL,'DataQuality Format52 Line10',	1,	'ENT.DomesticInternationalIndicator IS NULL',NULL, 'LEFT JOIN MDS.mdm.DomesticInternationalTransmission DI ON ENT.DomesticInternationalIndicator = DI.Code',	NULL, NULL, 'AV'),
		 --Column rule
		--(157,'MCPS Blanket Indicator','Valid MCPS Blanket Indicator Check',NULL,NULL,'DataQuality Format52 Line10',	1,	'MCPSBlanketIndicator NOT IN(''Y'', ''N'', '''')',NULL, NULL,	NULL, NULL, 'AV'),
		-- Reference rule
		(158,'Local Network Indicator','Valid Local Network Indicator Check',NULL,NULL,'DataQuality Format52 Line10',	1,	'ENT.LocalNetworkIndicator IS NULL',NULL, 'LEFT JOIN MDS.mdm.LocalNetworkBroadcast LN ON ENT.LocalNetworkIndicator = LN.Code',	NULL, NULL, 'AV'),
		(159,'Territory Code','Valid Territory Check',NULL,NULL,'DataQuality Format52 Line10',	1,	'ENT.TerritoryCode IS NULL',NULL, 'LEFT JOIN MDS.mdm.Territory T ON ENT.TerritoryCode = T.Code',	NULL, NULL, 'AV'),
	--	 Column rule
		--(160,'Valid Amendment Indicator','Valid Amendment Indicator Check',NULL,NULL,'DataQuality Format52 Line10',	1,	'AmendmentIndicator NOT IN(''Y'', ''N'', '''')',NULL, NULL,	NULL, NULL, 'AV'),
		
		
		-- Format 52 Line 20
		(161,'Production Reference Number','Production Reference Number Check',NULL,NULL,'DataQuality Format52 Line20',	1,	'ProductionReferenceNumber = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(162,'Music Item Sequence','Music Item Sequence Check',NULL,NULL,'DataQuality Format52 Line20',	1,	'MusicItemSequence = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(163,'Product Album Promo Title','Product Album Promo Title Check',NULL,NULL,'DataQuality Format52 Line20',	1,	'ProductAlbumPromoTitle = '''' AND MusicOriginClassification IN(''C'',''L'')  AND ProductCatalogueNumber  = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(164,'Product Label','Product Label Check',NULL,NULL,'DataQuality Format52 Line20',	1,	'ProductLabel = '''' AND MusicOriginClassification IN(''C'',''L'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(165,'Product Catalogue Number','Product Catalogue Number Check',NULL,NULL,'DataQuality Format52 Line20',	1,	'ProductCatalogueNumber = '''' AND MusicOriginClassification IN(''C'',''L'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(166,'Music Duration','Music Duration Check',NULL,NULL,'DataQuality Format52 Line20',	1,	'ISNULL(MusicDuration,0) <= 0',	NULL,	NULL,	NULL, NULL, 'AV'),
		(167,'Music Usage Classification','Music Usage Classification Check',NULL,NULL,'DataQuality Format52 Line20',	1,	'MusicUsageClassification NOT IN(''B'',''F'',''M'',''S'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(168,'Music Origin Classification','Music Origin Classification Check',NULL,NULL,'DataQuality Format52 Line20',	1,	'MusicOriginClassification NOT IN(''C'',''L'',''P'',''R'',''T'',''V'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		--(169,'Prior Approval Indicator','Prior Approval Indicator Check',NULL,NULL,'DataQuality Format52 Line20',	1,	'PriorApprovalIndicator NOT IN(''N'',''Y'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(170,'Music Commission Flag','Music Commission Flag Check',NULL,NULL,'DataQuality Format52 Line20',	1,	'MusicCommissionFlag NOT IN(''N'',''Y'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(171,'Licensing Status Of Commissioned Music','Licensing Status Of Commissioned Music Check', NULL,NULL,'DataQuality Format52 Line20',	1,	'LicensingStatusofCommissionedMusic NOT IN(''N'',''Y'') AND MusicCommissionFlag = ''Y''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(172,'Music Composer/Author','Music Composer/Author Check', NULL,NULL,'DataQuality Format52 Line20',	1,	'MusicComposerAuthor = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(173,'Music Publisher','Music Publisher Check', NULL,NULL,'DataQuality Format52 Line20',	1,	'MusicPublisher = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(174,'Music Performer','Music Performer Check', NULL,NULL,'DataQuality Format52 Line20',	1,	'MusicPerformer = '''' AND MusicOriginClassification = ''C''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(175,'Music Dubbing Flag','Music Dubbing Flag Check', NULL,NULL,'DataQuality Format52 Line20',	1,	'MusicDubbingFlag NOT IN(''Y'',''N'')',	NULL,	NULL,	NULL, NULL, 'AV'),



		--Format 52 Line 00

		(176,'Extract Date','Extract Date Check',NULL,NULL,'DataQuality Format52 Line00',	1,	'ExtractDate IS NULL',	NULL,	NULL,	NULL, NULL, 'AV'),
		(177,'Supplier Name','Supplier Name Check',NULL,NULL,'DataQuality Format52 Line00',	1,	'SupplierName = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(178,'Version Number','Version Number Check',NULL,NULL,'DataQuality Format52 Line00',	1,	'VersionNumber = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(179,'SupplierId','SupplierId Check',NULL,NULL,'DataQuality Format52 Line00',	1,	'SupplierId = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(180,'Log Type','Log Type Check',NULL,NULL,'DataQuality Format52 Line00',	1,	'LogType = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),

		--Format 52 Line 99

		(181,'Number Of Records','Number Of Records Check',NULL,NULL,'DataQuality Format52 Line99',	1,	'RecordCount IS NULL',	NULL,	NULL,	NULL, NULL, 'AV'),

		-- Format 51 Line 00

		(182, 'Extract Date','Extract Date Check',NULL,NULL,'DataQuality Format51 Line00',	1,	'ExtractDate IS NULL',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(183, 'Supplier Name','Supplier Name Check',NULL,NULL,'DataQuality Format51 Line00',	1,	'SupplierName = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(184,'Version Number','Version Number Check',NULL,NULL,'DataQuality Format51 Line00',	1,	'VersionNumber = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(185,'SupplierId','SupplierId Check',NULL,NULL,'DataQuality Format51 Line00',	1,	'SupplierId = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(186,'Log Type','Log Type Check',NULL,NULL,'DataQuality Format51 Line00',	1,	'LogType = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),

		--Format 51 line 10


		(188,'Production Number','Production Number Check',NULL,NULL,'DataQuality Format51 Line10',	1,	'ProductionNumber = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(189,'Production/Series Name','Production/Series Name Mandatory Column Check',NULL,NULL,'DataQuality Format51 Line10',	1,	'ProductionName = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(190,'Transmission Station','Transmission Station Population Check',NULL,NULL,'DataQuality Format51 Line10',	1,	'TransmissionStation = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(191,'Daily Transmission Schedule Date','Daily Transmission Schedule Date Population Check',NULL,NULL,'DataQuality Format51 Line10',	1,	'DailyTransmissionScheduleDate = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(192,'Transmission Time','Transmission Time Population Check',NULL,NULL,'DataQuality Format51 Line10',	1,	'TransmissionTime = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
	 

	    --Reference rule previously removed as MDS not available.
		(193,'Music Content Indicator','Valid Music Content Indicator Check',NULL,NULL,'DataQuality Format51 Line10',	1,	'ENT.MusicContentIndicator IS NULL',NULL, 'LEFT JOIN MDS.mdm.MusicContent MC ON ENT.MusicContentIndicator = MC.Code',	NULL, NULL, 'Radio'),
		(194,'Production Type','Valid Production Type Check',NULL,NULL,'DataQuality Format51 Line10',	1,	'ENT.ProductionType IS NULL',NULL, 'LEFT JOIN MDS.mdm.ProductionType PT ON ENT.ProductionType = PT.Code',	NULL, NULL, 'Radio'),
	    (195,'Domestic International Indicator','Valid Domestic International Indicator Check',NULL,NULL,'DataQuality Format51 Line10',	1,	'ENT.DomesticInternationalIndicator IS NULL',NULL, 'LEFT JOIN MDS.mdm.DomesticInternationalTransmission DI ON ENT.DomesticInternationalIndicator = DI.Code',	NULL, NULL, 'Radio'),
		 
		-- Reference rule
		(196,'Local Network Indicator','Valid Local Network Indicator Check',NULL,NULL,'DataQuality Format51 Line10',	1,	'ENT.LocalNetworkIndicator IS NULL',NULL, 'LEFT JOIN MDS.mdm.LocalNetworkBroadcast LN ON ENT.LocalNetworkIndicator = LN.Code',	NULL, NULL, 'Radio'),
		(197,'Territory Code','Valid Territory Check',NULL,NULL,'DataQuality Format51 Line10',	1,	'ENT.TerritoryCode IS NULL',NULL, 'LEFT JOIN MDS.mdm.Territory T ON ENT.TerritoryCode = T.Code',	NULL, NULL, 'Radio'),
	   --Column rule
		(198,'Valid Amendment Indicator','Valid Amendment Indicator Check',NULL,NULL,'DataQuality Format51 Line10',	1,	'AmendmentIndicator NOT IN(''Y'', ''N'', '''')',NULL, NULL,	NULL, NULL, 'Radio'),
		
		--Format 51 line 20


		(199,'Production Reference Number','Production Reference Number Check',NULL,NULL,'DataQuality Format51 Line20',	1,	'ProductionReferenceNumber = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(200,'Music Title','Music Title Check',NULL,NULL,'DataQuality Format51 Line20',	1,	'MusicTitle = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(201,'Music Item Sequence','Music Item Sequence Check',NULL,NULL,'DataQuality Format51 Line20',	1,	'MusicItemSequence = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(202,'Product Album Promo Title','Product Album Promo Title Check',NULL,NULL,'DataQuality Format51 Line20',	1,	'ProductAlbumPromoTitle = '''' AND MusicOriginClassification IN(''C'',''L'')  AND ProductCatalogueNumber  = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(203,'Product Label','Product Label Check',NULL,NULL,'DataQuality Format51 Line20',	1,	'ProductLabel = '''' AND MusicOriginClassification IN(''C'',''L'')',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(204,'Product Catalogue Number','Product Catalogue Number Check',NULL,NULL,'DataQuality Format51 Line20',	1,	'ProductCatalogueNumber = '''' AND MusicOriginClassification IN(''C'',''L'')',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(205,'Music Duration','Music Duration Check',NULL,NULL,'DataQuality Format51 Line20',	1,	'ISNULL(MusicDuration,0) <= 0',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(206,'Music Usage Classification','Music Usage Classification Check',NULL,NULL,'DataQuality Format51 Line20',	1,	'MusicUsageClassification NOT IN(''B'',''F'',''M'',''S'')',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(207,'Music Origin Classification','Music Origin Classification Check',NULL,NULL,'DataQuality Format51 Line20',	1,	'MusicOriginClassification NOT IN(''C'',''L'',''P'',''R'',''T'',''V'')',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(208,'Prior Approval Indicator','Prior Approval Indicator Check',NULL,NULL,'DataQuality Format51 Line20',	1,	'PriorApprovalIndicator NOT IN(''N'',''Y'')',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(209,'Music Commission Flag','Music Commission Flag Check',NULL,NULL,'DataQuality Format51 Line20',	1,	'MusicCommissionFlag NOT IN(''N'',''Y'')',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(210,'Music Composer/Author','Music Composer/Author Check', NULL,NULL,'DataQuality Format51 Line20',	1,	'MusicComposerAuthor = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(211,'Music Publisher','Music Publisher Check', NULL,NULL,'DataQuality Format51 Line20',	1,	'MusicPublisher = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(212,'Music Performer','Music Performer Check', NULL,NULL,'DataQuality Format51 Line20',	1,	'MusicPerformer = '''' AND MusicOriginClassification = ''C''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(213,'Music Dubbing Flag','Music Dubbing Flag Check', NULL,NULL,'DataQuality Format51 Line20',	1,	'MusicDubbingFlag NOT IN(''Y'',''N'')',	NULL,	NULL,	NULL, NULL, 'Radio'),

		--Format 51 line 99


		(214,'Number Of Records','Number Of Records Check',NULL,NULL,'DataQuality Format51 Line99',	1,	'NumberOfRecords IS NULL',	NULL,	NULL,	NULL, NULL, 'Radio'),

		
			-- Format 51a Line 00

		(215, 'Extract Date','Extract Date Check',NULL,NULL,'DataQuality Format51a Line00',	1,	'ExtractDate IS NULL',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(216, 'Supplier Name','Supplier Name Check',NULL,NULL,'DataQuality Format51a Line00',	1,	'SupplierName = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(217,'Version Number','Version Number Check',NULL,NULL,'DataQuality Format51a Line00',	1,	'VersionNumber = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(218,'SupplierId','SupplierId Check',NULL,NULL,'DataQuality Format51a Line00',	1,	'SupplierId = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(219,'Log Type','Log Type Check',NULL,NULL,'DataQuality Format51a Line00',	1,	'LogType = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),

		--Format 51a line 10


		(220,'Production Number','Production Number Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'ProductionNumber = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
        (221,'Series Indicator','Valid Series Indicator Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'SeriesIndicator NOT IN(''Y'', ''N'', '''')',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(222,'Production/Series Name','Production/Series Name Mandatory Column Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'ProductionName = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(223,'Series Number','Series Number Population Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'SeriesIndicator = ''Y'' AND SeriesNumber = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(224,'Episode Name','Episode Name Population Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'SeriesIndicator = ''Y'' AND EpisodeNumber = '''' AND EpisodeName = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(225,'Episode Number','Episode Number Population Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'SeriesIndicator = ''Y'' AND EpisodeNumber = '''' AND EpisodeName = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(226,'Transmission Station','Transmission Station Population Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'TransmissionStation = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		--(227,'Originating Network Station','Originating Network Station Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'OriginatingNetworkStation = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(228,'Daily Transmission Schedule Date','Daily Transmission Schedule Date Population Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'DailyTransmissionScheduleDate = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(229,'Transmission Time','Transmission Time Population Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'LTRIM(TransmissionTime) = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
	    (230,'Running Time','Running Time Population Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'RunningTime = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(231,'Production Company','Production Company Check', NULL,NULL,'DataQuality Format51a Line10',	1,	'ProductionCompany = '''' AND ProductionSourceIndicator = ''C''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		--(232,'Production Year','Production Year Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'ProductionYear = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(233,'First Transmission Indicator','First Transmission Indicator Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'FirstTransmissionIndicator NOT IN(''Y'', ''N'', '''')',	NULL,	NULL,	NULL, NULL, 'Radio'),
	    --reference rule previously removed as MDS not available.
		(234,'Music Content Indicator','Valid Music Content Indicator Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'ENT.MusicContentIndicator IS NULL',NULL, 'LEFT JOIN MDS.mdm.MusicContent MC ON ENT.MusicContentIndicator = MC.Code',	NULL, NULL, 'Radio'),
		(235,'Production Type','Valid Production Type Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'ENT.ProductionType IS NULL',NULL, 'LEFT JOIN MDS.mdm.ProductionType PT ON ENT.ProductionType = PT.Code',	NULL, NULL, 'Radio'),
	    (236,'Production Source Indicator','Valid Production Source Indicator Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'ENT.ProductionSourceIndicator IS NULL',NULL, 'LEFT JOIN MDS.mdm.ProductionSource PS ON ENT.ProductionSourceIndicator = PS.Code',	NULL, NULL, 'Radio'),
	    (237,'Domestic International Indicator','Valid Domestic International Indicator Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'ENT.DomesticInternationalIndicator IS NULL',NULL, 'LEFT JOIN MDS.mdm.DomesticInternationalTransmission DI ON ENT.DomesticInternationalIndicator = DI.Code',	NULL, NULL, 'Radio'),
		 
		-- Reference rule
		(238,'MCPS Blanket Indicator','Valid MCPS Blanket Indicator Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'MCPSBlanketIndicator NOT IN(''Y'', ''N'', '''')',NULL, NULL,	NULL, NULL, 'Radio'),
		(239,'Local Network Indicator','Valid Local Network Indicator Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'ENT.LocalNetworkIndicator IS NULL',NULL, 'LEFT JOIN MDS.mdm.LocalNetworkBroadcast LN ON ENT.LocalNetworkIndicator = LN.Code',	NULL, NULL, 'Radio'),
		(240,'Secondary Exploitation Indicator','Secondary Exploitation Indicator Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'SecondaryExploitationIndicator NOT IN(''Y'', ''N'', '''')',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(241,'Territory Code','Valid Territory Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'ENT.TerritoryCode IS NULL',NULL, 'LEFT JOIN MDS.mdm.Territory T ON ENT.TerritoryCode = T.Code',	NULL, NULL, 'Radio'),
	   --Column rule
		(242,'Valid Amendment Indicator','Valid Amendment Indicator Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'AmendmentIndicator NOT IN(''Y'', ''N'', '''')',NULL, NULL,	NULL, NULL, 'Radio'),
		
		--Format 51a line 20


		(243,'Production Reference Number','Production Reference Number Check',NULL,NULL,'DataQuality Format51a Line20',	1,	'ProductionReferenceNumber = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(244,'Music Title','Music Title Check',NULL,NULL,'DataQuality Format51a Line20',	1,	'MusicTitle = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(245,'Music Item Sequence','Music Item Sequence Check',NULL,NULL,'DataQuality Format51a Line20',	1,	'MusicItemSequence = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(246,'Product Album Promo Title','Product Album Promo Title Check',NULL,NULL,'DataQuality Format51a Line20',	1,	'ProductAlbumPromoTitle = '''' AND MusicOriginClassification IN(''C'',''L'')  AND ProductCatalogueNumber  = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(247,'Product Label','Product Label Check',NULL,NULL,'DataQuality Format51a Line20',	1,	'ProductLabel = '''' AND MusicOriginClassification IN(''C'',''L'')',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(248,'Product Catalogue Number','Product Catalogue Number Check',NULL,NULL,'DataQuality Format51a Line20',	1,	'ProductCatalogueNumber = '''' AND MusicOriginClassification IN(''C'',''L'')',	NULL,	NULL,	NULL, NULL, 'Radio'),
		--(249,'Product Side Number','Product Side Number Check',NULL,NULL,'DataQuality Format51a Line20',	1,	'ProductSideNumber = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		--(250,'Product Track Number','Product Track Number Check',NULL,NULL,'DataQuality Format51a Line20',	1,	'ProductTrackNumber = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(251,'Music Duration','Music Duration Check',NULL,NULL,'DataQuality Format51a Line20',	1,	'ISNULL(MusicDuration,0) <= 0',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(252,'Music Usage Classification','Music Usage Classification Check',NULL,NULL,'DataQuality Format51a Line20',	1,	'MusicUsageClassification NOT IN(''B'',''F'',''M'',''S'')',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(253,'Music Origin Classification','Music Origin Classification Check',NULL,NULL,'DataQuality Format51a Line20',	1,	'MusicOriginClassification NOT IN(''C'',''L'',''P'',''R'',''T'',''V'')',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(254,'Grand Rights Classification','Grand Rights Classification Check',NULL,NULL,'DataQuality Format51a Line20',	1,	'GrandRightsClassification NOT IN(''B'',''M'',''O'', '''')',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(255,'Prior Approval Indicator','Prior Approval Indicator Check',NULL,NULL,'DataQuality Format51a Line20',	1,	'PriorApprovalIndicator NOT IN(''N'',''Y'')',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(256,'Music Commission Flag','Music Commission Flag Check',NULL,NULL,'DataQuality Format51a Line20',	1,	'MusicCommissionFlag NOT IN(''N'',''Y'')',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(257,'Licensing Status Of Commissioned Music','Licensing Status Of Commissioned Music Check', NULL,NULL,'DataQuality Format51a Line20',	1,	'LicensingStatusofCommissionedMusic NOT IN(''N'',''Y'') AND MusicCommissionFlag = ''Y''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(258,'Music Composer/Author','Music Composer/Author Check', NULL,NULL,'DataQuality Format51a Line20',	1,	'MusicComposerAuthor = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
	    --(259,'Music Arranger Translator Editor etc','Music Arranger Translator Editor etc Check', NULL,NULL,'DataQuality Format51a Line20',	1,	'MusicArrangerTranslatorEditor = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(260,'Music Publisher','Music Publisher Check', NULL,NULL,'DataQuality Format51a Line20',	1,	'MusicPublisher = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(261,'Music Performer','Music Performer Check', NULL,NULL,'DataQuality Format51a Line20',	1,	'MusicPerformer = '''' AND MusicOriginClassification = ''C''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(262,'Music Dubbing Flag','Music Dubbing Flag Check', NULL,NULL,'DataQuality Format51a Line20',	1,	'MusicDubbingFlag NOT IN(''Y'',''N'')',	NULL,	NULL,	NULL, NULL, 'Radio'),

		--Format 51a line 99


		(263,'Number Of Records','Number Of Records Check',NULL,NULL,'DataQuality Format51a Line99',	1,	'NumberOfRecords IS NULL',	NULL,	NULL,	NULL, NULL, 'Radio'),

			--Selector 1 Line 00

		(264, 'Transmission Station','Transmission Station Population Check',NULL,NULL,'DataQuality FormatS1 Line00',	1,	'TransmissionStation = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),

			--Selector 1 Line 10

		(265,'Station Ref','Station Ref Check',NULL,NULL,'DataQuality FormatS1 Line10',	1,	'StationRef = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(266,'Transmission Schedule Date','Transmission Schedule Date Check',NULL,NULL,'DataQuality FormatS1 Line10',	1,	'TransmissionScheduleDate = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
        (267,'Transmission Time','Transmission Time Population Check',NULL,NULL,'DataQuality FormatS1 Line10',	1,	'LTRIM(TransmissionTime) = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
        (268,'Standard Text','Standard Text Check',NULL,NULL,'DataQuality FormatS1 Line10',	1,	'StandardText = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(269,'Page Number','Page Number Check',NULL,NULL,'DataQuality FormatS1 Line10',	1,	'PageNumber = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
        (270,'Selector Version','Selector Version Check',NULL,NULL,'DataQuality FormatS1 Line10',	1,	'SelectorVersion = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		
       
            --Selector 1 Line 20

	    (271,'Artist Name 1','Artist Name 1 Check', NULL,NULL,'DataQuality FormatS1 Line20',	1,	'ArtistName1 = '''' AND ArtistName2 <> ''News''',	NULL,	NULL,	NULL, NULL, 'Radio'),
        (272,'Artist Name 2','Artist Name 2 Check',NULL,NULL,'DataQuality FormatS1 Line20',	1,	'ArtistName2 = '''' AND ArtistName1 = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
        (273,'Music Title','Music Title Check',NULL,NULL,'DataQuality FormatS1 Line20',	1,	'MusicTitle = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
        (274,'Music Duration','Music Duration Check',NULL,NULL,'DataQuality FormatS1 Line20',	1,	'MusicDuration = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		
		

			--Selector 2 Line 00

		--(275, 'Record Type','Record Type Check',NULL,NULL,'DataQuality FormatS2 Line00',	1,	'RecordType = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(276, 'Transmission Station','Transmission Station Population Check',NULL,NULL,'DataQuality FormatS2 Line00',	1,	'TransmissionStation = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),

			--Selector 2 Line 10

		--(277,'Record Type','Record Type Check',NULL,NULL,'DataQuality FormatS2 Line10',	1,	'RecordType = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
        (278,'Transmission Schedule Date','Transmission Schedule Date Check',NULL,NULL,'DataQuality FormatS2 Line10',	1,	'TransmissionScheduleDate = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
        (279,'Transmission Time','Transmission Time Population Check',NULL,NULL,'DataQuality FormatS2 Line10',	1,	'LTRIM(TransmissionTime) = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
       
            --Selector 2 Line 20

	    (280,'Music Title','Music Title Check', NULL,NULL,'DataQuality FormatS2 Line20',	1,	'MusicTitle= ''''',   NULL,	NULL,	NULL, NULL, 'Radio'),
        (281,'Music Performer','Music Performer Check', NULL,NULL,'DataQuality FormatS2 Line20',	1,	'MusicPerformer = '''' AND MusicComposer = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(282,'Music Composer','Music Composer Check', NULL,NULL,'DataQuality FormatS2 Line20',	1,	'MusicComposer = '''' AND MusicPerformer = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
        (283,'Music Duration','Music Duration Check',NULL,NULL,'DataQuality FormatS2 Line20',	1,	'MusicDuration= ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(284,'Music Type','Music Type Check',NULL,NULL,'DataQuality FormatS2 Line20',	1,	'MusicType= ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
     	(285,'Music Duration','Music Duration Check',NULL,NULL,'DataQuality FormatS2 Line20',	1,	'MusicDuration = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),

		--Selector 2 Line 99


		--(286,'Record Type','Record Type Check',NULL,NULL,'DataQuality FormatS2 Line99',	1,	'RecordType = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(287,'Number Of Records','Number Of Records Check',NULL,NULL,'DataQuality FormatS2 Line99',	1,	'NumberOfRecords IS NULL',	NULL,	NULL,	NULL, NULL, 'Radio')

	



	) AS Src
	(
	   [ScreenId]
      ,[ScreenName]
      ,[ScreenDescription]
      ,[ProjectId]
      ,[EnvironmentId]
      ,[ObjectId]
      ,[ScreenSeverityID]
      ,[ScreenSQL]
	  ,[ReportSQL]
      ,[ScreenReferenceSQL]
      ,[ReportTableName]
	  ,[CleanseSQL]
	  ,[Domain]
	)
	ON Tgt.[ScreenId] = Src.[ScreenId]

-- Update matched rows
WHEN MATCHED THEN
UPDATE 
   SET [ScreenName] = src.ScreenName
      ,[ScreenDescription] = src.ScreenDescription
      ,[ProjectId] = src.ProjectId
      ,[EnvironmentId] = src.EnvironmentId
      ,[ObjectId] = src.ObjectId
      ,[ScreenSeverityID] = src.ScreenSeverityID
      ,[ScreenSQL] = src.ScreenSQL
      ,[ScreenReferenceSQL] = src.ScreenReferenceSQL
      ,[ReportSQL] = src.ReportSQL
      ,[ReportTableName] = src.ReportTableName
	  ,[CleanseSQL] = Src.[CleanseSQL]
	  ,[Domain] = Src.[Domain]

-- Insert new rows
WHEN NOT MATCHED BY TARGET THEN
	INSERT
		(
	   [ScreenId]
      ,[ScreenName]
      ,[ScreenDescription]
      ,[ProjectId]
      ,[EnvironmentId]
      ,[ObjectId]
      ,[ScreenSeverityID]
      ,[ScreenSQL]
      ,[ScreenReferenceSQL]
      ,[ReportSQL]
      ,[ReportTableName]
	  ,[CleanseSQL]
	  ,[Domain]
		)
	VALUES
		(
		   src.[ScreenId]
		  ,src.[ScreenName]
		  ,src.[ScreenDescription]
		  ,src.[ProjectId]
		  ,src.[EnvironmentId]
		  ,src.[ObjectId]
		  ,src.[ScreenSeverityID]
		  ,src.[ScreenSQL]
		  ,src.[ScreenReferenceSQL]
		  ,src.[ReportSQL]
		  ,src.[ReportTableName]
		  ,src.[CleanseSQL]
		  ,src.[Domain]
		);

-- Delete rows that are in the target but not the source
--WHEN NOT MATCHED BY SOURCE THEN
--	DELETE;

SET IDENTITY_INSERT DataQuality.Screen OFF;
SET IDENTITY_INSERT DataQuality.ScreenSeverity ON 

MERGE INTO DataQuality.ScreenSeverity AS Tgt
USING 
	(VALUES
		(1,'Low','Low'),
		(2,'Medium','Medium'),
		(3,'High','High')				     	
	) AS Src
	(
		ScreenSeverityID, 
		SeverityName, 
		SeverityCategory
	)
	ON Tgt.[ScreenSeverityID] = Src.[ScreenSeverityID]

-- Update matched rows
WHEN MATCHED THEN
UPDATE 
   SET [SeverityName] = src.SeverityName
      ,[SeverityCategory] = src.SeverityCategory

-- Insert new rows
WHEN NOT MATCHED BY TARGET THEN
	INSERT
		(
		ScreenSeverityID, 
		SeverityName, 
		SeverityCategory
		)
	VALUES
		(
			src.ScreenSeverityID, 
			src.SeverityName, 
			src.SeverityCategory
		);
-- Delete rows that are in the target but not the source
--WHEN NOT MATCHED BY SOURCE THEN
--	DELETE;

SET IDENTITY_INSERT  DataQuality.ScreenSeverity  OFF;

SET IDENTITY_INSERT DataQuality.[CleanseRule] ON 

MERGE INTO [DataQuality].[StandardiseRule] AS Tgt
USING 
	(VALUES
		 (1,1,'Name','Contains','Central','ReplaceWith','Middle',1)
		,(2,2,'Name','EndsWith','Cty','ReplaceWith','City',1)

		
	) AS Src
	(
	   [StandardiseRuleId]
      ,[DataQualityRuleId]
      ,[ColumnName]
      ,[PatternMatchType]
      ,[Criteria]
      ,[StandardiseType]
      ,[StandardiseTypeValue]
      ,[EntityTypeID]
	)
	ON Tgt.[StandardiseRuleId] = Src.[StandardiseRuleId]

-- Update matched rows
WHEN MATCHED THEN
UPDATE 
   SET [StandardiseRuleId] = src.[StandardiseRuleId]
      ,[DataQualityRuleId] = src.[DataQualityRuleId]
      ,[ColumnName] = src.[ColumnName]
      ,[PatternMatchType] = src.[PatternMatchType]
      ,[Criteria] = src.[Criteria]
      ,[StandardiseType] = src.[StandardiseType]
      ,[StandardiseTypeValue] = src.[StandardiseTypeValue]
      ,[EntityTypeID] = src.[EntityTypeID]
    

-- Insert new rows
WHEN NOT MATCHED BY TARGET THEN
	INSERT
		(
	   [StandardiseRuleId]
      ,[DataQualityRuleId]
      ,[ColumnName]
      ,[PatternMatchType]
      ,[Criteria]
      ,[StandardiseType]
      ,[StandardiseTypeValue]
      ,[EntityTypeID]
		)
	VALUES
		(
		   src.[StandardiseRuleId]
		  ,src.[DataQualityRuleId]
		  ,src.[ColumnName]
		  ,src.[PatternMatchType]
		  ,src.[Criteria]
		  ,src.[StandardiseType]
		  ,src.[StandardiseTypeValue]
		  ,src.[EntityTypeID]

		);

-- Delete rows that are in the target but not the source
--WHEN NOT MATCHED BY SOURCE THEN
--	DELETE;

	--SET IDENTITY_INSERT  DataQuality.[CleanseRule]  OFF;

--SET IDENTITY_INSERT [Azure].[JobLogResult] ON;
--GO

--MERGE INTO [Azure].[JobLogResult] AS Tgt
--USING 
--	(
--	VALUES
--		(1,	'Starting components'			), -- start/stop the components
--		(2,	'Components started'			), -- components started ready for ETL
--		(3,	'Components ready to shutdown'	), -- ETL finished components ready to shut down
--		(4,	'Components finished'			), -- components shut down finished
--		(5,	'Failed'						), -- error occured
--		(6, 'Finishing with components'		)  -- components shutting down started
--	) 
--	AS Src
--	(
--		[JobLogResultId],      
--		[JobResultDescription] 
--	)
--	ON Tgt.[JobLogResultId] = Src.[JobLogResultId]

---- Update matched rows
--WHEN MATCHED THEN
--	UPDATE
--	SET [JobResultDescription] = Src.[JobResultDescription]

---- Insert new rows
--WHEN NOT MATCHED BY TARGET THEN
--	INSERT
--		(
--			[JobLogResultId],   
--			[JobResultDescription]	
--		)
--	VALUES
--		(
--			Src.[JobLogResultId],	 
--			Src.[JobResultDescription] 
--		)
----  Delete rows that are in the target but not the source
--WHEN NOT MATCHED BY SOURCE THEN
--	DELETE;
--GO

--SET IDENTITY_INSERT [Azure].[JobLogResult] OFF;

SET IDENTITY_INSERT OLAPControl.[Database] ON;

MERGE INTO OLAPControl.[Database] AS Tgt
USING 
	(VALUES
		(1,'Adventure Works Example')
	) AS Src
	(
		  DatabaseId
		 ,DatabaseName
	)
	ON Tgt.DatabaseId = Src.DatabaseId

-- Update matched rows
WHEN MATCHED THEN
	UPDATE
	SET
		  DatabaseName				= Src.DatabaseName
-- Insert new rows
WHEN NOT MATCHED BY TARGET THEN
	INSERT
		(
			 DatabaseId
			,DatabaseName
		)
	VALUES
		(
			 Src.DatabaseId
			,Src.DatabaseName
		)

-- Delete rows that are in the target but not the source
WHEN NOT MATCHED BY SOURCE THEN
	DELETE;

SET IDENTITY_INSERT OLAPControl.[Database] OFF;
GO


SET IDENTITY_INSERT OLAPControl.[Cube] ON;

MERGE INTO OLAPControl.[Cube] AS Tgt
USING 
	(VALUES
		(1, 1, 'PRS Analytics', 1)
	) AS Src
	(
		  CubeId
		 ,DatabaseId
		 ,CubeName
		 ,RequiresProcess
	)
	ON Tgt.CubeId = Src.CubeId

-- Update matched rows
WHEN MATCHED THEN
	UPDATE
	SET
		  CubeName				= Src.CubeName
-- Insert new rows
WHEN NOT MATCHED BY TARGET THEN
	INSERT
		(
			 CubeId
			,DatabaseId
			,CubeName
			,RequiresProcess
		)
	VALUES
		(
			 Src.CubeId
			,Src.DatabaseId
			,Src.CubeName
			,Src.RequiresProcess
		)

-- Delete rows that are in the target but not the source
WHEN NOT MATCHED BY SOURCE THEN
	DELETE;

SET IDENTITY_INSERT OLAPControl.[Cube] OFF;


GO


/****** Object:  StoredProcedure [Control].[ObtainSourceFileIdForProcess]    Script Date: 03/05/2017 11:16:22 ******/
DROP PROCEDURE [Control].[ObtainSourceFileIdForProcess]
GO

/****** Object:  StoredProcedure [Control].[ObtainSourceFileIdForProcess]    Script Date: 03/05/2017 11:16:22 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Adatis
-- Create date: 15/12/2016
-- Description:	Gets SourceFileId to process at various stages
-- =============================================
CREATE PROCEDURE [Control].[ObtainSourceFileIdForProcess]
	@ProcessStream		VARCHAR(50),
	@ApplicationCode	VARCHAR(80)

AS
BEGIN

IF (@ProcessStream = 'EXT2STG')

BEGIN
			 
			IF EXISTS 
			(SELECT TOP (1) SourceFileId 
			FROM [Control].SourceFile SF
			INNER JOIN [Control].SourceFileType sft on sft.SourceFileTypeId = sf.SourceFileTypeId
			LEFT JOIN [Control].[Application] a on sf.ApplicationId = a.[ApplicationId]
			WHERE [FileExtractedDate] is not null
			AND [BlobUploadDate] is  not null
			AND StageDate is null
			AND a.[Code] = @ApplicationCode
			)
			
			BEGIN
			
			(SELECT TOP (1) SourceFileId 
			FROM [Control].SourceFile SF
			INNER JOIN Control.SourceFileType sft on sft.SourceFileTypeId = sf.SourceFileTypeId
			LEFT JOIN [Control].[Application] a on sf.ApplicationId = a.[ApplicationId]
			WHERE [FileExtractedDate] is not null
			AND [BlobUploadDate] is  not null
			AND StageDate is null
			AND a.[Code] = @ApplicationCode
			)
			END
			
			ELSE SELECT 0
END

IF (@ProcessStream = 'STG2CLN')

BEGIN
			 IF EXISTS
			 (SELECT TOP (1) SourceFileId 
			 FROM [Control].SourceFile SF
			 INNER JOIN [Control].SourceFileType sft on sft.SourceFileTypeId = sf.SourceFileTypeId
			 LEFT JOIN [Control].[Application] a on sf.ApplicationId = a.[ApplicationId]
			 WHERE [FileExtractedDate] is not null
			 AND [BlobUploadDate] is  not null
			 AND StageDate is not null
			 AND [CleanDate] is null
			AND a.[Code] = @ApplicationCode
			 )
			 
			 BEGIN
			 
			 
			 (SELECT TOP (1) SourceFileId 
			 FROM [Control].SourceFile SF
			 INNER JOIN [Control].SourceFileType sft on sft.SourceFileTypeId = sf.SourceFileTypeId
			 LEFT JOIN [Control].[Application] a on sf.ApplicationId = a.[ApplicationId]
			 WHERE [FileExtractedDate] is not null
			 AND [BlobUploadDate] is  not null
			 AND StageDate is not null
			 AND [CleanDate] is null
			AND a.[Code] = @ApplicationCode
			 )
			 END
			 
			 ELSE SELECT 0
END

IF (@ProcessStream = 'CLN2WAR') 

BEGIN
			IF EXISTS
			(SELECT TOP (1) SourceFileId 
			FROM [Control].SourceFile SF
			INNER JOIN [Control].SourceFileType sft on sft.SourceFileTypeId = sf.SourceFileTypeId
			LEFT JOIN [Control].[Application] a on sf.ApplicationId = a.[ApplicationId]
			WHERE [FileExtractedDate] is not null
			AND [BlobUploadDate] is  not null
			AND StageDate is not null
			AND CleanDate is not null
			AND WarehouseDate is null
			AND a.[Code] = @ApplicationCode
			)
			
			BEGIN
			
			
			(SELECT TOP (1) SourceFileId 
			FROM [Control].SourceFile SF
			INNER JOIN [Control].SourceFileType sft on sft.SourceFileTypeId = sf.SourceFileTypeId
			LEFT JOIN [Control].[Application] a on sf.ApplicationId = a.[ApplicationId]
			WHERE [FileExtractedDate] is not null
			AND [BlobUploadDate] is  not null
			AND StageDate is not null
			AND CleanDate is not null
			AND WarehouseDate is null
			AND a.[Code] = @ApplicationCode
			)
			END
			ELSE SELECT 0

END

IF (@ProcessStream = 'STG2DMT') 

BEGIN
			IF EXISTS
			(SELECT TOP (1) SourceFileId 
			FROM [Control].SourceFile SF
			INNER JOIN [Control].SourceFileType sft on sft.SourceFileTypeId = sf.SourceFileTypeId
			LEFT JOIN [Control].[Application] a on sf.ApplicationId = a.[ApplicationId]
			WHERE [FileExtractedDate] is not null
			AND [BlobUploadDate] is  not null
			AND StageDate is not null
			AND WarehouseDate is null
			AND a.[Code] = @ApplicationCode
			)
			
			BEGIN
			
			
			(SELECT TOP (1) SourceFileId 
			FROM [Control].SourceFile SF
			INNER JOIN [Control].SourceFileType sft on sft.SourceFileTypeId = sf.SourceFileTypeId
			LEFT JOIN [Control].[Application] a on sf.ApplicationId = a.[ApplicationId]
			WHERE [FileExtractedDate] is not null
			AND [BlobUploadDate] is  not null
			AND StageDate is not null
			AND WarehouseDate is null
			AND a.[Code] = @ApplicationCode
			)
			END
			ELSE SELECT 0

END

IF (@ProcessStream = 'CLN2TRN') 

BEGIN
			IF EXISTS
			(SELECT TOP (1) SourceFileId 
			FROM [Control].SourceFile SF
			INNER JOIN [Control].SourceFileType sft on sft.SourceFileTypeId = sf.SourceFileTypeId
			LEFT JOIN [Control].[Application] a on sf.ApplicationId = a.[ApplicationId]
			WHERE [FileExtractedDate] is not null
			AND [BlobUploadDate] is  not null
			AND StageDate is not null
			AND CleanDate is not null
			AND TransformDate is null
			AND a.[Code] = @ApplicationCode
			)
			
			BEGIN
			
			
			(SELECT TOP (1) SourceFileId 
			FROM [Control].SourceFile SF
			INNER JOIN [Control].SourceFileType sft on sft.SourceFileTypeId = sf.SourceFileTypeId
			LEFT JOIN [Control].[Application] a on sf.ApplicationId = a.[ApplicationId]
			WHERE [FileExtractedDate] is not null
			AND [BlobUploadDate] is  not null
			AND StageDate is not null
			AND CleanDate is not null
			AND TransformDate is null
			AND a.[Code] = @ApplicationCode
			)
			END
			ELSE SELECT 0

END

IF (@ProcessStream = 'TRN2WAR') 

BEGIN
			IF EXISTS
			(SELECT TOP (1) SourceFileId 
			FROM [Control].SourceFile SF
			INNER JOIN [Control].SourceFileType sft on sft.SourceFileTypeId = sf.SourceFileTypeId
			LEFT JOIN [Control].[Application] a on sf.ApplicationId = a.[ApplicationId]
			WHERE [FileExtractedDate] is not null
			AND [BlobUploadDate] is  not null
			AND StageDate is not null
			AND CleanDate is not null
			AND TransformDate is not null
			AND WarehouseDate is null
			AND a.[Code] = @ApplicationCode
			)
			
			BEGIN
			
			
			(SELECT TOP (1) SourceFileId 
			FROM [Control].SourceFile SF
			INNER JOIN [Control].SourceFileType sft on sft.SourceFileTypeId = sf.SourceFileTypeId
			LEFT JOIN [Control].[Application] a on sf.ApplicationId = a.[ApplicationId]
			WHERE [FileExtractedDate] is not null
			AND [BlobUploadDate] is  not null
			AND StageDate is not null
			AND CleanDate is not null
			AND TransformDate is not null
			AND WarehouseDate is null
			AND a.[Code] = @ApplicationCode
			)
			END
			ELSE SELECT 0

END
END
GO

SET IDENTITY_INSERT [Control].[EventActionType] ON;
GO
MERGE INTO [Control].[EventActionType] AS Tgt
USING 
	(VALUES
	--	EATId	Name		Description				CreatedBy						CreatedDate		UpdatedBy		UpdatedDate		RowVersion
		--(10,	'Email',	'Send Notification',	'elliot.gross@prsformusic.com',	SYSDATETIME(),	SUSER_SNAME(),	SYSDATETIME(),	'0x00000000000117F5'),
		--(20,	'Abort',	'Abort Batch',			'elliot.gross@prsformusic.com',	SYSDATETIME(),	SUSER_SNAME(),	SYSDATETIME(),	'0x00000000000117F6')

		(10,	'Email',	'Send Notification',	'elliot.gross@prsformusic.com',		SUSER_SNAME()		),
		(20,	'Abort',	'Abort Batch',			'elliot.gross@prsformusic.com',		SUSER_SNAME()		)

		) AS Src
	(
		[EventActionTypeId] 
		,[Name]              
		,[Description]       
		,[CreatedBy]         
		--,[CreatedDate]       
		,[UpdatedBy]         
		--,[UpdatedDate]       
		--,[RowVersion]
	)
	ON Tgt.[EventActionTypeId] = Src.[EventActionTypeId]

-- Update matched rows
WHEN MATCHED THEN
	UPDATE
	SET
		[Name]				= Src.[Name] 
		,[Description]		= Src.[Description]
		,[UpdatedBy]        = Src.[UpdatedBy]
		--,[UpdatedDate]    = Src.[UpdatedDate]
		--,[RowVersion]		= Src.[RowVersion]

-- Insert new rows
WHEN NOT MATCHED BY TARGET THEN
	INSERT
		(
			[EventActionTypeId] 
			,[Name]              
			,[Description]       
			,[CreatedBy]         
			--,[CreatedDate]       
			,[UpdatedBy]         
			--,[UpdatedDate]       
			--,[RowVersion]	
		)
	VALUES
		(
			Src.[EventActionTypeId] 
			,Src.[Name]              
			,Src.[Description]       
			,Src.[CreatedBy]         
			--,Src.[CreatedDate]       
			,Src.[UpdatedBy]         
			--,Src.[UpdatedDate]       
			--,Src.[RowVersion]	
		)

--  Delete rows that are in the target but not the source
WHEN NOT MATCHED BY SOURCE THEN
	DELETE;
GO
SET IDENTITY_INSERT [Control].[EventActionType] OFF;
