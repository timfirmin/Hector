/*
Deployment script for BiSystemTest

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "BiSystemTest"
:setvar DefaultFilePrefix "BiSystemTest"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END

GO


GO
PRINT N'Creating [Audit]...';


GO
CREATE SCHEMA [Audit]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Azure]...';


GO
CREATE SCHEMA [Azure]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Config]...';


GO
CREATE SCHEMA [Config]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Control]...';


GO
CREATE SCHEMA [Control]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [DataRollback]...';


GO
CREATE SCHEMA [DataRollback]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Metadata]...';


GO
CREATE SCHEMA [Metadata]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Monitor]...';


GO
CREATE SCHEMA [Monitor]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [OLAPControl]...';


GO
CREATE SCHEMA [OLAPControl]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Reporting]...';


GO
CREATE SCHEMA [Reporting]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Secure]...';


GO
CREATE SCHEMA [Secure]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [SSIS]...';


GO
CREATE SCHEMA [SSIS]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Test]...';


GO
CREATE SCHEMA [Test]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Audit].[DataQuality]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Audit].[DataQuality] (
    [DataQualityId] BIGINT          IDENTITY (1, 1) NOT NULL,
    [RowId]         BIGINT          NOT NULL,
    [SourceColumn]  VARCHAR (50)    NULL,
    [OriginalValue] NVARCHAR (1000) NULL,
    [NewValue]      NVARCHAR (1000) NULL,
    [ScreenId]      INT             NOT NULL,
    [ProcessStream] VARCHAR (10)    NOT NULL,
    [EntityId]      INT             NOT NULL,
    [LoadId]        INT             NOT NULL,
    CONSTRAINT [pkcDataQuality] PRIMARY KEY CLUSTERED ([DataQualityId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Audit].[SourceFileProcessStream]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Audit].[SourceFileProcessStream] (
    [SourceFileProcessStreamId] INT          IDENTITY (1, 1) NOT NULL,
    [SourceFileId]              INT          NOT NULL,
    [ProcessStream]             VARCHAR (50) NOT NULL,
    [LoadProcess]               VARCHAR (50) NULL,
    [LoadStatusTypeId]          INT          NOT NULL,
    [LoadId]                    INT          NOT NULL,
    [CreatedBy]                 [sysname]    NOT NULL,
    [CreatedDate]               DATETIME     NOT NULL,
    [UpdatedBy]                 [sysname]    NOT NULL,
    [UpdatedDate]               DATETIME     NOT NULL,
    [RowVersion]                ROWVERSION   NOT NULL,
    CONSTRAINT [pkcSourceFileProcessStreamId] PRIMARY KEY CLUSTERED ([SourceFileProcessStreamId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Audit].[ExecutionLogs]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Audit].[ExecutionLogs] (
    [ExecutionLogId]            UNIQUEIDENTIFIER NOT NULL,
    [ReportKey]                 INT              NOT NULL,
    [UserKey]                   INT              NOT NULL,
    [MachineKey]                INT              NOT NULL,
    [RequestType]               INT              NOT NULL,
    [FormatType]                INT              NOT NULL,
    [StatusCode]                INT              NOT NULL,
    [SourceType]                INT              NOT NULL,
    [TimeStart]                 DATETIME         NOT NULL,
    [TimeEnd]                   DATETIME         NOT NULL,
    [TimeDataRetrieval]         INT              NOT NULL,
    [TimeProcessing]            INT              NOT NULL,
    [TimeRendering]             INT              NOT NULL,
    [ByteCount]                 BIGINT           NOT NULL,
    [RowCount]                  BIGINT           NOT NULL,
    [ExecutionId]               NVARCHAR (64)    NOT NULL,
    [TotalExecTime]             INT              NOT NULL,
    [ActionType]                INT              NOT NULL,
    [ScalabilityTimePaging]     INT              NOT NULL,
    [ScalabilityTimeProcessing] INT              NOT NULL,
    [EstMemoryKBPaging]         INT              NOT NULL,
    [EstMemoryKBProcessing]     INT              NOT NULL,
    [CreatedBy]                 [sysname]        NOT NULL,
    [CreatedDate]               DATETIME         NOT NULL,
    [UpdatedBy]                 [sysname]        NOT NULL,
    [UpdatedDate]               DATETIME         NOT NULL,
    [RowVersion]                ROWVERSION       NOT NULL,
    CONSTRAINT [pkcExecutionLogs] PRIMARY KEY CLUSTERED ([ExecutionLogId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Audit].[ErrorRows]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Audit].[ErrorRows] (
    [ErrorRowId]       INT              IDENTITY (1, 1) NOT NULL,
    [LoadId]           INT              NULL,
    [RowId]            BIGINT           NULL,
    [RowNumber]        INT              NULL,
    [EntityId]         INT              NULL,
    [TaskId]           UNIQUEIDENTIFIER NULL,
    [TaskName]         VARCHAR (200)    NULL,
    [PackageId]        UNIQUEIDENTIFIER NULL,
    [PackageName]      VARCHAR (200)    NULL,
    [ErrorCode]        INT              NULL,
    [ErrorDescription] VARCHAR (2000)   NULL,
    [XmlRow]           XML              NULL,
    [CreatedBy]        [sysname]        NOT NULL,
    [CreatedDate]      DATETIME         NOT NULL,
    [UpdatedBy]        [sysname]        NOT NULL,
    [UpdatedDate]      DATETIME         NOT NULL,
    [RowVersion]       ROWVERSION       NOT NULL,
    CONSTRAINT [pkcErrorRows] PRIMARY KEY CLUSTERED ([ErrorRowId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Audit].[EventFact]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Audit].[EventFact] (
    [EventFactId] INT    IDENTITY (1, 1) NOT NULL,
    [DateId]      INT    NULL,
    [ScreenId]    INT    NULL,
    [LoadId]      INT    NULL,
    [RowId]       BIGINT NULL,
    [EntityId]    INT    NULL,
    CONSTRAINT [pkcEventFact] PRIMARY KEY CLUSTERED ([EventFactId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Audit].[RunLogs]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Audit].[RunLogs] (
    [RunLogId]    INT             IDENTITY (1, 1) NOT NULL,
    [Event]       NVARCHAR (4000) NOT NULL,
    [When]        DATETIME        NOT NULL,
    [RecCount]    INT             NULL,
    [CreatedBy]   [sysname]       NOT NULL,
    [CreatedDate] DATETIME        NOT NULL,
    [UpdatedBy]   [sysname]       NOT NULL,
    [UpdatedDate] DATETIME        NOT NULL,
    [RowVersion]  ROWVERSION      NOT NULL
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Audit].[RowThroughput]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Audit].[RowThroughput] (
    [RowThroughputId] INT           IDENTITY (1, 1) NOT NULL,
    [ExecutionId]     INT           NULL,
    [ExecutableId]    INT           NULL,
    [EnvironmentId]   INT           NULL,
    [EntityId]        INT           NULL,
    [LoadProcess]     VARCHAR (20)  NULL,
    [TaskName]        VARCHAR (100) NULL,
    [ProcessStream]   VARCHAR (50)  NULL,
    [ExtractedRows]   INT           NULL,
    [InsertedRows]    INT           NULL,
    [UpdatedRows]     INT           NULL,
    [DeletedRows]     INT           NULL,
    [FailedRows]      INT           NULL,
    [ArchivedRows]    INT           NULL,
    [BadRows]         INT           NULL,
    [LoadId]          INT           NOT NULL,
    [CreatedBy]       [sysname]     NOT NULL,
    [CreatedDate]     DATETIME      NOT NULL,
    [UpdatedBy]       [sysname]     NOT NULL,
    [UpdatedDate]     DATETIME      NOT NULL,
    [RowVersion]      ROWVERSION    NOT NULL,
    [ApplicationId]   SMALLINT      NULL
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Audit].[PackageLoad]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Audit].[PackageLoad] (
    [LoadId]             INT              IDENTITY (1, 1) NOT NULL,
    [ParentLoadId]       INT              NULL,
    [ExecutionId]        INT              NULL,
    [EnvironmentId]      INT              NULL,
    [ProjectId]          INT              NULL,
    [ExecutionGUID]      UNIQUEIDENTIFIER NULL,
    [PackageVersionGUID] UNIQUEIDENTIFIER NULL,
    [PackageGUID]        UNIQUEIDENTIFIER NULL,
    [PackageName]        VARCHAR (250)    NULL,
    [LoadProcess]        VARCHAR (20)     NULL,
    [LoadStatusId]       INT              NULL,
    [StartTime]          DATETIME         NULL,
    [EndTime]            DATETIME         NULL,
    [Duration]           BIGINT           NULL,
    [CreatedBy]          [sysname]        NOT NULL,
    [CreatedDate]        DATETIME         NOT NULL,
    [UpdatedBy]          [sysname]        NOT NULL,
    [UpdatedDate]        DATETIME         NOT NULL,
    [RowVersion]         ROWVERSION       NOT NULL,
    CONSTRAINT [pkcPackageLoad] PRIMARY KEY CLUSTERED ([LoadId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Audit].[ExecutionPath]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Audit].[ExecutionPath] (
    [ExecutionLogId]            UNIQUEIDENTIFIER NOT NULL,
    [ExecutionId]               NVARCHAR (64)    NULL,
    [ActionType]                INT              NULL,
    [FormatType]                INT              NULL,
    [StatusCode]                INT              NULL,
    [TimeStart]                 DATETIME         NULL,
    [TimeEnd]                   DATETIME         NULL,
    [TimeDataRetrieval]         INT              NULL,
    [TimeProcessing]            INT              NULL,
    [TimeRendering]             INT              NULL,
    [ByteCount]                 BIGINT           NULL,
    [RowCount]                  BIGINT           NULL,
    [TotalExecTime]             INT              NULL,
    [ScalabilityTimePaging]     INT              NULL,
    [ScalabilityTimeProcessing] INT              NULL,
    [EstMemoryKBPaging]         INT              NULL,
    [EstMemoryKBProcessing]     INT              NULL,
    [CreatedBy]                 [sysname]        NOT NULL,
    [CreatedDate]               DATETIME         NOT NULL,
    [UpdatedBy]                 [sysname]        NOT NULL,
    [UpdatedDate]               DATETIME         NOT NULL,
    [RowVersion]                ROWVERSION       NOT NULL,
    CONSTRAINT [pkcExecutionPath] PRIMARY KEY CLUSTERED ([ExecutionLogId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Audit].[ExecutionParameters]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Audit].[ExecutionParameters] (
    [ExecutionParameterId] UNIQUEIDENTIFIER NOT NULL,
    [Name]                 NVARCHAR (2000)  NOT NULL,
    [Value]                NVARCHAR (MAX)   NOT NULL,
    [ExecutionLogId]       UNIQUEIDENTIFIER NOT NULL,
    [CreatedBy]            [sysname]        NOT NULL,
    [CreatedDate]          DATETIME         NOT NULL,
    [UpdatedBy]            [sysname]        NOT NULL,
    [UpdatedDate]          DATETIME         NOT NULL,
    [RowVersion]           ROWVERSION       NOT NULL,
    CONSTRAINT [pkcExecutionParameters] PRIMARY KEY CLUSTERED ([ExecutionParameterId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Audit].[ErrorLog]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Audit].[ErrorLog] (
    [ErrorLogId]            INT              NOT NULL,
    [QueueTaskId]           INT              NULL,
    [EventType]             VARCHAR (50)     NULL,
    [EventName]             VARCHAR (100)    NULL,
    [ErrorCount]            INT              NULL,
    [StatusId]              TINYINT          NULL,
    [EntityId]              INT              NULL,
    [RowNumber]             INT              NULL,
    [RowId]                 BIGINT           NULL,
    [Technology]            VARCHAR (100)    NULL,
    [Component]             VARCHAR (100)    NULL,
    [Version]               VARCHAR (100)    NULL,
    [ProcessStream]         VARCHAR (100)    NULL,
    [MachineName]           VARCHAR (100)    NULL,
    [PackageId]             UNIQUEIDENTIFIER NULL,
    [ExecutionInstanceGUID] UNIQUEIDENTIFIER NULL,
    [CreatedDate]           DATETIME         NOT NULL,
    [CreatedBy]             INT              NOT NULL,
    [UpdatedBy]             [sysname]        NOT NULL,
    [UpdatedDate]           DATETIME         NOT NULL,
    [RowVersion]            ROWVERSION       NOT NULL,
    PRIMARY KEY CLUSTERED ([ErrorLogId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Audit].[ErrorInstanceLog]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Audit].[ErrorInstanceLog] (
    [ErrorInstanceLogId] INT             IDENTITY (1, 1) NOT NULL,
    [EventInstanceType]  VARCHAR (50)    NOT NULL,
    [ErrorLogId]         INT             NOT NULL,
    [ErrorCode]          VARCHAR (100)   NOT NULL,
    [ErrorString]        NVARCHAR (4000) NOT NULL,
    [StatusId]           TINYINT         NOT NULL,
    [RuleNumber]         INT             NOT NULL,
    [TableInError]       VARCHAR (100)   NOT NULL,
    [FiledInError]       VARCHAR (100)   NOT NULL,
    [ValueInError]       NVARCHAR (100)  NOT NULL,
    [CreatedBy]          [sysname]       NOT NULL,
    [CreatedDate]        DATETIME        NOT NULL,
    [UpdatedBy]          [sysname]       NOT NULL,
    [UpdatedDate]        DATETIME        NOT NULL,
    [RowVersion]         ROWVERSION      NOT NULL,
    PRIMARY KEY CLUSTERED ([ErrorInstanceLogId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Azure].[AutomationLogs]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Azure].[AutomationLogs] (
    [PId]            INT              IDENTITY (1, 1) NOT NULL,
    [LogLevel]       INT              NULL,
    [MessageDetails] NVARCHAR (MAX)   NULL,
    [RunbookName]    NVARCHAR (MAX)   NULL,
    [Timestamp]      DATETIME         NULL,
    [OperationID]    UNIQUEIDENTIFIER NULL
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Azure].[AutomationLogs].[AzureLogs_IDX]...';


GO
CREATE CLUSTERED INDEX [AzureLogs_IDX]
    ON [Azure].[AutomationLogs]([PId] ASC);


GO
PRINT N'Creating [Config].[Variable]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Config].[Variable] (
    [VariableId] INT           NOT NULL,
    [Name]       VARCHAR (100) NOT NULL,
    [Value]      VARCHAR (50)  NOT NULL,
    [Type]       VARCHAR (20)  NOT NULL,
    PRIMARY KEY CLUSTERED ([VariableId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Config].[Parameter]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Config].[Parameter] (
    [ParmaterId]         INT           NOT NULL,
    [ParamaterCode]      VARCHAR (10)  NULL,
    [ParamaterShortDesc] VARCHAR (20)  NULL,
    [ParamaterDesc]      VARCHAR (50)  NULL,
    [ParameterType]      VARCHAR (20)  NULL,
    [ParameterValue]     NVARCHAR (50) NULL,
    [ParameterDataType]  VARCHAR (30)  NULL,
    CONSTRAINT [pkcParameter] PRIMARY KEY CLUSTERED ([ParmaterId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[LoadStatusType]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[LoadStatusType] (
    [LoadStatusTypeId] INT           IDENTITY (1, 1) NOT NULL,
    [Name]             VARCHAR (50)  NOT NULL,
    [Description]      VARCHAR (100) NOT NULL,
    [ShortName]        VARCHAR (10)  NULL,
    [UpdateUser]       VARCHAR (150) NULL,
    [UpdateTime]       DATETIME      NULL,
    CONSTRAINT [pkcLoadStatusType] PRIMARY KEY CLUSTERED ([LoadStatusTypeId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[EntityProcessStream]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[EntityProcessStream] (
    [EntityProcessStreamId] INT          IDENTITY (1, 1) NOT NULL,
    [EntityId]              INT          NOT NULL,
    [ProcessStream]         VARCHAR (50) NOT NULL,
    [LoadProcess]           VARCHAR (50) NULL,
    [LoadStatusTypeId]      INT          NOT NULL,
    [LoadId]                INT          NOT NULL,
    CONSTRAINT [pkcEntityProcessStreamId] PRIMARY KEY CLUSTERED ([EntityProcessStreamId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[ProcessStream]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[ProcessStream] (
    [ProcessStreamId]    TINYINT        IDENTITY (1, 1) NOT NULL,
    [Code]               CHAR (7)       NOT NULL,
    [Name]               VARCHAR (100)  NULL,
    [Description]        VARCHAR (2000) NULL,
    [ProcessStreamOrder] TINYINT        NOT NULL,
    [DateColumnName]     VARCHAR (25)   NULL
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[Entity]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[Entity] (
    [EntityId]       INT      IDENTITY (1, 1) NOT NULL,
    [ParentEntityId] INT      NULL,
    [SourceFileId]   INT      NOT NULL,
    [EntityTypeId]   SMALLINT NOT NULL,
    [LoadId]         INT      NOT NULL,
    [ApplicationId]  SMALLINT NULL,
    CONSTRAINT [pkcEntityId] PRIMARY KEY CLUSTERED ([EntityId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[SourceFile]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[SourceFile] (
    [SourceFileId]        INT            IDENTITY (1, 1) NOT NULL,
    [ParentSourceFileId]  INT            NULL,
    [SourceFileName]      NVARCHAR (255) NOT NULL,
    [SourceFileTypeId]    INT            NULL,
    [FileExtensionTypeId] SMALLINT       NULL,
    [ApplicationId]       SMALLINT       NULL,
    [OriginalFileId]      INT            NULL,
    [ModifiedDate]        DATETIME       NOT NULL,
    [FileSizeBytes]       BIGINT         NOT NULL,
    [DataSourceType]      VARCHAR (100)  NULL,
    [IsCompressed]        BIT            NULL,
    [Source]              VARCHAR (400)  NULL,
    [FileExtractedDate]   DATETIME       NOT NULL,
    [BlobUploadDate]      DATETIME       NULL,
    [StageDate]           DATETIME       NULL,
    [CleanDate]           DATETIME       NULL,
    [WarehouseDate]       DATETIME       NULL,
    [OLAPDate]            DATETIME       NULL,
    [ArchivePath]         NVARCHAR (400) NULL,
    [ArchiveDate]         DATETIME       NULL,
    [UnloadFile]          BIT            NULL,
    [FileUnloaded]        BIT            NULL,
    [FileUnloadedDate]    DATETIME       NULL,
    [LoadId]              INT            NULL,
    [CreatedBy]           [sysname]      NOT NULL,
    [CreatedDate]         DATETIME       NOT NULL,
    CONSTRAINT [pkcSourceFileId] PRIMARY KEY CLUSTERED ([SourceFileId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[Status]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[Status] (
    [StatusId]    TINYINT        IDENTITY (1, 1) NOT NULL,
    [Code]        CHAR (3)       NOT NULL,
    [Name]        VARCHAR (100)  NULL,
    [Description] VARCHAR (2000) NULL,
    CONSTRAINT [pkcStatusId] PRIMARY KEY CLUSTERED ([StatusId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[Status].[ixuCode]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [ixuCode]
    ON [Control].[Status]([Code] ASC);


GO
PRINT N'Creating [Control].[FileExtensionType]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[FileExtensionType] (
    [FileExtensionTypeId] SMALLINT       IDENTITY (1, 1) NOT NULL,
    [FileTypeGroupId]     INT            NOT NULL,
    [FileExtension]       NVARCHAR (255) NULL,
    [Description]         VARCHAR (100)  NOT NULL,
    [IsCompressed]        BIT            NOT NULL,
    [CreatedBy]           [sysname]      NOT NULL,
    [CreatedDate]         DATETIME       NOT NULL,
    [UpdatedBy]           [sysname]      NOT NULL,
    [UpdatedDate]         DATETIME       NOT NULL,
    [RowVersion]          ROWVERSION     NOT NULL,
    CONSTRAINT [pkcFileExtensionType] PRIMARY KEY CLUSTERED ([FileExtensionTypeId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[FileTypeGroup]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[FileTypeGroup] (
    [FileTypeGroupId] INT            IDENTITY (1, 1) NOT NULL,
    [Name]            VARCHAR (100)  NULL,
    [Code]            VARCHAR (5)    NULL,
    [Description]     VARCHAR (2000) NULL,
    PRIMARY KEY CLUSTERED ([FileTypeGroupId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[SourceFileType]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[SourceFileType] (
    [SourceFileTypeId]   INT            IDENTITY (1, 1) NOT NULL,
    [Code]               VARCHAR (10)   NOT NULL,
    [Description]        VARCHAR (2000) NOT NULL,
    [Name]               VARCHAR (100)  NOT NULL,
    [Direction]          VARCHAR (4)    NOT NULL,
    [32BitStageRequired] SMALLINT       NULL,
    [Collection]         VARCHAR (10)   NULL,
    CONSTRAINT [pkcSourceFileTypeId] PRIMARY KEY CLUSTERED ([SourceFileTypeId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[SourceFileType].[ixuCode]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [ixuCode]
    ON [Control].[SourceFileType]([Code] ASC);


GO
PRINT N'Creating [Control].[EventActionType]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[EventActionType] (
    [EventActionTypeId] INT            IDENTITY (1, 1) NOT NULL,
    [Name]              VARCHAR (100)  NULL,
    [Description]       VARCHAR (1000) NULL,
    [CreatedBy]         [sysname]      NOT NULL,
    [CreatedDate]       DATETIME       NOT NULL,
    [UpdatedBy]         [sysname]      NOT NULL,
    [UpdatedDate]       DATETIME       NOT NULL,
    [RowVersion]        ROWVERSION     NOT NULL,
    CONSTRAINT [pkcEventActionTypeId] PRIMARY KEY CLUSTERED ([EventActionTypeId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[DistributionGroup]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[DistributionGroup] (
    [DistributionGroupId] INT            IDENTITY (1, 1) NOT NULL,
    [Name]                VARCHAR (100)  NOT NULL,
    [Description]         VARCHAR (2000) NULL,
    CONSTRAINT [pkcDistributionGroupId] PRIMARY KEY CLUSTERED ([DistributionGroupId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[DistributionGroupUser]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[DistributionGroupUser] (
    [DistributionGroupUserId] INT IDENTITY (1, 1) NOT NULL,
    [DistributionGroupId]     INT NOT NULL,
    [UserId]                  INT NOT NULL,
    CONSTRAINT [pkcDistributionGroupUserId] PRIMARY KEY CLUSTERED ([DistributionGroupUserId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[Notification]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[Notification] (
    [NotificationId]            INT            IDENTITY (1, 1) NOT NULL,
    [NotificationTypeId]        INT            NULL,
    [ExecutionInstanceGuid]     NVARCHAR (100) NULL,
    [LoadId]                    INT            NULL,
    [ShortDescription]          NVARCHAR (250) NULL,
    [Description]               NVARCHAR (MAX) NULL,
    [ErrorCode]                 NVARCHAR (128) NULL,
    [VerboseDescription]        NVARCHAR (MAX) NULL,
    [NotificationSeverityId]    INT            NULL,
    [NotificationStatusId]      INT            NULL,
    [NotificationProcessTypeId] INT            NULL,
    [LoadStatusType]            VARCHAR (20)   NULL,
    [FeedName]                  NVARCHAR (256) NULL,
    [Stage]                     NVARCHAR (200) NULL,
    [EntityName]                VARCHAR (50)   NULL,
    [SourceFileName]            NVARCHAR (256) NULL,
    [SuccessRows]               INT            NULL,
    [FailedRows]                INT            NULL,
    [BadRows]                   INT            NULL,
    [FeedStartTime]             DATETIME       NULL,
    [TimeOfCompletion]          DATETIME       NULL,
    [CreatedBy]                 [sysname]      NOT NULL,
    [RetryOnFailure]            INT            NULL,
    CONSTRAINT [pkcNotification] PRIMARY KEY CLUSTERED ([NotificationId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[NotificationType]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[NotificationType] (
    [NotificationTypeId] INT            IDENTITY (1, 1) NOT NULL,
    [Name]               VARCHAR (100)  NULL,
    [Description]        VARCHAR (2000) NULL,
    [Recipients]         NVARCHAR (MAX) NULL,
    CONSTRAINT [pkcNotificationTypeId] PRIMARY KEY CLUSTERED ([NotificationTypeId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[NotificationGroups]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[NotificationGroups] (
    [NotificationGroupID] INT            IDENTITY (1, 1) NOT NULL,
    [IsDeleted]           BIT            NULL,
    [GroupName]           NVARCHAR (25)  NOT NULL,
    [GroupDescription]    NVARCHAR (200) NOT NULL,
    CONSTRAINT [pkcNotificationGroupID] PRIMARY KEY CLUSTERED ([NotificationGroupID] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[NotificationGroupMembers]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[NotificationGroupMembers] (
    [NotificationGroupMemberID] INT IDENTITY (1, 1) NOT NULL,
    [IsDeleted]                 BIT NULL,
    [NotificationGroupID]       INT NOT NULL,
    [NotificationSubscriberID]  INT NOT NULL,
    CONSTRAINT [pkcNotificationGroupMemberID] PRIMARY KEY CLUSTERED ([NotificationGroupMemberID] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[NotificationMessageType]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[NotificationMessageType] (
    [NotificationMessageTypeId] INT            IDENTITY (1, 1) NOT NULL,
    [Name]                      VARCHAR (100)  NULL,
    [Description]               VARCHAR (2000) NULL,
    CONSTRAINT [pkcNotificationMessageTypeId] PRIMARY KEY CLUSTERED ([NotificationMessageTypeId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[NotificationEmailMessageFormats]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[NotificationEmailMessageFormats] (
    [NotificationMessageFormatId] INT            IDENTITY (1, 1) NOT NULL,
    [IsDeleted]                   BIT            NULL,
    [NotificationMessageTypeId]   INT            NOT NULL,
    [MessageTypeName]             NVARCHAR (200) NULL,
    [MessageHTML]                 NVARCHAR (MAX) NOT NULL,
    CONSTRAINT [pkcNotificationMessageFormatId] PRIMARY KEY CLUSTERED ([NotificationMessageFormatId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[NotificationSubscribers]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[NotificationSubscribers] (
    [NotificationSubscriberID]  INT            IDENTITY (1, 1) NOT NULL,
    [IsDeleted]                 BIT            NULL,
    [FirstName]                 NVARCHAR (25)  NOT NULL,
    [LastName]                  NVARCHAR (25)  NULL,
    [EmailId]                   NVARCHAR (255) NOT NULL,
    [TextMessageNumber]         VARCHAR (20)   NULL,
    [InstantMessageID]          NVARCHAR (50)  NULL,
    [NotificationMessageTypeId] INT            NULL,
    CONSTRAINT [pkcNotificationSubscribers] PRIMARY KEY CLUSTERED ([NotificationSubscriberID] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[NotificationProcessTypes]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[NotificationProcessTypes] (
    [NotificationProcessTypeId]   INT           IDENTITY (1, 1) NOT NULL,
    [NotificationProcessType]     NVARCHAR (25) NOT NULL,
    [NotificationProcessTypeCode] NVARCHAR (5)  NULL,
    CONSTRAINT [pkcNotificationProcessTypeId] PRIMARY KEY CLUSTERED ([NotificationProcessTypeId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[IncrementalLoad]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[IncrementalLoad] (
    [PackageName]      VARCHAR (100) NOT NULL,
    [LoadDate]         DATETIME      NOT NULL,
    [PreviousLoadDate] DATETIME      NULL,
    [LoadStatus]       BIT           NULL
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[RuleSet]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[RuleSet] (
    [RuleSetId] INT           IDENTITY (1, 1) NOT NULL,
    [Name]      NVARCHAR (20) NOT NULL,
    [Version]   INT           NOT NULL,
    CONSTRAINT [pkcRuleSet] PRIMARY KEY CLUSTERED ([RuleSetId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[DataQualityRule]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[DataQualityRule] (
    [DataQualityRuleId] INT           IDENTITY (1, 1) NOT NULL,
    [Name]              NVARCHAR (25) NOT NULL,
    [Logic]             NVARCHAR (50) NOT NULL,
    [RuleTypeId]        INT           NOT NULL,
    CONSTRAINT [pkcDateQualityRule] PRIMARY KEY CLUSTERED ([DataQualityRuleId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[DataQualityRuleType]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[DataQualityRuleType] (
    [DataQualityRuleTypeId] INT           IDENTITY (1, 1) NOT NULL,
    [Name]                  NVARCHAR (20) NOT NULL,
    CONSTRAINT [pkcDateQualityRuleType] PRIMARY KEY CLUSTERED ([DataQualityRuleTypeId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[CleanseRuleType]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[CleanseRuleType] (
    [CleanseRuleTypeId] INT           IDENTITY (1, 1) NOT NULL,
    [Name]              NVARCHAR (20) NOT NULL,
    CONSTRAINT [pkcCleanseRuleType] PRIMARY KEY CLUSTERED ([CleanseRuleTypeId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[PatternMatchType]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[PatternMatchType] (
    [PatternMatchTypeId] INT           IDENTITY (1, 1) NOT NULL,
    [Name]               NVARCHAR (20) NOT NULL,
    CONSTRAINT [pkcPatternMatchType] PRIMARY KEY CLUSTERED ([PatternMatchTypeId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[CleanseRule]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[CleanseRule] (
    [CleanseRuleId]      INT            IDENTITY (1, 1) NOT NULL,
    [DataQualityRuleId]  INT            NOT NULL,
    [Name]               NVARCHAR (20)  NOT NULL,
    [ObjectId]           INT            NOT NULL,
    [PatternMatchTypeId] INT            NOT NULL,
    [CleanseTypeId]      INT            NOT NULL,
    [Criteria]           NVARCHAR (255) NULL,
    [CleanseTypeValue]   NVARCHAR (255) NULL,
    CONSTRAINT [pkcCleanseRule] PRIMARY KEY CLUSTERED ([CleanseRuleId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[NotificationDistibutionConfig]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[NotificationDistibutionConfig] (
    [NotificationDistibutionConfigId] INT IDENTITY (1, 1) NOT NULL,
    [IsDeleted]                       BIT NULL,
    [NotificationGroupID]             INT NULL,
    [NotificationSubscriberID]        INT NULL,
    [NotificationSeverityId]          INT NOT NULL,
    [IsGroupMessage]                  BIT NOT NULL,
    CONSTRAINT [pkcNotificationDistibutionConfigId] PRIMARY KEY CLUSTERED ([NotificationDistibutionConfigId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[SourceFileTypeIdentification]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[SourceFileTypeIdentification] (
    [SourceFileTypeIdentificationId] SMALLINT      IDENTITY (1, 1) NOT NULL,
    [SourceFileTypeId]               INT           NOT NULL,
    [StringMatch]                    VARCHAR (500) NOT NULL,
    [Operator]                       VARCHAR (50)  NOT NULL,
    [RuleOrder]                      INT           NULL,
    [BitwiseOperator]                VARCHAR (10)  NULL,
    [RowVersion]                     ROWVERSION    NOT NULL,
    CONSTRAINT [pkcSourceFileTypeIdentificationId] PRIMARY KEY CLUSTERED ([SourceFileTypeIdentificationId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[NotificationStatus]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[NotificationStatus] (
    [NotificationStatusId] INT            IDENTITY (1, 1) NOT NULL,
    [Name]                 NVARCHAR (50)  NOT NULL,
    [Description]          NVARCHAR (100) NULL,
    CONSTRAINT [pkcNotificationStatusId] PRIMARY KEY CLUSTERED ([NotificationStatusId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[NotificationSeverity]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[NotificationSeverity] (
    [NotificationSeverityId] INT           IDENTITY (1, 1) NOT NULL,
    [Name]                   NVARCHAR (20) NOT NULL,
    CONSTRAINT [pkcNotificationSeverityId] PRIMARY KEY CLUSTERED ([NotificationSeverityId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[RuleType]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[RuleType] (
    [RuleTypeId] INT           IDENTITY (1, 1) NOT NULL,
    [Name]       NVARCHAR (50) NOT NULL,
    CONSTRAINT [pkcRuleTypeId] PRIMARY KEY CLUSTERED ([RuleTypeId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[RuleSetObject]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[RuleSetObject] (
    [RuleSetObjectId] INT IDENTITY (1, 1) NOT NULL,
    [RuleSetId]       INT NOT NULL,
    [ObjectId]        INT NOT NULL,
    CONSTRAINT [pkcRuleSetObject] PRIMARY KEY CLUSTERED ([RuleSetObjectId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[EntityType]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[EntityType] (
    [EntityTypeId]       SMALLINT       IDENTITY (1, 1) NOT NULL,
    [ParentEntityTypeId] SMALLINT       NULL,
    [Name]               VARCHAR (50)   NOT NULL,
    [Code]               VARCHAR (80)   NOT NULL,
    [Description]        VARCHAR (4000) NULL,
    [Schema]             VARCHAR (80)   NULL,
    [Table]              VARCHAR (80)   NULL,
    [CreatedBy]          [sysname]      NOT NULL,
    [CreatedDate]        DATETIME       NOT NULL,
    [UpdatedBy]          [sysname]      NOT NULL,
    [UpdatedDate]        DATETIME       NOT NULL,
    [RowVersion]         ROWVERSION     NOT NULL,
    CONSTRAINT [pkcEntityType] PRIMARY KEY CLUSTERED ([EntityTypeId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[Users]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[Users] (
    [UserKey]       INT            IDENTITY (100, 1) NOT NULL,
    [UserName]      NVARCHAR (260) NOT NULL,
    [UserNameShort] NVARCHAR (260) NOT NULL,
    CONSTRAINT [pkcUsers] PRIMARY KEY CLUSTERED ([UserKey] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[PartitionLoad]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[PartitionLoad] (
    [PartitionLoadId]   INT          IDENTITY (1, 1) NOT NULL,
    [Source]            VARCHAR (50) NULL,
    [PartitionFunction] VARCHAR (50) NULL,
    [PartitionLoadDate] DATETIME     NULL,
    [MinLoadDate]       INT          NULL,
    [MaxLoadDate]       INT          NULL,
    [PartitionsCreated] INT          NULL,
    [LoadSuccessful]    BIT          NULL,
    [LoadId]            INT          NULL,
    CONSTRAINT [pkcPartitionLoad] PRIMARY KEY CLUSTERED ([PartitionLoadId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[BatchControl]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[BatchControl] (
    [GlobalLoadId]      INT              IDENTITY (1, 1) NOT NULL,
    [GlobalExecutionId] UNIQUEIDENTIFIER NULL,
    [StartTime]         DATETIME         NULL,
    [EndTime]           DATETIME         NULL,
    [SourceFileId]      INT              NULL
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[Application]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Control].[Application] (
    [ApplicationId] SMALLINT       IDENTITY (1, 1) NOT NULL,
    [Name]          VARCHAR (250)  NOT NULL,
    [Code]          VARCHAR (80)   NOT NULL,
    [Description]   VARCHAR (4000) NULL,
    [Priority]      VARCHAR (80)   NULL,
    [UpTimeHours]   INT            NULL,
    [ETLType]       VARCHAR (80)   NULL,
    [WarehouseType] VARCHAR (80)   NULL,
    [CreatedBy]     [sysname]      NOT NULL,
    [CreatedDate]   DATETIME       NOT NULL,
    [UpdatedBy]     [sysname]      NOT NULL,
    [UpdatedDate]   DATETIME       NOT NULL,
    CONSTRAINT [pkcApplication] PRIMARY KEY CLUSTERED ([ApplicationId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Monitor].[DimCounters]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Monitor].[DimCounters] (
    [CounterKey]      INT           NULL,
    [PerfGroup]       VARCHAR (50)  NULL,
    [PerfCounter]     VARCHAR (50)  NULL,
    [FullCounterName] VARCHAR (125) NULL
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Monitor].[DimEnvironment]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Monitor].[DimEnvironment] (
    [EnvironmentKey] INT          NULL,
    [ServerName]     VARCHAR (25) NULL,
    [ServiceName]    VARCHAR (25) NULL
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Monitor].[DimTime]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Monitor].[DimTime] (
    [TimeKey] INT          NULL,
    [DayPart] VARCHAR (25) NULL
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Monitor].[FactCounters]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Monitor].[FactCounters] (
    [DateKey]        INT             NULL,
    [TimeKey]        INT             NULL,
    [EnvironmentKey] INT             NULL,
    [CounterKey]     INT             NULL,
    [CounterValue]   DECIMAL (18, 6) NULL
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [OLAPControl].[MeasureGroupPartition]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [OLAPControl].[MeasureGroupPartition] (
    [MeasureGroupPartitionId] SMALLINT     IDENTITY (1, 1) NOT NULL,
    [MeasureGroupId]          SMALLINT     NOT NULL,
    [PartitionID]             VARCHAR (20) NOT NULL,
    [PartitionDefinitionId]   TINYINT      NOT NULL,
    [FromDateId]              INT          NOT NULL,
    [ToDateId]                INT          NOT NULL,
    [PartitionSliceDimension] VARCHAR (50) NULL,
    [PartitionSliceAttribute] VARCHAR (50) NULL,
    [PartitionSliceKey]       INT          NULL,
    [Active]                  BIT          NOT NULL,
    [Dirty]                   BIT          NOT NULL,
    CONSTRAINT [pkcMeasureGroupPartition] PRIMARY KEY CLUSTERED ([MeasureGroupPartitionId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [OLAPControl].[MeasureGroupDimension]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [OLAPControl].[MeasureGroupDimension] (
    [MeasureGroupDimensionId] SMALLINT IDENTITY (1, 1) NOT NULL,
    [DimensionId]             SMALLINT NOT NULL,
    [MeasureGroupId]          SMALLINT NOT NULL,
    CONSTRAINT [pkcMeasureGroupDimension] PRIMARY KEY CLUSTERED ([MeasureGroupDimensionId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [OLAPControl].[PartitionDefinition]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [OLAPControl].[PartitionDefinition] (
    [PartitionDefinitionId]   SMALLINT     IDENTITY (1, 1) NOT NULL,
    [PartitionDefinitionName] VARCHAR (50) NOT NULL,
    [PartitionPrefix]         VARCHAR (50) NOT NULL,
    CONSTRAINT [pkcPartitionDefinition] PRIMARY KEY CLUSTERED ([PartitionDefinitionId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [OLAPControl].[Database]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [OLAPControl].[Database] (
    [DatabaseId]   TINYINT       IDENTITY (1, 1) NOT NULL,
    [DatabaseName] VARCHAR (128) NOT NULL,
    CONSTRAINT [pkcDatabase] PRIMARY KEY CLUSTERED ([DatabaseId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [OLAPControl].[Cube]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [OLAPControl].[Cube] (
    [CubeId]     TINYINT       IDENTITY (1, 1) NOT NULL,
    [DatabaseId] TINYINT       NOT NULL,
    [CubeName]   VARCHAR (128) NOT NULL,
    CONSTRAINT [pkcCube] PRIMARY KEY CLUSTERED ([CubeId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [OLAPControl].[Dimension]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [OLAPControl].[Dimension] (
    [DimensionId]   SMALLINT      IDENTITY (1, 1) NOT NULL,
    [DimensionName] VARCHAR (128) NOT NULL,
    CONSTRAINT [pkcDimension] PRIMARY KEY CLUSTERED ([DimensionId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [OLAPControl].[MeasureGroup]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [OLAPControl].[MeasureGroup] (
    [MeasureGroupId]   SMALLINT      IDENTITY (1, 1) NOT NULL,
    [CubeId]           TINYINT       NOT NULL,
    [MeasureGroupName] VARCHAR (128) NOT NULL,
    [CreatedBy]        [sysname]     NOT NULL,
    CONSTRAINT [pkcMeasureGroup] PRIMARY KEY CLUSTERED ([MeasureGroupId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Secure].[Configurations]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Secure].[Configurations] (
    [ConfigurationId] INT           IDENTITY (1, 1) NOT NULL,
    [Name]            VARCHAR (100) NOT NULL,
    [Description]     VARCHAR (250) NOT NULL,
    [Value]           VARCHAR (250) NOT NULL,
    [CreatedAt]       DATETIME      NOT NULL
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [SSIS].[projects]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [SSIS].[projects] (
    [project_id]             BIGINT             IDENTITY (1, 1) NOT NULL,
    [folder_id]              BIGINT             NOT NULL,
    [name]                   [sysname]          NOT NULL,
    [description]            NVARCHAR (1024)    NULL,
    [project_format_version] INT                NULL,
    [deployed_by_sid]        VARBINARY (85)     NOT NULL,
    [deployed_by_name]       NVARCHAR (128)     NOT NULL,
    [last_deployed_time]     DATETIMEOFFSET (7) NOT NULL,
    [created_time]           DATETIMEOFFSET (7) NOT NULL,
    [object_version_lsn]     BIGINT             NOT NULL,
    [validation_status]      CHAR (1)           NOT NULL,
    [last_validation_time]   DATETIMEOFFSET (7) NULL
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [SSIS].[event_messages]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [SSIS].[event_messages] (
    [event_message_id]    BIGINT             NOT NULL,
    [operation_id]        BIGINT             NOT NULL,
    [message_time]        DATETIMEOFFSET (7) NOT NULL,
    [message_type]        SMALLINT           NOT NULL,
    [message_source_type] SMALLINT           NULL,
    [message]             NVARCHAR (MAX)     NULL,
    [extended_info_id]    BIGINT             NULL,
    [package_name]        NVARCHAR (260)     NULL,
    [event_name]          NVARCHAR (1024)    NULL,
    [message_source_name] NVARCHAR (4000)    NULL,
    [message_source_id]   NVARCHAR (38)      NULL,
    [subcomponent_name]   NVARCHAR (4000)    NULL,
    [package_path]        NVARCHAR (MAX)     NULL,
    [execution_path]      NVARCHAR (MAX)     NULL,
    [threadID]            INT                NULL,
    [message_code]        INT                NULL
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [SSIS].[environments]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [SSIS].[environments] (
    [environment_id]   BIGINT          IDENTITY (1, 1) NOT NULL,
    [environment_name] [sysname]       NOT NULL,
    [folder_id]        BIGINT          NOT NULL,
    [description]      NVARCHAR (1024) NULL
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [SSIS].[execution_parameter_values]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [SSIS].[execution_parameter_values] (
    [execution_parameter_id] BIGINT         IDENTITY (1, 1) NOT NULL,
    [execution_id]           BIGINT         NOT NULL,
    [object_type]            SMALLINT       NOT NULL,
    [parameter_data_type]    NVARCHAR (128) NOT NULL,
    [parameter_name]         [sysname]      NOT NULL,
    [parameter_value]        SQL_VARIANT    NULL,
    [sensitive]              BIT            NOT NULL,
    [required]               BIT            NOT NULL,
    [value_set]              BIT            NOT NULL,
    [runtime_override]       BIT            NOT NULL
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [SSIS].[packages]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [SSIS].[packages] (
    [package_id]   BIGINT           NULL,
    [project_id]   BIGINT           NOT NULL,
    [name]         NVARCHAR (260)   NOT NULL,
    [package_guid] UNIQUEIDENTIFIER NOT NULL,
    [description]  NVARCHAR (1024)  NULL
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Test].[UnitDataTester]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Test].[UnitDataTester] (
    [ExecutionParameterId] INT             NOT NULL,
    [Name]                 NVARCHAR (2000) NOT NULL,
    [Value]                NVARCHAR (MAX)  NOT NULL,
    [ExecutionLogId]       INT             NOT NULL,
    [CreatedBy]            VARCHAR (25)    NOT NULL,
    [CreatedDate]          DATETIME        NOT NULL,
    [UpdatedBy]            VARCHAR (25)    NOT NULL,
    [UpdatedDate]          DATETIME        NOT NULL,
    [RowVersion]           VARCHAR (25)    NOT NULL
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Test].[ValidationTest]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Test].[ValidationTest] (
    [ValidationTestId]    SMALLINT       NOT NULL,
    [ValidationTypeId]    TINYINT        NOT NULL,
    [ValidationSourceId]  TINYINT        NOT NULL,
    [SourceObject]        VARCHAR (4000) NOT NULL,
    [TargetObject]        VARCHAR (4000) NOT NULL,
    [PackageName]         VARCHAR (200)  NOT NULL,
    [WarningPercent]      DECIMAL (5, 2) NOT NULL,
    [HaltPercent]         DECIMAL (5, 2) NOT NULL,
    [EnableWarning]       BIT            NOT NULL,
    [EnableHalt]          BIT            NOT NULL,
    [ValidationTestName]  VARCHAR (200)  NULL,
    [ValidationTestNotes] VARCHAR (500)  NULL,
    [CreatedBy]           NVARCHAR (128) NOT NULL,
    [CreatedDate]         DATETIME       NOT NULL,
    [UpdatedBy]           NVARCHAR (128) NOT NULL,
    [UpdatedDate]         DATETIME       NOT NULL,
    PRIMARY KEY CLUSTERED ([ValidationTestId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Test].[ValidationTestExecution]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Test].[ValidationTestExecution] (
    [ValidationTestExecutionId] INT           IDENTITY (1, 1) NOT NULL,
    [LoadId]                    INT           NOT NULL,
    [ValidationTestId]          SMALLINT      NOT NULL,
    [TestStatus]                VARCHAR (4)   NOT NULL,
    [SourceResult]              VARCHAR (30)  NOT NULL,
    [TargetResult]              VARCHAR (30)  NOT NULL,
    [ExecutionTime]             DATETIME      NOT NULL,
    [CreatedBy]                 VARCHAR (128) NOT NULL
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Test].[ValidationType]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Test].[ValidationType] (
    [ValidationTypeId]   TINYINT        NOT NULL,
    [ValidationTypeName] VARCHAR (200)  NOT NULL,
    [CreatedBy]          NVARCHAR (128) NOT NULL,
    [CreatedDate]        DATETIME       NOT NULL,
    [UpdatedBy]          NVARCHAR (128) NOT NULL,
    [UpdatedDate]        DATETIME       NOT NULL,
    PRIMARY KEY CLUSTERED ([ValidationTypeId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Test].[ValidationSource]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Test].[ValidationSource] (
    [ValidationSourceId]   TINYINT        NOT NULL,
    [ValidationSourceName] VARCHAR (50)   NOT NULL,
    [CreatedBy]            NVARCHAR (128) NOT NULL,
    [CreatedDate]          DATETIME       NOT NULL,
    [UpdatedBy]            NVARCHAR (128) NOT NULL,
    [UpdatedDate]          DATETIME       NOT NULL,
    PRIMARY KEY CLUSTERED ([ValidationSourceId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating unnamed constraint on [Audit].[SourceFileProcessStream]...';


GO
ALTER TABLE [Audit].[SourceFileProcessStream]
    ADD DEFAULT (suser_sname()) FOR [CreatedBy];


GO
PRINT N'Creating unnamed constraint on [Audit].[SourceFileProcessStream]...';


GO
ALTER TABLE [Audit].[SourceFileProcessStream]
    ADD DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [Audit].[SourceFileProcessStream]...';


GO
ALTER TABLE [Audit].[SourceFileProcessStream]
    ADD DEFAULT (suser_sname()) FOR [UpdatedBy];


GO
PRINT N'Creating unnamed constraint on [Audit].[SourceFileProcessStream]...';


GO
ALTER TABLE [Audit].[SourceFileProcessStream]
    ADD DEFAULT (getdate()) FOR [UpdatedDate];


GO
PRINT N'Creating unnamed constraint on [Audit].[ExecutionLogs]...';


GO
ALTER TABLE [Audit].[ExecutionLogs]
    ADD DEFAULT (suser_sname()) FOR [CreatedBy];


GO
PRINT N'Creating unnamed constraint on [Audit].[ExecutionLogs]...';


GO
ALTER TABLE [Audit].[ExecutionLogs]
    ADD DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [Audit].[ExecutionLogs]...';


GO
ALTER TABLE [Audit].[ExecutionLogs]
    ADD DEFAULT (suser_sname()) FOR [UpdatedBy];


GO
PRINT N'Creating unnamed constraint on [Audit].[ExecutionLogs]...';


GO
ALTER TABLE [Audit].[ExecutionLogs]
    ADD DEFAULT (getdate()) FOR [UpdatedDate];


GO
PRINT N'Creating unnamed constraint on [Audit].[ErrorRows]...';


GO
ALTER TABLE [Audit].[ErrorRows]
    ADD DEFAULT (suser_sname()) FOR [CreatedBy];


GO
PRINT N'Creating unnamed constraint on [Audit].[ErrorRows]...';


GO
ALTER TABLE [Audit].[ErrorRows]
    ADD DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [Audit].[ErrorRows]...';


GO
ALTER TABLE [Audit].[ErrorRows]
    ADD DEFAULT (suser_sname()) FOR [UpdatedBy];


GO
PRINT N'Creating unnamed constraint on [Audit].[ErrorRows]...';


GO
ALTER TABLE [Audit].[ErrorRows]
    ADD DEFAULT (getdate()) FOR [UpdatedDate];


GO
PRINT N'Creating unnamed constraint on [Audit].[RunLogs]...';


GO
ALTER TABLE [Audit].[RunLogs]
    ADD DEFAULT (suser_sname()) FOR [CreatedBy];


GO
PRINT N'Creating unnamed constraint on [Audit].[RunLogs]...';


GO
ALTER TABLE [Audit].[RunLogs]
    ADD DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [Audit].[RunLogs]...';


GO
ALTER TABLE [Audit].[RunLogs]
    ADD DEFAULT (suser_sname()) FOR [UpdatedBy];


GO
PRINT N'Creating unnamed constraint on [Audit].[RunLogs]...';


GO
ALTER TABLE [Audit].[RunLogs]
    ADD DEFAULT (getdate()) FOR [UpdatedDate];


GO
PRINT N'Creating unnamed constraint on [Audit].[RowThroughput]...';


GO
ALTER TABLE [Audit].[RowThroughput]
    ADD DEFAULT (suser_sname()) FOR [CreatedBy];


GO
PRINT N'Creating unnamed constraint on [Audit].[RowThroughput]...';


GO
ALTER TABLE [Audit].[RowThroughput]
    ADD DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [Audit].[RowThroughput]...';


GO
ALTER TABLE [Audit].[RowThroughput]
    ADD DEFAULT (suser_sname()) FOR [UpdatedBy];


GO
PRINT N'Creating unnamed constraint on [Audit].[RowThroughput]...';


GO
ALTER TABLE [Audit].[RowThroughput]
    ADD DEFAULT (getdate()) FOR [UpdatedDate];


GO
PRINT N'Creating unnamed constraint on [Audit].[PackageLoad]...';


GO
ALTER TABLE [Audit].[PackageLoad]
    ADD DEFAULT (suser_sname()) FOR [CreatedBy];


GO
PRINT N'Creating unnamed constraint on [Audit].[PackageLoad]...';


GO
ALTER TABLE [Audit].[PackageLoad]
    ADD DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [Audit].[PackageLoad]...';


GO
ALTER TABLE [Audit].[PackageLoad]
    ADD DEFAULT (suser_sname()) FOR [UpdatedBy];


GO
PRINT N'Creating unnamed constraint on [Audit].[PackageLoad]...';


GO
ALTER TABLE [Audit].[PackageLoad]
    ADD DEFAULT (getdate()) FOR [UpdatedDate];


GO
PRINT N'Creating unnamed constraint on [Audit].[ExecutionPath]...';


GO
ALTER TABLE [Audit].[ExecutionPath]
    ADD DEFAULT (suser_sname()) FOR [CreatedBy];


GO
PRINT N'Creating unnamed constraint on [Audit].[ExecutionPath]...';


GO
ALTER TABLE [Audit].[ExecutionPath]
    ADD DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [Audit].[ExecutionPath]...';


GO
ALTER TABLE [Audit].[ExecutionPath]
    ADD DEFAULT (suser_sname()) FOR [UpdatedBy];


GO
PRINT N'Creating unnamed constraint on [Audit].[ExecutionPath]...';


GO
ALTER TABLE [Audit].[ExecutionPath]
    ADD DEFAULT (getdate()) FOR [UpdatedDate];


GO
PRINT N'Creating unnamed constraint on [Audit].[ExecutionParameters]...';


GO
ALTER TABLE [Audit].[ExecutionParameters]
    ADD DEFAULT (suser_sname()) FOR [CreatedBy];


GO
PRINT N'Creating unnamed constraint on [Audit].[ExecutionParameters]...';


GO
ALTER TABLE [Audit].[ExecutionParameters]
    ADD DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [Audit].[ExecutionParameters]...';


GO
ALTER TABLE [Audit].[ExecutionParameters]
    ADD DEFAULT (suser_sname()) FOR [UpdatedBy];


GO
PRINT N'Creating unnamed constraint on [Audit].[ExecutionParameters]...';


GO
ALTER TABLE [Audit].[ExecutionParameters]
    ADD DEFAULT (getdate()) FOR [UpdatedDate];


GO
PRINT N'Creating unnamed constraint on [Audit].[ErrorLog]...';


GO
ALTER TABLE [Audit].[ErrorLog]
    ADD DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [Audit].[ErrorLog]...';


GO
ALTER TABLE [Audit].[ErrorLog]
    ADD DEFAULT ((-1)) FOR [CreatedBy];


GO
PRINT N'Creating unnamed constraint on [Audit].[ErrorLog]...';


GO
ALTER TABLE [Audit].[ErrorLog]
    ADD DEFAULT (suser_sname()) FOR [UpdatedBy];


GO
PRINT N'Creating unnamed constraint on [Audit].[ErrorLog]...';


GO
ALTER TABLE [Audit].[ErrorLog]
    ADD DEFAULT (getdate()) FOR [UpdatedDate];


GO
PRINT N'Creating unnamed constraint on [Audit].[ErrorInstanceLog]...';


GO
ALTER TABLE [Audit].[ErrorInstanceLog]
    ADD DEFAULT (suser_sname()) FOR [CreatedBy];


GO
PRINT N'Creating unnamed constraint on [Audit].[ErrorInstanceLog]...';


GO
ALTER TABLE [Audit].[ErrorInstanceLog]
    ADD DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [Audit].[ErrorInstanceLog]...';


GO
ALTER TABLE [Audit].[ErrorInstanceLog]
    ADD DEFAULT (suser_sname()) FOR [UpdatedBy];


GO
PRINT N'Creating unnamed constraint on [Audit].[ErrorInstanceLog]...';


GO
ALTER TABLE [Audit].[ErrorInstanceLog]
    ADD DEFAULT (getdate()) FOR [UpdatedDate];


GO
PRINT N'Creating [Control].[DF_SourceFile_PreStageDate]...';


GO
ALTER TABLE [Control].[SourceFile]
    ADD CONSTRAINT [DF_SourceFile_PreStageDate] DEFAULT (getdate()) FOR [FileExtractedDate];


GO
PRINT N'Creating unnamed constraint on [Control].[SourceFile]...';


GO
ALTER TABLE [Control].[SourceFile]
    ADD DEFAULT ((0)) FOR [UnloadFile];


GO
PRINT N'Creating unnamed constraint on [Control].[SourceFile]...';


GO
ALTER TABLE [Control].[SourceFile]
    ADD DEFAULT (suser_sname()) FOR [CreatedBy];


GO
PRINT N'Creating unnamed constraint on [Control].[SourceFile]...';


GO
ALTER TABLE [Control].[SourceFile]
    ADD DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [Control].[FileExtensionType]...';


GO
ALTER TABLE [Control].[FileExtensionType]
    ADD DEFAULT (suser_sname()) FOR [CreatedBy];


GO
PRINT N'Creating unnamed constraint on [Control].[FileExtensionType]...';


GO
ALTER TABLE [Control].[FileExtensionType]
    ADD DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [Control].[FileExtensionType]...';


GO
ALTER TABLE [Control].[FileExtensionType]
    ADD DEFAULT (suser_sname()) FOR [UpdatedBy];


GO
PRINT N'Creating unnamed constraint on [Control].[FileExtensionType]...';


GO
ALTER TABLE [Control].[FileExtensionType]
    ADD DEFAULT (getdate()) FOR [UpdatedDate];


GO
PRINT N'Creating unnamed constraint on [Control].[SourceFileType]...';


GO
ALTER TABLE [Control].[SourceFileType]
    ADD DEFAULT ((0)) FOR [32BitStageRequired];


GO
PRINT N'Creating unnamed constraint on [Control].[EventActionType]...';


GO
ALTER TABLE [Control].[EventActionType]
    ADD DEFAULT (suser_sname()) FOR [CreatedBy];


GO
PRINT N'Creating unnamed constraint on [Control].[EventActionType]...';


GO
ALTER TABLE [Control].[EventActionType]
    ADD DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [Control].[EventActionType]...';


GO
ALTER TABLE [Control].[EventActionType]
    ADD DEFAULT (suser_sname()) FOR [UpdatedBy];


GO
PRINT N'Creating unnamed constraint on [Control].[EventActionType]...';


GO
ALTER TABLE [Control].[EventActionType]
    ADD DEFAULT (getdate()) FOR [UpdatedDate];


GO
PRINT N'Creating unnamed constraint on [Control].[Notification]...';


GO
ALTER TABLE [Control].[Notification]
    ADD DEFAULT (suser_sname()) FOR [CreatedBy];


GO
PRINT N'Creating unnamed constraint on [Control].[EntityType]...';


GO
ALTER TABLE [Control].[EntityType]
    ADD DEFAULT (suser_sname()) FOR [CreatedBy];


GO
PRINT N'Creating unnamed constraint on [Control].[EntityType]...';


GO
ALTER TABLE [Control].[EntityType]
    ADD DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [Control].[EntityType]...';


GO
ALTER TABLE [Control].[EntityType]
    ADD DEFAULT (suser_sname()) FOR [UpdatedBy];


GO
PRINT N'Creating unnamed constraint on [Control].[EntityType]...';


GO
ALTER TABLE [Control].[EntityType]
    ADD DEFAULT (getdate()) FOR [UpdatedDate];


GO
PRINT N'Creating unnamed constraint on [Control].[Application]...';


GO
ALTER TABLE [Control].[Application]
    ADD DEFAULT (suser_sname()) FOR [CreatedBy];


GO
PRINT N'Creating unnamed constraint on [Control].[Application]...';


GO
ALTER TABLE [Control].[Application]
    ADD DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [Control].[Application]...';


GO
ALTER TABLE [Control].[Application]
    ADD DEFAULT (suser_sname()) FOR [UpdatedBy];


GO
PRINT N'Creating unnamed constraint on [Control].[Application]...';


GO
ALTER TABLE [Control].[Application]
    ADD DEFAULT (getdate()) FOR [UpdatedDate];


GO
PRINT N'Creating unnamed constraint on [OLAPControl].[MeasureGroup]...';


GO
ALTER TABLE [OLAPControl].[MeasureGroup]
    ADD DEFAULT (suser_sname()) FOR [CreatedBy];


GO
PRINT N'Creating unnamed constraint on [Test].[ValidationTest]...';


GO
ALTER TABLE [Test].[ValidationTest]
    ADD DEFAULT (suser_sname()) FOR [CreatedBy];


GO
PRINT N'Creating unnamed constraint on [Test].[ValidationTest]...';


GO
ALTER TABLE [Test].[ValidationTest]
    ADD DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [Test].[ValidationTest]...';


GO
ALTER TABLE [Test].[ValidationTest]
    ADD DEFAULT (suser_sname()) FOR [UpdatedBy];


GO
PRINT N'Creating unnamed constraint on [Test].[ValidationTest]...';


GO
ALTER TABLE [Test].[ValidationTest]
    ADD DEFAULT (getdate()) FOR [UpdatedDate];


GO
PRINT N'Creating unnamed constraint on [Test].[ValidationType]...';


GO
ALTER TABLE [Test].[ValidationType]
    ADD DEFAULT (suser_sname()) FOR [CreatedBy];


GO
PRINT N'Creating unnamed constraint on [Test].[ValidationType]...';


GO
ALTER TABLE [Test].[ValidationType]
    ADD DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [Test].[ValidationType]...';


GO
ALTER TABLE [Test].[ValidationType]
    ADD DEFAULT (suser_sname()) FOR [UpdatedBy];


GO
PRINT N'Creating unnamed constraint on [Test].[ValidationType]...';


GO
ALTER TABLE [Test].[ValidationType]
    ADD DEFAULT (getdate()) FOR [UpdatedDate];


GO
PRINT N'Creating unnamed constraint on [Test].[ValidationSource]...';


GO
ALTER TABLE [Test].[ValidationSource]
    ADD DEFAULT (suser_sname()) FOR [CreatedBy];


GO
PRINT N'Creating unnamed constraint on [Test].[ValidationSource]...';


GO
ALTER TABLE [Test].[ValidationSource]
    ADD DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [Test].[ValidationSource]...';


GO
ALTER TABLE [Test].[ValidationSource]
    ADD DEFAULT (suser_sname()) FOR [UpdatedBy];


GO
PRINT N'Creating unnamed constraint on [Test].[ValidationSource]...';


GO
ALTER TABLE [Test].[ValidationSource]
    ADD DEFAULT (getdate()) FOR [UpdatedDate];


GO
PRINT N'Creating [Audit].[seqErrorLogId]...';


GO
CREATE SEQUENCE [Audit].[seqErrorLogId]
    AS BIGINT
    START WITH 1
    INCREMENT BY 1
    MINVALUE 0;


GO
PRINT N'Creating unnamed constraint on [Audit].[ErrorLog]...';


GO
ALTER TABLE [Audit].[ErrorLog]
    ADD DEFAULT (NEXT VALUE FOR [Audit].[seqErrorLogId]) FOR [ErrorLogId];


GO
PRINT N'Creating [Audit].[fkErrorLog_Entity]...';


GO
ALTER TABLE [Audit].[ErrorLog] WITH NOCHECK
    ADD CONSTRAINT [fkErrorLog_Entity] FOREIGN KEY ([EntityId]) REFERENCES [Control].[Entity] ([EntityId]);


GO
PRINT N'Creating [Audit].[fkErrorLog_Status]...';


GO
ALTER TABLE [Audit].[ErrorLog] WITH NOCHECK
    ADD CONSTRAINT [fkErrorLog_Status] FOREIGN KEY ([StatusId]) REFERENCES [Control].[Status] ([StatusId]);


GO
PRINT N'Creating [Audit].[fkErrorInstanceLog_ErrorLog]...';


GO
ALTER TABLE [Audit].[ErrorInstanceLog] WITH NOCHECK
    ADD CONSTRAINT [fkErrorInstanceLog_ErrorLog] FOREIGN KEY ([ErrorLogId]) REFERENCES [Audit].[ErrorLog] ([ErrorLogId]);


GO
PRINT N'Creating [Control].[fkEntity_EntityType]...';


GO
ALTER TABLE [Control].[Entity] WITH NOCHECK
    ADD CONSTRAINT [fkEntity_EntityType] FOREIGN KEY ([EntityTypeId]) REFERENCES [Control].[EntityType] ([EntityTypeId]);


GO
PRINT N'Creating [Control].[fkEntity_SourceFile]...';


GO
ALTER TABLE [Control].[Entity] WITH NOCHECK
    ADD CONSTRAINT [fkEntity_SourceFile] FOREIGN KEY ([SourceFileId]) REFERENCES [Control].[SourceFile] ([SourceFileId]);


GO
PRINT N'Creating [Control].[fkEntity_Application]...';


GO
ALTER TABLE [Control].[Entity] WITH NOCHECK
    ADD CONSTRAINT [fkEntity_Application] FOREIGN KEY ([ApplicationId]) REFERENCES [Control].[Application] ([ApplicationId]);


GO
PRINT N'Creating [Control].[fkSourceFile_ExtensionType]...';


GO
ALTER TABLE [Control].[SourceFile] WITH NOCHECK
    ADD CONSTRAINT [fkSourceFile_ExtensionType] FOREIGN KEY ([FileExtensionTypeId]) REFERENCES [Control].[FileExtensionType] ([FileExtensionTypeId]);


GO
PRINT N'Creating [Control].[fkSourceFile_SourceFile]...';


GO
ALTER TABLE [Control].[SourceFile] WITH NOCHECK
    ADD CONSTRAINT [fkSourceFile_SourceFile] FOREIGN KEY ([ParentSourceFileId]) REFERENCES [Control].[SourceFile] ([SourceFileId]);


GO
PRINT N'Creating [Control].[fkSourceFile_SourceFileType]...';


GO
ALTER TABLE [Control].[SourceFile] WITH NOCHECK
    ADD CONSTRAINT [fkSourceFile_SourceFileType] FOREIGN KEY ([SourceFileTypeId]) REFERENCES [Control].[SourceFileType] ([SourceFileTypeId]);


GO
PRINT N'Creating [Control].[fkSourceFile_Application]...';


GO
ALTER TABLE [Control].[SourceFile] WITH NOCHECK
    ADD CONSTRAINT [fkSourceFile_Application] FOREIGN KEY ([ApplicationId]) REFERENCES [Control].[Application] ([ApplicationId]);


GO
PRINT N'Creating [Control].[fkFileExtensionType_FileTypeGroup]...';


GO
ALTER TABLE [Control].[FileExtensionType] WITH NOCHECK
    ADD CONSTRAINT [fkFileExtensionType_FileTypeGroup] FOREIGN KEY ([FileTypeGroupId]) REFERENCES [Control].[FileTypeGroup] ([FileTypeGroupId]);


GO
PRINT N'Creating [Control].[fkDistributionGroup]...';


GO
ALTER TABLE [Control].[DistributionGroupUser] WITH NOCHECK
    ADD CONSTRAINT [fkDistributionGroup] FOREIGN KEY ([DistributionGroupId]) REFERENCES [Control].[DistributionGroup] ([DistributionGroupId]);


GO
PRINT N'Creating [Control].[fkNotification_NotificationProcessTypeId]...';


GO
ALTER TABLE [Control].[Notification] WITH NOCHECK
    ADD CONSTRAINT [fkNotification_NotificationProcessTypeId] FOREIGN KEY ([NotificationProcessTypeId]) REFERENCES [Control].[NotificationProcessTypes] ([NotificationProcessTypeId]);


GO
PRINT N'Creating [Control].[fkNotification_NotificationSeverity]...';


GO
ALTER TABLE [Control].[Notification] WITH NOCHECK
    ADD CONSTRAINT [fkNotification_NotificationSeverity] FOREIGN KEY ([NotificationSeverityId]) REFERENCES [Control].[NotificationSeverity] ([NotificationSeverityId]);


GO
PRINT N'Creating [Control].[fkNotification_NotificationStatus]...';


GO
ALTER TABLE [Control].[Notification] WITH NOCHECK
    ADD CONSTRAINT [fkNotification_NotificationStatus] FOREIGN KEY ([NotificationStatusId]) REFERENCES [Control].[NotificationStatus] ([NotificationStatusId]);


GO
PRINT N'Creating [Control].[fkNotification_NotificationType]...';


GO
ALTER TABLE [Control].[Notification] WITH NOCHECK
    ADD CONSTRAINT [fkNotification_NotificationType] FOREIGN KEY ([NotificationTypeId]) REFERENCES [Control].[NotificationType] ([NotificationTypeId]);


GO
PRINT N'Creating [Control].[fkNotificationGroupMembers_NotificationGroupID]...';


GO
ALTER TABLE [Control].[NotificationGroupMembers] WITH NOCHECK
    ADD CONSTRAINT [fkNotificationGroupMembers_NotificationGroupID] FOREIGN KEY ([NotificationGroupID]) REFERENCES [Control].[NotificationGroups] ([NotificationGroupID]);


GO
PRINT N'Creating [Control].[fkNotificationGroupMembers_NotificationSubscriberID]...';


GO
ALTER TABLE [Control].[NotificationGroupMembers] WITH NOCHECK
    ADD CONSTRAINT [fkNotificationGroupMembers_NotificationSubscriberID] FOREIGN KEY ([NotificationSubscriberID]) REFERENCES [Control].[NotificationSubscribers] ([NotificationSubscriberID]);


GO
PRINT N'Creating [Control].[fkNotificationEmailMessageFormats_NotificationMessageTypeId]...';


GO
ALTER TABLE [Control].[NotificationEmailMessageFormats] WITH NOCHECK
    ADD CONSTRAINT [fkNotificationEmailMessageFormats_NotificationMessageTypeId] FOREIGN KEY ([NotificationMessageTypeId]) REFERENCES [Control].[NotificationMessageType] ([NotificationMessageTypeId]);


GO
PRINT N'Creating [Control].[fkDataQualityRule_RuleType]...';


GO
ALTER TABLE [Control].[DataQualityRule] WITH NOCHECK
    ADD CONSTRAINT [fkDataQualityRule_RuleType] FOREIGN KEY ([RuleTypeId]) REFERENCES [Control].[RuleType] ([RuleTypeId]);


GO
PRINT N'Creating [Control].[fkNotificationDistibutionConfig_NotificationGroupID]...';


GO
ALTER TABLE [Control].[NotificationDistibutionConfig] WITH NOCHECK
    ADD CONSTRAINT [fkNotificationDistibutionConfig_NotificationGroupID] FOREIGN KEY ([NotificationGroupID]) REFERENCES [Control].[NotificationGroups] ([NotificationGroupID]);


GO
PRINT N'Creating [Control].[fkNotificationDistibutionConfig_NotificationSeverityID]...';


GO
ALTER TABLE [Control].[NotificationDistibutionConfig] WITH NOCHECK
    ADD CONSTRAINT [fkNotificationDistibutionConfig_NotificationSeverityID] FOREIGN KEY ([NotificationSeverityId]) REFERENCES [Control].[NotificationSeverity] ([NotificationSeverityId]);


GO
PRINT N'Creating [Control].[fkNotificationDistibutionConfig_NotificationSubscriberID]...';


GO
ALTER TABLE [Control].[NotificationDistibutionConfig] WITH NOCHECK
    ADD CONSTRAINT [fkNotificationDistibutionConfig_NotificationSubscriberID] FOREIGN KEY ([NotificationSubscriberID]) REFERENCES [Control].[NotificationSubscribers] ([NotificationSubscriberID]);


GO
PRINT N'Creating [Control].[fkRuleSetObject_RuleSet]...';


GO
ALTER TABLE [Control].[RuleSetObject] WITH NOCHECK
    ADD CONSTRAINT [fkRuleSetObject_RuleSet] FOREIGN KEY ([RuleSetId]) REFERENCES [Control].[RuleSet] ([RuleSetId]);


GO
PRINT N'Creating [OLAPControl].[fkMeasureGroupPartition_MeasureGroup]...';


GO
ALTER TABLE [OLAPControl].[MeasureGroupPartition] WITH NOCHECK
    ADD CONSTRAINT [fkMeasureGroupPartition_MeasureGroup] FOREIGN KEY ([MeasureGroupId]) REFERENCES [OLAPControl].[MeasureGroup] ([MeasureGroupId]);


GO
PRINT N'Creating [OLAPControl].[fkMeasureGroupDimensionDimension]...';


GO
ALTER TABLE [OLAPControl].[MeasureGroupDimension] WITH NOCHECK
    ADD CONSTRAINT [fkMeasureGroupDimensionDimension] FOREIGN KEY ([DimensionId]) REFERENCES [OLAPControl].[Dimension] ([DimensionId]);


GO
PRINT N'Creating [OLAPControl].[fkMeasureGroupDimensionMeasureGroup]...';


GO
ALTER TABLE [OLAPControl].[MeasureGroupDimension] WITH NOCHECK
    ADD CONSTRAINT [fkMeasureGroupDimensionMeasureGroup] FOREIGN KEY ([MeasureGroupId]) REFERENCES [OLAPControl].[MeasureGroup] ([MeasureGroupId]);


GO
PRINT N'Creating [OLAPControl].[fkCubeDatabase]...';


GO
ALTER TABLE [OLAPControl].[Cube] WITH NOCHECK
    ADD CONSTRAINT [fkCubeDatabase] FOREIGN KEY ([DatabaseId]) REFERENCES [OLAPControl].[Database] ([DatabaseId]);


GO
PRINT N'Creating [OLAPControl].[fkMeasureGroupCube]...';


GO
ALTER TABLE [OLAPControl].[MeasureGroup] WITH NOCHECK
    ADD CONSTRAINT [fkMeasureGroupCube] FOREIGN KEY ([CubeId]) REFERENCES [OLAPControl].[Cube] ([CubeId]);


GO
PRINT N'Creating [dbo].[GenerateVarchar]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO

-- =============================================
-- Author:		Adatis - Simon Whiteley
-- Create date: 2014-03-14
-- Description:	Function to generate a varchar of a random length using dummy characters
-- =============================================
CREATE FUNCTION [dbo].[GenerateVarchar]
(
	@Length INT, @Rand1 decimal(10,8)
)
RETURNS Varchar(MAX)
AS
BEGIN
	-- get a random varchar ascii char 32 to 128
	DECLARE @TextValue VARCHAR(MAX),
			@DesiredLength int = @Length,
			@RandomLength INT,
			@CurrentLength INT,
			@Char int = 1
	SELECT @TextValue = ''
	SET @RandomLength = CAST(@Rand1 * @DesiredLength as INT)
	SET	@CurrentLength = @RandomLength
	WHILE @CurrentLength <> 0
		BEGIN
			SELECT @TextValue = @TextValue + CHAR(@Char+64)
			SET @CurrentLength = @CurrentLength - 1
			SET @Char = case when @Char > 25 then 1 else @Char + 1 end
		END

	RETURN @TextValue
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Config].[ObtainVariable]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE FUNCTION [Config].[ObtainVariable]
( 
 -- Add the parameters for the function here
 @VariableName Varchar(50)
)
RETURNS TABLE 
AS
RETURN 
(
 -- Add the SELECT statement with parameter references here
 SELECT [VariableId], 
    [Name], 
    [Value],
    [Type] 
FROM [Config].[Variable] 
WHERE [Name] = @VariableName
)
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[SplitCSV]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE FUNCTION [dbo].SplitCSV(@input AS Varchar(4000) )
RETURNS
      @Result TABLE(Value BIGINT)
AS
BEGIN
      DECLARE @str VARCHAR(20)
      DECLARE @ind Int
      IF(@input is not null)
      BEGIN
            SET @ind = CharIndex(',',@input)
            WHILE @ind > 0
            BEGIN
                  SET @str = SUBSTRING(@input,1,@ind-1)
                  SET @input = SUBSTRING(@input,@ind+1,LEN(@input)-@ind)
                  INSERT INTO @Result values (@str)
                  SET @ind = CharIndex(',',@input)
            END
            SET @str = @input
            INSERT INTO @Result values (@str)
      END
      RETURN
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Audit].[vPackageLoadThroughput]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE VIEW [Audit].[vPackageLoadThroughput]
AS 
SELECT
	 PL.LoadId
	,PL.ParentLoadId
	,PL.PackageName
	,PL.LoadStatusId
	,PL.StartTime
	,PL.EndTime
	,PL.Duration
	,RT.ExtractedRows
	,RT.InsertedRows
	,RT.UpdatedRows
	,RT.DeletedRows
	,RT.ArchivedRows
	,RT.FailedRows
	,RT.BadRows
	,RT.EntityId
	,RT.ProcessStream
	,PL.ExecutionId
	,PL.EnvironmentId
	,PL.ProjectId
	,PL.ExecutionGUID
	,PL.PackageVersionGUID
	,PL.PackageGUID
FROM
	Audit.PackageLoad PL
	LEFT OUTER JOIN Audit.RowThroughput RT
	  ON PL.LoadId = RT.LoadId;
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Audit].[vAuditLog]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO

CREATE VIEW [Audit].[vAuditLog]
AS
SELECT [event_message_id]
      ,[operation_id]
      ,[message_time]
      ,[message_type]
      ,[message_source_type]
      ,[message]
      ,[extended_info_id]
      ,[package_name]
      ,[event_name]
      ,[message_source_name]
      ,[message_source_id]
      ,[subcomponent_name]
      ,[package_path]
      ,[execution_path]
      ,[threadID]
      ,[message_code]
  FROM [SSIS].[event_messages]
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Audit].[vEnvironment]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO

CREATE VIEW [Audit].[vEnvironment]
AS 
SELECT  
	 [environment_id]
	,[environment_name]
	,[folder_id]
	,[description]
FROM 
	[SSIS].environments;
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Audit].[vExecutionParameterValues]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO

CREATE VIEW [Audit].[vExecutionParameterValues]

AS

SELECT 
	execution_parameter_id
	,execution_id
	,object_type
	,parameter_data_type
	,parameter_name
	,parameter_value
	,sensitive
	,required
	,value_set
	,runtime_override

FROM [SSIS].execution_parameter_values
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Audit].[vPackage]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO

CREATE VIEW [Audit].[vPackage]
AS 	
SELECT 
    MAX([package_id]) AS [package_id]
   ,[project_id]
   ,[name]
   ,[package_guid]
   ,[description]
FROM 
    [SSIS].[packages]
GROUP BY 
    [name]
   ,[package_guid]
   ,[description]
   ,[project_id];
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Audit].[vProject]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO

CREATE VIEW [Audit].[vProject]
AS
SELECT 
    project_id
   ,folder_id
   ,name
   ,description
   ,project_format_version
   ,deployed_by_sid
   ,deployed_by_name
   ,last_deployed_time
   ,created_time
   ,object_version_lsn
   ,validation_status
   ,last_validation_time
FROM     
   [SSIS].projects;
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[vLoadProcessStream]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE VIEW [Control].[vLoadProcessStream]
	AS 

	WITH Loads
	as
	(
	SELECT  LoadId GlobalLoadId,
			LoadId, 
			ParentLoadId
		FROM [Audit].[PackageLoad]
		WHERE PackageName = 'GlobalProcess.ProcessFeeds.dtsx'
	UNION ALL 
	SELECT  L.GlobalLoadId,
			PL.LoadId, 
			PL.ParentLoadId
		FROM [Audit].[PackageLoad] PL inner join
			Loads L on PL.ParentLoadId = L.LoadId
	)


	SELECT S.GlobalLoadId,
		S.[EntityId],
		EPS.[EntityProcessStreamId],
		EPS.[LoadProcess],
		EPS.[ProcessStream],
		S.[Name],
		S.[Schema],
		S.[Table]

	FROM
	(
		SELECT L.GlobalLoadId,
			E.[EntityId],
			MAX(EPS.[EntityProcessStreamId]) EntityProcessStreamId,
			ET.[Name],
			ET.[Schema],
			ET.[Table]
	
		FROM Loads L inner join
			[Control].[EntityProcessStream] EPS on L.LoadId = EPS.LoadId inner join
			[Control].[Entity] E on EPS.EntityId = E.EntityId inner join
			[Control].[EntityType] ET on E.EntityTypeId = ET.EntityTypeId

		GROUP BY L.GlobalLoadId,
			E.[EntityId],
			ET.[Name],
			ET.[Schema],
			ET.[Table]
	) S inner join
		Control.EntityProcessStream EPS on S.EntityProcessStreamId = EPS.EntityProcessStreamId
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Audit].[InsertSourceFileProcessStream]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO


CREATE PROCEDURE [Audit].[InsertSourceFileProcessStream]
			@SourceFileId INT
		   ,@LoadProcess VARCHAR(100)
           ,@ProcessStream VARCHAR(100)
           ,@LoadId int
		   ,@LoadStatusType VARCHAR(100)
AS

DECLARE @LoadStatusId int
DECLARE @ProcessStreamId int
DECLARE @LoadProcessId int

SELECT @LoadStatusId = LoadStatusTypeId FROM Control.LoadStatusType WHERE ShortName = @LoadStatusType

IF EXISTS (SELECT 1 FROM [Audit].[SourceFileProcessStream] WHERE LoadId = @LoadId AND SourceFileId = @SourceFileId)
BEGIN 
UPDATE [Audit].[SourceFileProcessStream]
   SET 
      [LoadStatusTypeId] = @LoadStatusId
 WHERE LoadId = @LoadId AND SourceFileId = @SourceFileId
END 
ELSE 
BEGIN  
INSERT INTO [Audit].[SourceFileProcessStream]
           ([SourceFileId]
           ,[ProcessStream]
		   ,LoadProcess 
           ,LoadStatusTypeId
           ,[LoadId])
     VALUES
           (@SourceFileId
           ,@ProcessStream
		   ,@LoadProcess
           ,@LoadStatusId
           ,@LoadId
         )
END


IF @ProcessStream = 'SRC2STG' AND  @LoadStatusType = 'Success'
BEGIN
	UPDATE Control.SourceFile
	SET	StageDate = GETDATE()
	WHERE SourceFileId = @SourceFileId
END

IF @ProcessStream = 'SCB2CLN'  AND  @LoadStatusType = 'Success'
BEGIN
	UPDATE Control.SourceFile
	SET	CleanDate = GETDATE()
	WHERE SourceFileId = @SourceFileId
END

IF @ProcessStream = 'LDS2CDW'  AND  @LoadStatusType = 'Success'
BEGIN
	UPDATE Control.SourceFile
	SET	WarehouseDate = GETDATE()
	WHERE SourceFileId = @SourceFileId
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Audit].[UpdateSourceFileProcessStream]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO


CREATE PROCEDURE [Audit].[UpdateSourceFileProcessStream]
			@SourceFileId INT
		   ,@LoadProcess VARCHAR(100)
           ,@ProcessStream VARCHAR(100)
           ,@LoadId int
		   ,@LoadStatusType VARCHAR(100)
AS

DECLARE @LoadStatusId int
DECLARE @ProcessStreamId int
DECLARE @LoadProcessId int

SELECT @LoadStatusId = LoadStatusTypeId FROM Control.LoadStatusType WHERE ShortName = @LoadStatusType

IF EXISTS (SELECT 1 FROM [Audit].[SourceFileProcessStream] WHERE LoadId = @LoadId AND SourceFileId = @SourceFileId)
BEGIN 
UPDATE [Audit].[SourceFileProcessStream]
   SET 
      [LoadStatusTypeId] = @LoadStatusId
 WHERE LoadId = @LoadId AND SourceFileId = @SourceFileId
END 
ELSE 
BEGIN  
INSERT INTO [Audit].[SourceFileProcessStream]
           ([SourceFileId]
           ,[ProcessStream]
		   ,LoadProcess 
           ,LoadStatusTypeId
           ,[LoadId])
     VALUES
           (@SourceFileId
           ,@ProcessStream
		   ,@LoadProcess
           ,@LoadStatusId
           ,@LoadId
         )
END


IF @ProcessStream = 'SRC2STG' AND  @LoadStatusType = 'Success'
BEGIN
	UPDATE Control.SourceFile
	SET	StageDate = GETDATE()
	WHERE SourceFileId = @SourceFileId
END

IF @ProcessStream = 'SCR2CLN'  AND  @LoadStatusType = 'Success'
BEGIN
	UPDATE Control.SourceFile
	SET	CleanDate = GETDATE()
	WHERE SourceFileId = @SourceFileId
END



IF @ProcessStream = 'LDS2CDW'  AND  @LoadStatusType = 'Success'
BEGIN
	UPDATE Control.SourceFile
	SET	WarehouseDate = GETDATE()
	WHERE SourceFileId = @SourceFileId
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Audit].[ObtainLatestLoadDate]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [Audit].[ObtainLatestLoadDate] 

AS

-- =============================================
-- Author:		Adatis Consulting
-- Create date: Unknown
-- =============================================

	--Note this will need altering if the S2W spans multiple days, e.g. over midnight
	SELECT	CAST(MAX(StartTime) AS DATE) AS StartTime 
	FROM	Audit.PackageLoad
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Audit].[InsertRowThroughput]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [Audit].[InsertRowThroughput]
	@Taskname Varchar(100),
	@ExecutionId int,
	@ProcessStream Varchar(50),
	@ExtractedRows int = 0,
	@InsertedRows int = 0,
	@UpdatedRows int = 0,
	@DeletedRows int = 0,
	@FailedRows int = 0,
	@ArchivedRows int = 0,
	@BadRows int = 0,
	@EntityId int = -1,
	@LoadProcess Varchar(50) = '',

	@LoadId int
AS

DECLARE @ApplicationId SMALLINT = 0

SELECT TOP 1 @ApplicationId = ApplicationId FROM Control.Entity WHERE EntityId = @EntityId

--If @ExecutionId = 0
Begin
	INSERT INTO [Audit].[RowThroughput]
			   ([ExecutionId]
			   ,[ProcessStream]
			   ,[ExtractedRows]
			   ,[InsertedRows]
			   ,[UpdatedRows]
			   ,[DeletedRows]
			   ,[FailedRows]
			   ,[ArchivedRows]
			   ,[BadRows]
			   ,[LoadId]
			   ,[TaskName]
			   ,[EntityId]
			   ,[LoadProcess]
			   ,[ApplicationId]
			   )
		 VALUES
			   (@ExecutionId
			   ,@ProcessStream
			   ,@ExtractedRows
			   ,@InsertedRows
			   ,@UpdatedRows
			   ,@DeletedRows
			   ,@FailedRows
			   ,@ArchivedRows
			   ,@BadRows
			   ,@LoadId
			   ,@Taskname
			   ,@EntityId
			   ,@LoadProcess
			   ,@ApplicationId
			   )
end




--If @ExecutionId <> 0
--Begin

--	Declare @ExecutableId int

--	SELECT DISTINCT    
--           @ExecutableId = execl.[executable_id]
--FROM       ([SSISDB].[internal].[executions] (NOLOCK) execs 
--		INNER JOIN [SSISDB].[internal].[executable_statistics] (NOLOCK) stat 
--           ON execs.[execution_id] = stat.[execution_id]) 
--		   INNER JOIN [SSISDB].[internal].[executables] (NOLOCK) execl
--           ON stat.[executable_id] = execl.[executable_id] 


--	INSERT INTO [Audit].[RowThroughput]
--			   ([ExecutionId]
--			   ,[ExecutableId]
--			   ,[EnvironmentId]
--			   ,[ProcessStream]
--			   ,[ExtractedRows]
--			   ,[InsertedRows]
--			   ,[UpdatedRows]
--			   ,[DeletedRows]
--			   ,[FailedRows]
--			   ,[ArchivedRows]
--			   ,[BadRows]
--			   ,[LoadId]
--			   ,[TaskName]
--			   ,[EntityId]
--			   ,[LoadProcess]
--			    )
--		 VALUES
--			   (@ExecutionId
--			   ,@ExecutableId
--			   ,-1
--			   ,@ProcessStream
--			   ,@ExtractedRows
--			   ,@InsertedRows
--			   ,@UpdatedRows
--			   ,@DeletedRows
--			   ,@FailedRows
--			   ,@ArchivedRows
--			   ,@BadRows
--			   ,@LoadId
--			   ,@Taskname
--			   ,@EntityId
--			   ,@LoadProcess
--			    )
--End
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Audit].[ObtainErrorLogId]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO

-- =============================================
-- Author:		Adatis
-- Create date: 18/03/2013
-- Description:	Gets the next Avaialble Sequence for the Error Log Id
-- Required By Aptitude Bulk logging
-- =============================================
CREATE PROCEDURE Audit.ObtainErrorLogId
	@NextErrorLogId		BIGINT OUTPUT
AS
BEGIN
	SET NOCOUNT ON;

    SELECT @NextErrorLogId = NEXT VALUE FOR [Audit].[seqErrorLogId];
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Azure].[GetLoadStartFlag]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
-- =============================================
-- Author:		Adatis Consulting - SAW
-- Create date: 2016-05-03
-- Description:	Checks the source file control table and determines whether load is required
-- =============================================
CREATE PROCEDURE Azure.GetLoadStartFlag (@Trigger bit OUTPUT)
AS
BEGIN
	SET NOCOUNT ON;

    SET @Trigger = 1

	RETURN;
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Config].[AddVariable]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO

CREATE PROCEDURE Config.AddVariable
( 
 -- Add the parameters for the function here
 @VariableValue Varchar(50)
)
AS
BEGIN
	IF EXISTS(SELECT 1 FROM [Config].[Variable] WHERE [Name] = 'SSISEnvironment' AND [Value] = @VariableValue)  
	BEGIN 
		RETURN 
	END 
	ELSE
	BEGIN
		DECLARE @Max_id INT
		SELECT @Max_id = ISNULL(MAX(VariableId),0) FROM [Config].[Variable]

		INSERT INTO [Config].[Variable]( [VariableId] ,[Name] ,[Value] ,[Type] )
		VALUES ( @Max_id + 1 ,'SSISEnvironment' ,@VariableValue ,'Environment Variable' )
	END
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[UpdateNotificationProcessStatus]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [Control].[UpdateNotificationProcessStatus] (@NotificationId int, @NotificationStatusId int)
AS
BEGIN

	-- IF FAILED, RetryOnFailure VALUE NEED TO BE INCREMENTED TILL 3
	-- NO CHANGE FOR STATUS OTHER THAN FAILURE

	IF @NotificationStatusId = 40 --FAILURE
	BEGIN
		UPDATE Control.Notification
		SET	NotificationStatusId = @NotificationStatusId,
			RetryOnFailure = RetryOnFailure + 1
		WHERE NotificationId = @NotificationId
	END
	ELSE
	BEGIN
		UPDATE Control.Notification
		SET NotificationStatusId = @NotificationStatusId
		WHERE NotificationId = @NotificationId
	END
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[NotificationSave]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROC [Control].[NotificationSave]
              @PackageLoadID             INT,
              @FeedName                  NVARCHAR(256) ,
              @Stage                     NVARCHAR(200) ,
              @LoadStatusType			 VARCHAR(20),
              @ErrorCode                 NVARCHAR(128),
              @ErrorDescription			 NVARCHAR(MAX) , 
              @systemExecutionInstanceGuid      NVARCHAR(100) ,            
              @SystemUserName            NVARCHAR(128),
			  @FeedStartTime			 DATETIME,
              @NotificationProcessTypeId INT
AS 
BEGIN 
       DECLARE @ShortDescription NVARCHAR(250) 
       DECLARE @Description NVARCHAR(MAX) 
       DECLARE @VerboseDescription NVARCHAR(MAX) 
       DECLARE @NotificationTypeID INT
       DECLARE @NotificationSeverityId INT
       DECLARE @NotificationStatusId INT    
       DECLARE @TimeOfCompletion DATETIME 
       DECLARE @RetryOnFailure INT       
       DECLARE @EntityName NVARCHAR(50)

       DECLARE @ProcessTypeID INT

       SET @NotificationTypeID = 10                    -- EMAIL
       SELECT @NotificationStatusId      = NotificationStatusId FROM [Control].[NotificationStatus] WHERE Name = 'New'                       -- NEW NOTIFICATION
       
       IF @LoadStatusType = 0 -- IN ERROR CASE
       BEGIN
			  SET @LoadStatusType ='Failed'
              SET @ShortDescription = 'Feed ' + @FeedName + ' uploaded by ' + @SystemUserName + ' Failed on '  + @Stage 
              SELECT @NotificationSeverityId = NotificationSeverityId FROM Control.NotificationSeverity where Name = 'High Priority' 
              SET @Description = NULL
									
									 IF (@ErrorDescription = NULL) OR (LEN(RTRIM(LTRIM(@ErrorDescription))) = 0) 	--IF ERROR DESCRIPTION HAS NULL VALUE THAN SET THE CUSTOM MESSAGE 
										BEGIN
											SET @VerboseDescription =' Package Failed due to more than one reason '      
										END
									 ELSE								--WHATEVER THE FAILURE REASON IS SHOW THE ERROR DETAILS
										BEGIN
											SET @VerboseDescription = @ErrorDescription      
										END			   
       END
       ELSE
       BEGIN
			  SET @LoadStatusType ='Succeeded'
              SET @ShortDescription='Feed ' + @FeedName + ' uploaded by ' + @SystemUserName + ' succeeded on '  + @Stage
              SELECT @NotificationSeverityId = NotificationSeverityId FROM Control.NotificationSeverity where Name = 'Normal Priority' 
              SET @Description = NULL
              SET @VerboseDescription = ' ' + @ErrorDescription + ' '
       END    

       IF @NotificationProcessTypeId = 1        -- PROCESS TYPE
       BEGIN
              SET @ProcessTypeID = 1
       END 
       ELSE IF @NotificationProcessTypeId = 2
       BEGIN
              SET @ProcessTypeID = 2
       END 

       DECLARE @ExistCheck INT
       SET @ExistCheck = 0


       SELECT @ExistCheck = COUNT([ExecutionInstanceGuid]) FROM [Control].[Notification] WHERE  [LoadId] = @PackageLoadID

       IF @ExistCheck = 0
       BEGIN
              --print 'insert option'
              INSERT INTO [Control].Notification
              (
                     [NotificationTypeId]
                     ,[ExecutionInstanceGuid]
                     ,[LoadId]
                     ,[ShortDescription]
                     ,[Description]
					 ,[ErrorCode]
                     ,[VerboseDescription]
                     ,[NotificationSeverityId]
                     ,[NotificationStatusId]
                     ,NotificationProcessTypeId
					,[LoadStatusType]
                     ,[FeedName]
                     ,[Stage]
                     ,[EntityName]
                     ,[SourceFileName]
                     ,[SuccessRows]
                     ,[FailedRows]
                     ,[BadRows]
					 ,[FeedStartTime]
                     ,[TimeOfCompletion]
                     ,[RetryOnFailure]
              )
              SELECT 
                     10,
                     @systemExecutionInstanceGuid,
                     @PackageLoadID,
                     @ShortDescription,
                     NULL,
				  @ErrorCode ,
                     @VerboseDescription,
                     @NotificationSeverityId,
                     @NotificationStatusId,
                     @ProcessTypeID,
					 @LoadStatusType,
                     @FeedName,                 
                     @Stage,
                     '',
                     '',
                     0, 
                     0, 
                     0,
					 @FeedStartTime,
                     GETDATE(),
                     0     
       END
       ELSE 
       BEGIN
             -- 'UPDATE THE VERBOSE DESCRIPTION BY CONCATINATING THE OTHER ERROR IF MORE THAN 1 ERROR OCCURRED'
              UPDATE NOTIFICATIONS 
                     SET NOTIFICATIONS.VerboseDescription =  NOTIFICATIONS.VerboseDescription + @VerboseDescription--,
                   FROM [Control].[Notification] AS [NOTIFICATIONS]
              WHERE NOTIFICATIONS.LoadId = @PackageLoadID
       END
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[ObtainUnprocessedSourceFiles]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
-- =============================================
-- Author:		Adatis
-- Create date: 18/03/2013
-- Description:	GEts all Files that are ready to be Processed
-- =============================================
CREATE PROCEDURE [Control].[ObtainUnprocessedSourceFiles]

AS
BEGIN
	SET NOCOUNT ON;
  SELECT DISTINCT 
	[Collection] AS Code, 
	[32BitStageRequired]
  FROM 
	[Control].[SourceFile] SF
		INNER JOIN 
	Control.SourceFileType SFT ON SFT.SourceFileTypeId = SF.SourceFileTypeId  
  WHERE 
	(StageDate IS NULL  OR  CleanDate IS NULL)
		AND 
	IsCompressed = 0
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[InsertEntityProcessStream]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [Control].InsertEntityProcessStream
			@EntityId INT
		   ,@LoadProcess VARCHAR(100)
           ,@ProcessStream VARCHAR(100)
           ,@LoadId int
		   ,@LoadStatusType VARCHAR(100)
AS

DECLARE @LoadStatusId int
DECLARE @ProcessStreamId int
DECLARE @LoadProcessId int

SELECT @LoadStatusId = LoadStatusTypeId FROM LoadStatusType WHERE ShortName = @LoadStatusType


INSERT INTO [Control].[EntityProcessStream]
           ([EntityId]
           ,[ProcessStream]
		   ,LoadProcess 
           ,LoadStatusTypeId
           ,[LoadId])
     VALUES
           (@EntityId
           ,@ProcessStream
		    ,@LoadProcess
           ,@LoadStatusId
           ,@LoadId
         )
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[VerifyPackageLoadStatus]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
-- =============================================
-- Author:		Adatis Consulting
-- Create date: 06/11/2006
-- Description: Verifies that the status of the LoadProcess within the PackageLoad table
--				The Status of Load Processes in which the package is included (except for this load process),
--				or Load Processes in which dependent packages (as defined by PackageDependent) are 
--				included is checked. If any of these Load Processes are status 'In Progress' 
--				then the execution will be declined, as data conflicts may otherwise result from these 
--				Load Processes running.
--				allows the load execution to proceed. 
--				@EnvShortName			-	The ShortName for the environment
--				@ParentLoadID			- optional - the LoadID of the parent package.
--										- required if @LoadProcessShortName is null
--				@LoadProcessShortName	-	The load process that this Package is being requested to run within
--				@PackageID				-	The Package unique identifier
--				@LoadProcessResult output:	
--					1	Decine as LoadProcess In Progress for one or more of this package's Load Processes
--					2	Decline as LoadProcess In Progress for one or more of dependent package's Load Process
--					3	Accept
-- =============================================
CREATE PROCEDURE [Control].[VerifyPackageLoadStatus] 
	@ParentLoadID int = 0, 
	@LoadProcessShortName varchar(20) = NULL, 
	@PackageID uniqueidentifier, 
	@LoadProcessResult int output
AS

DECLARE @StatusCount int, @SystemID int, @EnvironmentID int, @LoadProcessID int

--either @ParentLoadID or @LoadProcessShortName must contain real values for the Load Process to be ascertained
--IF @ParentLoadID = 0 AND @LoadProcessShortName IS NULL
--BEGIN
--	RAISERROR ('Invalid @ParentLoadID, @LoadProcessShortName values in call to uspVerifyPackageLoadStatus', 16, 1) WITH SETERROR;
--	RETURN;
--END


--SELECT @SystemID = SystemID
--FROM vPackageSystem
--WHERE PackageID = @PackageID
--AND EnvironmentID = @EnvironmentID

----catch bad @PackageID values
--IF @SystemID IS NULL
--BEGIN
--	RAISERROR ('Invalid @PackageID, @EnvShortName values in call to uspVerifyPackageLoadStatus', 16, 1) WITH SETERROR;
--	RETURN;
--END

--SELECT @LoadProcessID = dbo.ufnGetLoadProcessID(@PackageID, @EnvironmentID, @ParentLoadID, @LoadProcessShortName)

--catch bad @LoadProcessShortName values
--IF @LoadProcessID IS NULL 
--BEGIN
--	RAISERROR ('Invalid @LoadProcessID value returned from ufnGetLoadProcessID() in call to uspVerifyPackageLoadStatus', 16, 1) WITH SETERROR
--	RETURN;
--END

-- check the Latest status of Load Processes that this package is included within, 
-- except for the intended Load Process
--SELECT @StatusCount = Count(*)
--FROM vPackageLoadProcess plp
--INNER JOIN vLoadProcessPackageStatusLatest lppsl
--	ON plp.LoadProcessID = lppsl.LoadProcessID
--	AND plp.EnvironmentID = lppsl.EnvironmentID
--WHERE plp.PackageID = @PackageID
--AND lppsl.SystemID = @SystemID
--AND lppsl.EnvironmentID = @EnvironmentID
----not this load process!
--AND lppsl.LoadProcessID <> @LoadProcessID
--AND lppsl.LoadStatusTypeShortName = 'In Prog'

-- Decline as LoadProcess In Progress for one or more of this package's Load Processes
--IF @StatusCount > 0
--BEGIN
--	SET @LoadProcessResult = 1
--	RETURN
--END

---- check the Latest status of Load Processes that dependent packages are included within,
---- irrespective of whether they are executing within this Load Process.
--SELECT @StatusCount = Count(*)
--FROM ufnGetPackageDependents(@PackageID, @EnvironmentID)  pd
--INNER JOIN vLoadProcessPackageStatusLatest lppsl
--	ON pd.LoadProcessID = lppsl.LoadProcessID
--	AND pd.EnvironmentID = lppsl.EnvironmentID
--WHERE lppsl.LoadStatusTypeShortName = 'In Prog'

-- Decline as LoadProcess In Progress for one or more of dependent package's Load Process
--IF @StatusCount > 0
--BEGIN
--	SET @LoadProcessResult = 2
--	RETURN
--END

-- Accept
SET @LoadProcessResult = 3
RETURN
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[UpdateSourceFile]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
-- =============================================
-- Author:		Adatis
-- Create date: 18/03/2013
-- Description:	Updates Source File milestone dates
-- =============================================
CREATE PROCEDURE [Control].[UpdateSourceFile]
	@SourceFileId	INT, 
	@Stream			VARCHAR(10)
AS

SET NOCOUNT ON;

IF @Stream = 'FLS2EXT'
BEGIN
	UPDATE Control.SourceFile
	SET	BlobUploadDate = GETDATE() 
	WHERE SourceFileId = @SourceFileId
END

IF @Stream = 'EXT2STG'
BEGIN
	UPDATE Control.SourceFile
	SET	StageDate = GETDATE()
	WHERE SourceFileId = @SourceFileId
END

IF @Stream = 'STG2CLN'
BEGIN
	UPDATE Control.SourceFile
	SET	CleanDate = GETDATE()
	WHERE SourceFileId = @SourceFileId
END




IF @Stream = 'CLN2WAR'
BEGIN
	UPDATE Control.SourceFile
	SET	WarehouseDate = GETDATE()
	WHERE SourceFileId = @SourceFileId
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[UpdatePartitionLog]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [Control].[UpdatePartitionLog]
	@intPartnerMaxLoadDate int,
	@intPartitionLoadId int,
	@bitSuccessLoad bit,
	@LoadID int
AS

Update [Control].[PartitionLoad]
	Set
		[MaxLoadDate] = @intPartnerMaxLoadDate
		,[LoadSuccessful] = @bitSuccessLoad
		,[LoadId] = @LoadID
Where
	PartitionLoadId = @intPartitionLoadId
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[UpdatePackageLoad]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
-- =============================================
-- Author:		Adatis Consulting
-- Create date:		Unknown
-- Description:		Used in conjunction with the SISS End Load Task 
-- ==========================================================================================
CREATE PROCEDURE [Control].[UpdatePackageLoad]
	@LoadId int, @LoadStatusShortName varchar(10), @EndTime datetime, @TotalRows int = 0, @BadRows int = 0
AS

DECLARE @LoadStatusId int
SELECT @LoadStatusId = LoadStatusTypeId FROM Control.LoadStatusType WHERE ShortName = @LoadStatusShortName

--catch bad @LoadStatusShortName values
IF @LoadStatusID IS NULL 
	Begin
		RaisError ('Invalid @LoadStatusShortName value in call to Update Package Load', 16, 1) WITH SETERROR
		Return;
	End
ELSE
	UPDATE Audit.PackageLoad 
		SET LoadStatusId = @LoadStatusId,
		EndTime = @EndTime,
		Duration = DateDiff(Second, StartTime, @EndTime)
	WHERE LoadId = @LoadId

Return;
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[ObtainNewLoadId]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
-- =============================================
-- Author:		Adatis Consulting
-- Create date:		06/11/2006
-- Description:		Inserts record into PackageLoad table with status 'In Progress' to 
--					signify the start of a new package load.
--					@EnvShortName			- the environment ShortName
--					@ParentLoadId			- optional - the LoadId of the parent package.
--											- required if @LoadProcessShortName is null
--					@ExecutionId			- the unique identifier for the package execution
--					@PackageId				- the unique identifier for the package
--					@LoadProcessShortName	- optional - the short name for the load process.
--											- required if @ParentLoadId = 0
--					@StartTime				- start time for the new load
--					@LoadId					- Output for resultant LoadId for new load
-- ==========================================================================================

CREATE PROCEDURE [Control].[ObtainNewLoadId]
	@ParentLoadId int = 0, 
	@ExecutionId uniqueidentifier, 
	--@EnvironmentId int,
	@PackageId uniqueidentifier,
	@VersionId uniqueidentifier = null,
	@PackageName NVarchar(100) = null,
	@LoadProcessShortName varchar(20) = NULL,
	@StartTime datetime, 
	@SSISCatalogExecutionId int, 
	@LoadId int Output
AS

DECLARE @SystemId int, @LoadStatusId int, 
		@IsLoadProcessPackage bit, @LoadProcessId int, @SSISCatPackageId int, @SSISCatProjectId int

--either @ParentLoadId or @LoadProcessShortName must contain real values for the Load Process to be ascertained
IF @ParentLoadId = 0 AND @LoadProcessShortName IS NULL
BEGIN
	RAISERROR ('Invalid @ParentLoadId, @LoadProcessShortName values in call to Obtain New LoadId', 16, 1) WITH SETERROR;
	RETURN;
END

SET @LoadId = 0
SET @LoadProcessId = 0

SELECT @LoadStatusId = LoadStatusTypeId FROM LoadStatusType WHERE ShortName = 'InProgress'

IF @LoadStatusId IS NULL 
BEGIN
	RAISERROR ('Invalid @LoadStatusId value in call to Obtain New LoadId', 16, 1) WITH SETERROR
	RETURN;
END


--catch bad @PackageId values
IF @PackageId IS NULL
BEGIN
	RAISERROR ('Invalid @PackageId values value in call to Obtain New LoadId', 16, 1) WITH SETERROR;
	RETURN
END

DECLARE @EnvironmentId int = -1

--SELECT @IsLoadProcessPackage = IsLoadProcessPackage,
--@LoadProcessId = dbo.ufnGetLoadProcessId(@PackageId, @EnvironmentId, @ParentLoadId, @LoadProcessShortName)
--FROM Package 
--WHERE PackageId = @PackageId
--AND EnvironmentId = @EnvironmentId

SET @ParentLoadId = nullif(@ParentLoadId, 0)

--IF @LoadProcessId IS NULL 
--BEGIN
--	RAISERROR ('Invalid @LoadProcessId value returned from ufnGetLoadProcessId() in call to uspNewLoad', 16, 1) WITH SETERROR
--	RETURN;
--END

-- Insert new load
INSERT INTO Audit.PackageLoad
	(EnvironmentId, ParentLoadId, PackageGUID, ExecutionGUID, ProjectId,  PackageName, LoadStatusId, StartTime, ExecutionId, LoadProcess, PackageVersionGUID )
VALUES 
	(@EnvironmentId, @ParentLoadId, @PackageId, @ExecutionId , @SSISCatProjectId, @PackageName, @LoadStatusId,  @StartTime, @SSISCatalogExecutionId, @LoadProcessShortName, @VersionId )
-- get the inserted Identity
SET @LoadId = @@Identity
RETURN;
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[ObtainEntityIdForFile]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
-- =============================================
-- Author:		Adatis
-- Create date: 06/06/2013
-- Description:	Returns an EntityId for the passed in FileId & EntityName. If no rows match the input parameters then the procedure will return 0.
-- =============================================
CREATE PROCEDURE [Control].[ObtainEntityIdForFile]
	@SourceFileId		INT, 
	@EntityTypeName		VARCHAR(50)
AS

SET NOCOUNT ON;

SELECT TOP 1 
	EntityId
FROM
(
	SELECT 
		EntityId
	FROM 
		Control.Entity E
		INNER JOIN Control.EntityType ET 
		  ON E.EntityTypeId = ET.EntityTypeId 
	WHERE 
		SourceFileId = @SourceFileId 
		AND ET.Name = @EntityTypeName
	UNION 
		SELECT 
			0 AS EntityId
) E
ORDER BY
	EntityId DESC;
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[ObtainEntityId]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
-- =============================================
-- Author:		Adatis
-- Create date: 18/03/2013
-- Description:	Gets Entity Id 
-- =============================================
CREATE PROCEDURE [Control].[ObtainEntityId]
	@SourceFileId INT, 
	@EntityName VARCHAR(50),
	@LoadId int = -1, 
	@ParentEntityId INT = NULL   
AS
BEGIN
	SET NOCOUNT ON;

DECLARE @EntityId INT 
DECLARE @EntityTypeId INT 
DECLARE @ApplicationId SMALLINT

SELECT @EntityId = E.EntityId, @ApplicationId = sf.ApplicationId
  FROM [Control].[SourceFile] SF 
  INNER JOIN [Control].[Entity] E ON SF.SourceFileId = E.SourceFileId 
  INNER JOIN [Control].EntityType ET ON E.EntityTypeId = ET.EntityTypeId 
  WHERE ET.Name = @EntityName AND E.SourceFileId = @SourceFileId 

IF COALESCE(@EntityId,0) = 0 
BEGIN 

SELECT @ApplicationId = sf.ApplicationId
  FROM [Control].[SourceFile] SF 
      --added this new line
  WHERE sourcefileid = @SourceFileId

SELECT @EntityTypeId = EntityTypeId 
FROM 
[Control].EntityType
WHERE Name = @EntityName

INSERT INTO [Control].[Entity]
           (
           [SourceFileId]
           ,[EntityTypeId]
		   ,[ApplicationId]
		   ,LoadId
		   ,ParentEntityId)
     VALUES
           (
           @SourceFileId
           ,@EntityTypeId
		   ,@ApplicationId
		   ,@LoadId
		   ,@ParentEntityId)
		SELECT @@Identity AS EntityId
END 

ELSE Select @EntityID AS EntityId 
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[AttachSourceDatabase]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO

CREATE PROCEDURE [Control].[AttachSourceDatabase]
	@NewDatabaseName NVARCHAR(128),
	@DataFile NVARCHAR(1000), 
	@LogFile NVARCHAR(1000) = NULL, 
	@QueueTaskId int
AS
BEGIN
	
	SET NOCOUNT ON;

	DECLARE	@return_value int
	DECLARE @AttachStatement NVARCHAR(MAX)
    
	SET @AttachStatement = N'CREATE DATABASE SourceData_'+ @NewDatabaseName+' ON (FILENAME = ''' + @DataFile + ''')' 

	IF @LogFile IS NOT NULL 
	BEGIN 
		SET @AttachStatement = @AttachStatement + ',(FILENAME = ''' + @LogFile + ''')' 
	END 

	SET @AttachStatement = @AttachStatement + 'FOR ATTACH;'

	CREATE TABLE #ErrFile (ExecError INT, ErrorMessage NVARCHAR(4000))
	DECLARE @ExecError INT
	DECLARE @ExecErrorMessage VARCHAR(4000)

		SET @AttachStatement =  @AttachStatement + 'INSERT #ErrFile VALUES(@@ERROR, ERROR_MESSAGE())'
		EXEC (@AttachStatement)
	    SELECT 
			@ExecError = ExecError,  
			@ExecErrorMessage = ErrorMessage 
		FROM 
			#ErrFile
		IF @ExecError <> 0 
		RAISERROR (@ExecErrorMessage, 16,1,4,@ExecError)

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[CompleteIncrementalLoad]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
-- =============================================
-- Author:		Adatis
-- Create date: 24/04/2014
-- Description:	Upon completion of a load this logs the time that the next load should start from.
-- =============================================
CREATE PROCEDURE [Control].[CompleteIncrementalLoad]
	@PackageName varchar(100), 
	@LoadStartDate Datetime,
	@LoadId int = -1

AS
BEGIN
	SET NOCOUNT ON;

UPDATE Control.IncrementalLoad
SET 
	 PreviousLoadDate = LoadDate
	,LoadDate = @LoadStartDate
WHERE PackageName = @PackageName

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[RollbackIncrementalLoad]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
-- =============================================
-- Author:		Adatis
-- Create date: 09/06/2014
-- Description:	Sets the package load date for an incremental Load to the previous sucessfull run date in the event of a failiure.
-- =============================================
CREATE PROCEDURE [Control].[RollbackIncrementalLoad]
	@PackageName varchar(100)

AS
BEGIN
	SET NOCOUNT ON;

SET @PackageName = REPLACE(REPLACE(@PackageName, 'Clean ', ''), 'Stage ', '')

UPDATE Control.IncrementalLoad 
SET LoadDate = PreviousLoadDate
WHERE PackageName like '%' + @PackageName

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[StartIncrementalLoad]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
-- =============================================
-- Author:		Adatis
-- Create date: 24/04/2014
-- Description:	Returns the start time for an incremental load. If the load has not been run before and no date is passed it will return
--				all records from the table.
-- =============================================
CREATE PROCEDURE [Control].[StartIncrementalLoad]
	@PackageName varchar(100), 
	@LoadStartDate Datetime = null,
	@LoadId int = -1

AS
BEGIN
	SET NOCOUNT ON;

--If no date has been passed then default to 1900-01-01.
IF @LoadStartDate IS NULL
	SET @LoadStartDate = '1900-01-01'

IF (SELECT COUNT(*) FROM Control.IncrementalLoad WHERE PackageName = @PackageName) = 0
	INSERT INTO Control.IncrementalLoad(PackageName, LoadDate, PreviousLoadDate, LoadStatus) VALUES(@PackageName, @LoadStartDate, @LoadStartDate, 1);

--If the Load Status flag has a value of 0 the data has not arrived in Clean_History. As such we want to set the LoadDate Value to PreviousLoadDate value and run again.
IF (SELECT COUNT(*) FROM Control.IncrementalLoad WHERE PackageName = @PackageName AND LoadStatus = 0) > 0
	UPDATE Control.IncrementalLoad SET LoadDate = PreviousLoadDate WHERE PackageName = @PackageName

--Set Load Status to 0 For the load
UPDATE Control.IncrementalLoad SET LoadStatus = 0 WHERE PackageName = @PackageName

--Return The Load Date for the current Load
SELECT LoadDate FROM Control.IncrementalLoad 
WHERE PackageName = @PackageName

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[GetActiveNotificationsToProcess]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [Control].[GetActiveNotificationsToProcess]
AS
BEGIN
SELECT
		[CT].[NotificationId],
		[CT].[NotificationTypeId],
		[CT].[LoadStatusType],
		[CT].[NotificationProcessTypeId],
		[CT].[ShortDescription],
		[CT].[ErrorCode],
		[CT].[VerboseDescription],
		[CT].[NotificationSeverityId],
		[CT].[NotificationStatusId],
		[CT].[FeedName],
		[CT].[Stage],
		[CT].[FeedStartTime],
		[CT].[TimeOfCompletion] [FeedEndTime],
		[CT].[CreatedBy] [FeedLoadInitiatedBy],
		[CT].[RetryOnFailure]
		FROM [Control].[Notification] [CT]
WHERE 
	[CT].[NotificationStatusId] = 10 
	OR ([CT].[NotificationStatusId] = 40 AND [CT].[RetryOnFailure] < 3)

	ORDER BY [CT].LoadId ASC, [CT].[NotificationId] 
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[GetEmailAddressForNotificationSeverity]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [Control].[GetEmailAddressForNotificationSeverity] (@NotificationSeverityId int, @NotificationMessageTypeId INT)
AS
BEGIN
	DECLARE @EmailAddresses nvarchar(max)

	SELECT
		@EmailAddresses = COALESCE(@EmailAddresses + '; ', '') + [SUBQUERY].[EmailId]
	FROM --SELECT * FROM 
	(SELECT
		[USERS].NotificationSubscriberID,
		[USERS].[IsDeleted],
		[USERS].[FirstName],
		[USERS].[LastName],
		[USERS].[EmailId],
		[USERS].[TextMessageNumber],
		[USERS].[InstantMessageID]
	FROM [Control].[NotificationDistibutionConfig] DSBN_CONFIG
	INNER JOIN [Control].[NotificationGroups] GROUPS
		ON DSBN_CONFIG.NotificationGroupID = GROUPS.NotificationGroupID
	INNER JOIN [Control].NotificationGroupMembers GROUP_MEMBERS
		ON GROUPS.NotificationGroupID = GROUP_MEMBERS.NotificationGroupID
	INNER JOIN [Control].NotificationSubscribers USERS
		ON GROUP_MEMBERS.NotificationSubscriberID = USERS.NotificationSubscriberID
	WHERE DSBN_CONFIG.IsGroupMessage = 1
	AND DSBN_CONFIG.IsDeleted = 0
	AND GROUPS.IsDeleted = 0
	AND GROUP_MEMBERS.IsDeleted = 0
	AND USERS.IsDeleted = 0
	AND DSBN_CONFIG.NotificationSeverityId = @NotificationSeverityId 
	AND USERS.NotificationMessageTypeId = @NotificationMessageTypeId
	UNION
	SELECT
		[USERS].NotificationSubscriberID,
		[USERS].[IsDeleted],
		[USERS].[FirstName],
		[USERS].[LastName],
		[USERS].[EmailId],
		[USERS].[TextMessageNumber],
		[USERS].[InstantMessageID]
	FROM [Control].[NotificationDistibutionConfig] DSBN_CONFIG
	INNER JOIN [Control].NotificationSubscribers USERS
		ON DSBN_CONFIG.NotificationSubscriberID = USERS.NotificationSubscriberID
	WHERE DSBN_CONFIG.IsGroupMessage = 0
	AND DSBN_CONFIG.IsDeleted = 0
	AND USERS.IsDeleted = 0
	AND DSBN_CONFIG.NotificationSeverityId = @NotificationSeverityId
	AND USERS.NotificationMessageTypeId = @NotificationMessageTypeId) SUBQUERY

	SELECT
		@EmailAddresses EMailAddresses
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[GetNotificationMessageTemplate]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [Control].[GetNotificationMessageTemplate] (@NotificationMessageTypeId int)
AS
BEGIN
	SELECT
		MessageHTML
	FROM [Control].[NotificationEmailMessageFormats]
	WHERE NotificationMessageTypeId = @NotificationMessageTypeId AND IsDeleted = 0
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[InsertBatchControl]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
-- =============================================
-- Author:		Adatis Consulting - SAW
-- Create date:		26/04/2016
-- Description:		Inserts record into Batch Control table for logging source files included in a load
--					@GlobalLoadId			- the LoadId of the package that initated the whole load.
--					@ExecutionId			- the unique identifier for the package execution
--					@PackageId				- the unique identifier for the package
--					@StartTime				- start time for the new batch
-- ==========================================================================================

CREATE PROCEDURE [Control].[InsertBatchControl]
	@GlobalLoadId int = 0, 
	@ExecutionId uniqueidentifier, 
	@StartTime datetime,
	@SourceFileId int
AS

--either @ParentLoadId or @LoadProcessShortName must contain real values for the Load Process to be ascertained
IF @GlobalLoadId = 0
BEGIN
	RAISERROR ('Invalid @ParentLoadId value in call to Batch Control Table', 16, 1) WITH SETERROR;
	RETURN;
END

-- Insert new load
INSERT INTO [Control].[BatchControl]
	( GlobalLoadId, GlobalExecutionId, StartTime, SourceFileId )
VALUES 
	( @GlobalLoadId, @ExecutionId, @StartTime, @SourceFileId );
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[WaitGlobalProcessPackageCompletion]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO


CREATE PROCEDURE [Control].[WaitGlobalProcessPackageCompletion]
	@LoadProcessShortName varchar(20),
	@StartTime datetime

AS


DECLARE @StatusId int 
SET @StatusId = 0

WAITFOR DELAY '00:00:05'


 SELECT DISTINCT TOP 1 
		@StatusId = LoadStatusId 
	FROM 
		[Audit].[PackageLoad]  
			WHERE  StartTime >=  @StartTime AND LoadStatusId <> 2 AND LoadProcess <> @LoadProcessShortName 
 ORDER BY 
	LoadStatusId ASC 

IF @StatusId = 3  
	BEGIN  

		RAISERROR ('Packages Failed - Warehouse Will not Process - See Package Process Report', 16, 1) WITH SETERROR  
	
	END

ELSE IF COALESCE(@StatusId,0) = 0  
	BEGIN  
		SELECT 
			 COUNT(LoadId) AS PackageCount 
		FROM 
			[Audit].[PackageLoad]  
		WHERE  
			StartTime >  COALESCE((SELECT MAX(EndTime) AS ProcessLast 
									FROM [Audit].[PackageLoad]  
									WHERE  PackageName = 'C2W.Process.dtsx' AND LoadStatusId <> 3)  ,@StartTime) 
			AND ENDTIME IS NOT NULL 
			AND LoadStatusId = 2
		

	END 	
ELSE
BEGIN 
  SELECT -1 AS PackageCount 
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[ObtainSourceFileId]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
-- =============================================
-- Author:		Adatis
-- Create date: 27/09/2016
-- Description:	Gets SourceFileId by DistributionCode 
-- =============================================
CREATE PROCEDURE [Control].[ObtainSourceFileId] 
	@DistributionCode VARCHAR(255),
	@SourceFileId INT OUT
AS
BEGIN
	SET NOCOUNT ON;
	SET @SourceFileId = (SELECT TOP (1) SourceFileId
						 FROM [Control].[SourceFile] AS sf
						   LEFT JOIN [Control].[SourceFileType] AS sft
						   ON sf.[SourceFileTypeId] = sft.SourceFileTypeId
						 WHERE sft.Code = 'DX'
						 AND sf.SourceFileName = @DistributionCode) 

	SET NOCOUNT OFF;
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[InsertSourceFile]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [Control].[InsertSourceFile]
				 @FileName VARCHAR(250),
				 @LoadId int
AS


DECLARE @ApplicationId int


SELECT @ApplicationId = [ApplicationId] FROM [Control].[Application]  WHERE Code = 'DEOS'


IF NOT EXISTS (SELECT (1) FROM [Control].[SourceFile] WHERE [SourceFileName]= @FileName)
BEGIN
    INSERT INTO [Control].[SourceFile] (
										[SourceFileName],
										[SourceFileTypeId],
										[ModifiedDate],
										[FileSizeBytes],
										[IsCompressed],
										[Source],
										[FileExtractedDate],
										[UnloadFile],
										[LoadId],
										[ApplicationId] )
       SELECT    @FileName
				,1
				,SYSDATETIME()
				,0 
				,0 
				,'DX' 
				,SYSDATETIME()
				,0 
				, @LoadId
				, @ApplicationId


END;
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[ObtainDistributionsReadyToProcess]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO

CREATE PROCEDURE [Control].[ObtainDistributionsReadyToProcess]
	@pSourceFileName nvarchar(255) OUT
AS
BEGIN
/*
 *	Gets the last inserted connections string for BLOB storage
 */
	SET NOCOUNT ON;
	SET @pSourceFileName = (SELECT TOP(1) [SourceFileName] 
							    FROM [Control].[SourceFile] 
							   WHERE [BlobUploadDate] IS NULL
								 AND [StageDate] IS NULL
								 AND [CleanDate] IS NULL
								 AND [WarehouseDate] IS NULL
								 AND NOT EXISTS (SELECT * 
												   FROM [Control].[SourceFile] 
												  WHERE [BlobUploadDate] IS NOT NULL
													 OR [StageDate] IS NOT NULL
													 OR [CleanDate] IS NOT NULL
													 OR [WarehouseDate] IS NOT NULL)
							ORDER BY [SourceFileName]);

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[ObtainBlobContainers]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO

CREATE PROCEDURE [Control].[ObtainBlobContainers]  
AS
BEGIN
/*
 *	Gets the last inserted connections string for BLOB storage
 */
	SET NOCOUNT ON;
	SELECT [Code] FROM [Control].[EntityType] WHERE [Schema]='DATAXCHANGE';
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[ObtainEntityUploadDetails]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [Control].[ObtainEntityUploadDetails]
	@SourceSchema varchar(80),
	@SourceTable varchar(80),
	@Container varchar(50) OUTPUT
AS
BEGIN
	SET @Container =
						(
							SELECT	[Code]
							FROM	[Control].[EntityType]
							WHERE	[Schema] = @SourceSchema
								AND [Table] = @SourceTable
						)

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Control].[VerifyPackageExecution]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
-- =============================================
-- Author:		Adatis Consulting
-- Create date: 07/07/2016
-- Description: Verifies whether a load process has been previously
--				run for a given entity so a package can skip the
--				unecessary repeat of processed packages.
-- =============================================
CREATE PROCEDURE [Control].[VerifyPackageExecution] (@EntityId int,
													@ProcessStream varchar(25),
													@VerifyResult int OUTPUT)
AS
BEGIN

	SET  @EntityId = 198
	SET  @ProcessStream = 'TRN2WAR'


	/* Additional logic to override if the whole file needs reprocessing */
	/*

	DECLARE	@SourceFileId int,
		@ProcessDateColumn varchar(25)


	SELECT @ProcessDateColumn = DateColumnName
	FROM Control.ProcessStream PS
	WHERE PS.Name = @ProcessStream
	
	DECLARE @sqlCommand nvarchar(1000),
			@ProcessDate DATETIME

	SELECT @SourceFileId = SF.SourceFileId
	FROM Control.Entity E
		INNER JOIN Control.SourceFile SF on E.SourceFileId = SF.SourceFileId
	WHERE E.EntityId = @EntityId

	SET @sqlCommand = 'SELECT @ProcessDate = '+@ProcessDateColumn+'
						FROM Control.SourceFile SF
						WHERE SourceFileId = @SourceFileId'
	EXECUTE sp_executesql @sqlCommand, N'@SourceFileId int, @ProcessDate datetime OUTPUT', @SourceFileId = @SourceFileId, @ProcessDate = @ProcessDate OUTPUT


	IF @ProcessDate IS NULL
		BEGIN
			print 'File not yet stamped, continue'
		END
	*/

	IF EXISTS(	SELECT null
			FROM [Control].[EntityProcessStream] EPS
			WHERE EPS.EntityId = @EntityId
				AND EPS.LoadProcess = @ProcessStream
				AND EPS.LoadStatusTypeId = 2)
	BEGIN
		SET @VerifyResult = 1
		RETURN @VerifyResult
	END
	ELSE
	BEGIN
		SET @VerifyResult = 0
		RETURN @VerifyResult
	END

	/* test sql */
	/*
	SELECT *
	FROM [Control].[EntityProcessStream] EPS
	WHERE EPS.EntityId = 198
		AND EPS.LoadProcess = 'TRN2WAR'
		AND EPS.LoadStatusTypeId = 2

	SELECT E.EntityId, SF.SourceFileName, ET.Name, ET.Description
	FROM Control.Entity E
		INNER JOIN Control.SourceFile SF on E.SourceFileId = SF.SourceFileId
		INNER JOIN Control.EntityType ET on E.EntityTypeId = ET.EntityTypeId
	WHERE E.EntityId = 198

	SELECT SF.*
	FROM Control.Entity E
		INNER JOIN Control.SourceFile SF on E.SourceFileId = SF.SourceFileId
	WHERE E.EntityId = 198
	*/

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [OLAPControl].[ObtainMGPartitionsToProcess]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
-- =============================================
-- Author:		Adatis Consulting
-- Create date: 2013/05/13
-- =============================================
CREATE PROCEDURE [OLAPControl].[ObtainMGPartitionsToProcess]
		@ProcessType				SMALLINT = NULL,
		@MeasureGroupName			VARCHAR(128),
		@CubeName					VARCHAR(128),
		@PartitionKeyColName		VARCHAR(128)
AS

SET NOCOUNT ON
	
	SELECT		PartitionID
				,' FROM ' + PD.PartitionDefinitionName 
					+ ' WHERE ' + @PartitionKeyColName + ' BETWEEN ' 
					+ CAST(FromDateId AS VARCHAR) 
					+ ' AND ' + CAST(ToDateId AS VARCHAR)					AS PartitionRange,
				PD.PartitionPrefix,
				--Set the MDX slice if the metadata has been defined
				CASE 
					WHEN	MGP.PartitionSliceDimension IS NOT NULL AND 
							MGP.PartitionSliceAttribute IS NOT NULL AND
							MGP.PartitionSliceKey IS NOT NULL THEN
							'[' + MGP.PartitionSliceDimension + '].[' + MGP.PartitionSliceAttribute + '].&[' +
							CAST(MGP.PartitionSliceKey AS VARCHAR(10)) + ']'
					ELSE
						NULL
				END AS PartitionSlice
	FROM		OLAPControl.MeasureGroupPartition									MGP
		INNER JOIN	OLAPControl.MeasureGroup										MG
		ON			MGP.MeasureGroupId = MG.MeasureGroupId
		INNER JOIN	OLAPControl.[Cube]												CU
		ON			CU.CubeId =	MG.CubeId
		INNER JOIN	OLAPControl.PartitionDefinition									PD
		ON			MGP.PartitionDefinitionId = PD.PartitionDefinitionId
	WHERE	Dirty = 1 -- We only want to Process Dirty PArtitions, The Old Code Processesd Everthing if a Full Process Was Requested, however for Tubular this is not required. 
				--CASE 
				--	WHEN COALESCE(@ProcessType, 0) = 0
				--	THEN Dirty
				--	ELSE Active
				--END = 1	
	AND			MG.MeasureGroupName	= @MeasureGroupName
	AND			CU.CubeName	= @CubeName

	ORDER BY FromDateId
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [OLAPControl].[ObtainMGDimensionsToProcess]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
-- =============================================
-- Author:		Adatis Consulting
-- Create date: 2013/05/15
-- This can return the dimensions for a given measure group.
-- If @ProcessAll is set to 1 then all dimensions in the dbo.Dimension table will be returned
-- =============================================
CREATE PROCEDURE [OLAPControl].[ObtainMGDimensionsToProcess]
		@MeasureGroupName	VARCHAR(128),
		@CubeName		VARCHAR(128),
		@ProcessAll		BIT
AS

SET NOCOUNT ON
	
SELECT			DISTINCT D.DimensionName
FROM			OLAPControl.MeasureGroupDimension MGD
INNER JOIN		OLAPControl.MeasureGroup MG ON MGD.MeasureGroupId = MG.MeasureGroupId
INNER JOIN		OLAPControl.Dimension D ON MGD.DimensionId = D.DimensionId
INNER JOIN		OLAPControl.[Cube] CU ON MG.CubeId = CU.CubeId
WHERE			(MG.MeasureGroupName = @MeasureGroupName AND CU.CubeName = @CubeName)
OR				@ProcessAll = 1
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [OLAPControl].[ResetDirtyPartitions]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
-- =============================================
-- Author:		Adatis Consulting
-- Create date: 2013/05/15
-- =============================================
CREATE PROCEDURE [OLAPControl].[ResetDirtyPartitions]
		@MeasureGroupName	VARCHAR(128),
		@CubeName			VARCHAR(128)
AS

SET NOCOUNT ON
	
	UPDATE		MGP
	SET			Dirty = 0 
	FROM		[OLAPControl].[MeasureGroupPartition]				MGP
		INNER JOIN	[OLAPControl].[MeasureGroup]					MG
		ON			MGP.MeasureGroupId = MG.MeasureGroupId	
		INNER JOIN	[OLAPControl].[Cube]							C
		ON			MG.CubeId = C.CubeId
	WHERE		MG.MeasureGroupName	= @MeasureGroupName
	AND			C.CubeName = @CubeName
	AND			Dirty = 1
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Secure].[GetBlobConnectionKey]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO

CREATE PROCEDURE [Secure].[GetBlobConnectionKey]
	@pAzureBlobConnectionKey NVARCHAR(255) OUT
AS
BEGIN
/*
 *	Gets the last inserted connections string for BLOB storage
 */
	SET NOCOUNT ON;

	SET	@pAzureBlobConnectionKey = (SELECT TOP 1 [Value] 
									FROM [Secure].[Configurations]
									ORDER BY ConfigurationId DESC);
   
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Secure].[SetBlobConfiguration]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [Secure].[SetBlobConfiguration]
    @pName            VARCHAR (100),
    @pDescription     VARCHAR (250),
    @pValue           VARCHAR (250)
AS
BEGIN
/*
 *	Inserts configuration for accessing BLOB storage
 */
	INSERT INTO [Secure].[Configurations]
		([Name], [Description], [Value], [CreatedAt])
	VALUES
	    (@pName, @pDescription, @pValue, SYSDATETIME());
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Secure].[GetBlobConnectionString]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO

CREATE PROCEDURE [Secure].[GetBlobConnectionString]
AS
BEGIN
/*
 *	Gets the last inserted connections string for BLOB storage
 */
	SET NOCOUNT ON;

	SELECT TOP 1 [Value] 
	FROM [Secure].[Configurations]
	ORDER BY ConfigurationId DESC;
   
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Test].[InsertValidationTestExecution]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [Test].[InsertValidationTestExecution]
(
	@LoadID INT,
	@ValidationTestId SMALLINT,
	@TestStatus VARCHAR(4),
	@SourceResult VARCHAR(30),
	@TargetResult VARCHAR(30)
)
	
AS


INSERT INTO Test.ValidationTestExecution (LoadId, ValidationTestId, TestStatus, SourceResult, TargetResult, ExecutionTime, CreatedBy)
VALUES (@LoadID, @ValidationTestId, @TestStatus, @SourceResult, @TargetResult, GETDATE(), suser_sname())
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Test].[ObtainValidationTests]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [Test].[ObtainValidationTests]

@PackageName VARCHAR(200)

AS

-- ==========================================================================================
-- Author:		Adatis
-- Create date: 03/07/2014
-- Description:	Returns all the validation tests that must be run for a given package
-- ==========================================================================================

SELECT			ValidationTestId,
				--Casting these as SSIS is fussy with tiny ints
				CAST(ValidationTypeId AS SMALLINT) AS ValidationTypeId,
				CAST(ValidationSourceId AS SMALLINT) AS ValidationSourceId,
				SourceObject,
				TargetObject,
				WarningPercent,
				EnableWarning,
				HaltPercent,
				EnableHalt
FROM			Test.ValidationTest V
WHERE			LOWER(PackageName) = LOWER(@PackageName)
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON SCHEMA::[Audit] TO [db_subscribed_application];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON SCHEMA::[Audit] TO [PRSBIDevValidation];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON SCHEMA::[Azure] TO [db_azure_logging_agent];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON SCHEMA::[Azure] TO [db_subscribed_application];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON SCHEMA::[Azure] TO [db_subscribed_application];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON SCHEMA::[Control] TO [db_subscribed_application];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON SCHEMA::[Control] TO [PRSBIDevValidation];


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
SET IDENTITY_INSERT [Control].[EntityType] ON;
GO
MERGE INTO [Control].[EntityType] AS Tgt
USING 
	(VALUES	
		(1, -1, N'Address', N'dxaddress', N'Address Table', N'DATAXCHANGE', N'DX_ADDRESS', N'Simon.Whiteley@prsformusic.com',SYSDATETIME()),
		(2, -1, N'Country', N'dxcountry', N'DX Country Table', N'DATAXCHANGE', N'DX_COUNTRY', N'Simon.Whiteley@prsformusic.com',SYSDATETIME()),
		(3, -1, N'StatementWorkDetail', N'dxstmtwkdt', N'DX Statement Work Details', N'DATAXCHANGE', N'DX_STMT_WKDT', N'Simon.Whiteley@prsformusic.com',SYSDATETIME()),
		(4, -1, N'Society', N'dxsociety', N'DX Society Table', N'DATAXCHANGE', N'DX_SOCIETY', N'Simon.Whiteley@prsformusic.com',SYSDATETIME()),
		(6, NULL, N'DimSociety', N'dimSociety', N'Online Statements Dim Society', N'Warehouse', N'DimSociety', N'Simon.Whiteley@prsformusic.com',SYSDATETIME()),
		(7, NULL, N'DimMember', N'dimMember', N'Online Statements Dim Member', N'Warehouse', N'DimMember', N'Simon.Whiteley@prsformusic.com',SYSDATETIME()),
		(8, NULL, N'DimDistribution', N'dimDistribution', N'Online Statements Dim Distribution', N'Warehouse', N'DimDistribution', N'Simon.Whiteley@prsformusic.com',SYSDATETIME()),
		(11, NULL, N'FactDistributedRoyalty', N'DistRoyalty', N'Fact Distributed Royalty', N'Warehouse', N'FactDistributedRoyalty', N'Simon.Whiteley@prsformusic.com',SYSDATETIME()),
		(16, -1, N'AffiliateStatement', N'dxastmt', N'Affilate Statement table', N'DATAXCHANGE', N'DX_A_STMT', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(17, -1, N'AffiliateStatementEDetail', N'dxastmtedet', N'Affiliate Statement E Detail table', N'DATAXCHANGE', N'DX_A_STMT_EDET', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(18, -1, N'AffiliateStatementFDetail', N'dxastmtfdet', N'Affiliate Statement F Detail table', N'DATAXCHANGE', N'DX_A_STMT_FDET', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(19, -1, N'BroadcastRegion', N'dxbroadcastregion', N'DX broadcast region table', N'DATAXCHANGE', N'DX_BROADCAST_REGION', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(21, -1, N'CAE', N'dxcae', N'Dx cae table', N'DATAXCHANGE', N'DX_CAE', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(22, -1, N'Currency', N'dxcurrency', N'DX Currency table', N'DATAXCHANGE', N'DX_CURRENCY', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(23, -1, N'Distribution', N'dxdistribution', N'DX Distribution table', N'DATAXCHANGE', N'DX_DISTRIBUTION', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(26, -1, N'DistributionLoadControl', N'dxdistributionloadcontrol', N'DX Distribution Load Control table', N'DATAXCHANGE', N'DX_DISTRIBUTION_LOAD_CONTROL', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(27, -1, N'EEAStatementDetails', N'dxeeastmtdet', N'DX EEA Statement Details Table', N'DATAXCHANGE', N'DX_EEA_STMT_DET', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(28, -1, N'EEAStatementSummary', N'dxeeastmtsumm', N'DX EEA Statement Summary table', N'DATAXCHANGE', N'DX_EEA_STMT_SUMM', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(29, -1, N'ElectronicStatement', N'dxestmt', N'DX ElectronicStatement table', N'DATAXCHANGE', N'DX_E_STMT', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(30, -1, N'ElectronicStatementGeneralAdjustment', N'dxestmtgnad', N'DX Electronic statement general adjustment table', N'DATAXCHANGE', N'DX_E_STMT_GNAD', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(31, -1, N'ElectronicStatementPaymentDetail', N'dxestmtpymtdet', N'DX Elecronic Statement Payment Details table', N'DATAXCHANGE', N'DX_E_STMT_PYMT_DET', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(32, -1, N'Invoices', N'dxinvoices', N'DX Invoices table', N'DATAXCHANGE', N'DX_INVOICES', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(33, -1, N'Licensees', N'dxlicensees', N'DX Licensees table', N'DATAXCHANGE', N'DX_LICENSEES', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(34, -1, N'LicensingBodies', N'dxlicensingbodies', N'DX Licensing Bodies table', N'DATAXCHANGE', N'DX_LICENSING_BODIES', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(35, -1, N'MajorMember', N'dxmajormember', N'DX Major member table', N'DATAXCHANGE', N'DX_MAJOR_MEMBER', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(36, -1, N'Membership', N'dxmembership', N'DX Membership tables', N'DATAXCHANGE', N'DX_MEMBERSHIP', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(37, -1, N'MembershipType', N'dxmembershiptype', N'DX Membership Type table', N'DATAXCHANGE', N'DX_MEMBERSHIP_TYPE', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(40, -1, N'MemberSourceSocieties', N'dxmembersourcesocieties', N'DX Member Source Societies table', N'DATAXCHANGE', N'DX_MEMBER_SOURCE_SOCIETIES', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(41, -1, N'MemberStatements', N'dxmemberstatements', N'DX Member Statements table', N'DATAXCHANGE', N'DX_MEMBER_STATEMENTS', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(42, -1, N'StatementInstructionLicensingBodies', N'dxmvstmtinstrlibos', N'DX Statement Instruction Licensing Bodies table', N'DATAXCHANGE', N'DX_MV_STMT_INSTR_LIBOS', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(43, -1, N'ProductTypes', N'dxproducttypes', N'DX Product Types table', N'DATAXCHANGE', N'DX_PRODUCT_TYPES', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(44, -1, N'PaymentInstruction', N'dxpymtinstruction', N'DX PaymentInstruction table', N'DATAXCHANGE', N'DX_PYMT_INSTRUCTION', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(45, -1, N'PaperStatement', N'dxpstmt', N'DX Paper Statement table', N'DATAXCHANGE', N'DX_P_STMT', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(46, -1, N'PaperStatementAccountDetails', N'dxpstmtaccdet', N'DX Paper Statement Account Details table', N'DATAXCHANGE', N'DX_P_STMT_ACC_DET', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(47, -1, N'PaperStatementCommissionInvoice', N'dxpstmtcomminvoice', N'DX Paper Statement Commission Invoice table', N'DATAXCHANGE', N'DX_P_STMT_COMM_INVOICE', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(48, -1, N'PaperStatementGeneralAdjustmentLines', N'dxpstmtgad', N'DX Paper Statement General Adjustment Lines table', N'DATAXCHANGE', N'DX_P_STMT_GAD', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(49, -1, N'PaperStatementNOPEarningLines', N'dxpstmtnopearndet', N'DX Paper Statement NOP Earning Lines table', N'DATAXCHANGE', N'DX_P_STMT_NOP_EARN_DET', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(50, -1, N'PaperStatementNOPPaymentLines', N'dxpstmtnoppymtdet', N'DX Paper Statement NOP Payment Lines table', N'DATAXCHANGE', N'DX_P_STMT_NOP_PYMT_DET', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(55, -1, N'PaperStatementTopFiveEarners', N'dxpstmttopfiveearners', N'DX Paper Statement Top Five Eaners table', N'DATAXCHANGE', N'DX_P_STMT_TOP_FIVE_EARNERS', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(56, -1, N'PaperStatementVATLines', N'dxpstmtvtdt', N'DX Paper Stateent VAT Lines table', N'DATAXCHANGE', N'DX_P_STMT_VTDT', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(57, -1, N'RollupMember', N'dxrollupmember', N'DX Rollup Member table', N'DATAXCHANGE', N'DX_ROLLUP_MEMBER', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(58, -1, N'ScottishPostCodes', N'dxscottishpostcodes', N'DX Scottish PostCodes table', N'DATAXCHANGE', N'DX_SCOTTISH_POST_CODES', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(59, -1, N'ServiceTypes', N'dxservicetypes', N'DX Service Types table', N'DATAXCHANGE', N'DX_SERVICE_TYPES', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(60, -1, N'SocietyUsageLink', N'dxsocietyusagelink', N'DX Society Usage Link table', N'DATAXCHANGE', N'DX_SOCIETY_USAGE_LINK', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(63, -1, N'StatementInstruction', N'dxstatementinstruction', N'DX Statement Instruction table', N'DATAXCHANGE', N'DX_STATEMENT_INSTRUCTION', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(64, -1, N'StatementRun', N'dxstatementrun', N'DX Statement Run table', N'DATAXCHANGE', N'DX_STATEMENT_RUN', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(65, -1, N'StandardTaxRate', N'dxstdtaxrate', N'DX Standard Tax Rate table', N'DATAXCHANGE', N'DX_STD_TAX_RATE', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(66, -1, N'StatementInstructionSocieties', N'dxstinsocieties', N'DX Statement Instruction Societies table', N'DATAXCHANGE', N'DX_STIN_SOCIETIES', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(67, -1, N'StatementAddition', N'dxstmtaddt', N'DX Statement addition table', N'DATAXCHANGE', N'DX_STMT_ADDT', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(68, -1, N'StatementDetails', N'dxstmtdetail', N'DX Statement Detail table', N'DATAXCHANGE', N'DX_STMT_DETAIL', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(69, -1, N'StatementDummyAddress', N'dxstmtdummyaddress', N'DX Statement Dummy Address table', N'DATAXCHANGE', N'DX_STMT_DUMMY_ADDRESS', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(70, -1, N'Territory', N'dxterritorytis', N'DX Territory table', N'DATAXCHANGE', N'DX_TERRITORY_TIS', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(71, -1, N'UsageCategories', N'dxusagecategories', N'DX Usage Categories table', N'DATAXCHANGE', N'DX_USAGE_CATEGORIES', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(72, -1, N'UsageGroup', N'dxusagegroup', N'DX Usage Group table', N'DATAXCHANGE', N'DX_USAGE_GROUP', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(73, -1, N'UsageGroupSummary', N'dxusagegroupsumm', N'DX Usage Group Summary table', N'DATAXCHANGE', N'DX_USAGE_GROUP_SUMM', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(74, -1, N'UsageGroupType', N'dxusagegrouptype', N'DX Usage Group Type table', N'DATAXCHANGE', N'DX_USAGE_GROUP_TYPE', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(75, -1, N'WithheldSocietyTax', N'dxwithheldsocietytax', N'DX Withheld society tax table', N'DATAXCHANGE', N'DX_WITHHELD_SOCIETY_TAX', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(76, -1, N'PaperStatementAccountShare', N'dxpstmtaccshare', N'DX Paper Statement Account Share table', N'DATAXCHANGE', N'DX_P_STMT_ACC_SHARE', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(77, NULL, N'AdjustmentLine', N'AdjustmentLine', N'Online Statements Adjustment Line', N'Warehouse', N'AdjustmentLine', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(78, NULL, N'CommissionInvoice', N'CommissionInvoice', N'OnlineStatements Commission Invoice', N'Warehouse', N'CommissionInvoice', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(84, NULL, N'CommissionInvoiceLine', N'CommInvoiceLine', N'Online Statements Comm Invoice Line', N'Warehouse', N'CommissionInvoiceLine', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(85, NULL, N'DimAdjustmentReason', N'dimAdjustmentReason', N'Online Statements Adjustment Reason', N'Warehouse', N'DimAdjustmentReason', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(86, NULL, N'DimBroadcaster', N'dimBroadcaster', N'Online Statements Dim Broadcaster', N'Warehouse', N'DimBroadcaster', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(87, NULL, N'DimCountry', N'dimCountry', N'Online Statements Dim Country', N'Warehouse', N'DimCountry', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(90, NULL, N'DimDate', N'dimDate', N'Online Statements Dim Date', N'Warehouse', N'DimDate', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(92, NULL, N'DimInterestedParty', N'dimInterestedParty', N'Online Statements Dim Interested Party', N'Warehouse', N'DimInterestedParty', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(93, NULL, N'DimInvoice', N'dimInvoice', N'Online Statements Dim Invoice', N'Warehouse', N'DimInvoice', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(94, NULL, N'DimLicensingBody', N'dimLicensingBody', N'Online Statements Dim Licensing Body', N'Warehouse', N'DimLicensingBody', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(96, NULL, N'DimProduct', N'dimProduct', N'Online Statements Dim Product', N'Warehouse', N'DimProduct', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(97, NULL, N'DimRecording', N'dimRecording', N'Online Statements Dim Recording', N'Warehouse', N'DimRecording', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(98, NULL, N'DimRoleType', N'dimRoleType', N'Online Statements Dim Role Type', N'Warehouse', N'DimRoleType', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(105, NULL, N'DimRoyaltyClassification', N'dimRoyaltyClass', N'Dim Royalty Classification', N'Warehouse', N'DimRoyaltyClassification', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(106, NULL, N'DimUsageClassification', N'dimUsageClass', N'Dim Usage Classification', N'Warehouse', N'DimUsageClassification', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(107, NULL, N'DimUsageGroup', N'dimUsageGroup', N'Online Statements Dim Usage Group', N'Warehouse', N'DimUsageGroup', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(108, NULL, N'DimWork', N'dimWork', N'Online Stateents Dim Work', N'Warehouse', N'DimWork', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(109, NULL, N'FactDistributedRoyalty2', N'DistRoyalty2', N'Fact Distributed Royalty2', N'Warehouse', N'FactDistributedRoyalty2', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(110, NULL, N'GeneralRoyaltyLine', N'GeneralRoyaltyLine', N'General Loyalty Line', N'Warehouse', N'GeneralRoyaltyLine', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(112, NULL, N'NopEarningLine', N'NopEarningLine', N'Nop Earning Line', N'Warehouse', N'NopEarningLine', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(113, NULL, N'NopNoteText', N'NopNoteText', N'Nop Note Text ', N'Warehouse', N'NopNoteText', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(114, NULL, N'NopPaymentLine', N'NopPaymentLine', N'Nop Payment Line', N'Warehouse', N'NopPaymentLine', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(115, NULL, N'NoteText', N'NoteText', N'Note Text', N'Warehouse', N'NoteText', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(116, NULL, N'OnlineStatement', N'OnlineStatement', N'Online Statement', N'Warehouse', N'OnlineStatement', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(117, NULL, N'SourceStatement', N'SourceStatement', N'Source Statement', N'Warehouse', N'SourceStatement', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(119, NULL, N'StatementLicensingBody', N'StatemtLicensingBody', N'Statement Licensing Body', N'Warehouse', N'StatementLicensingBody', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(120, NULL, N'ThirdPartyStatementGroup', N'ThrdPrtyStmtGroup', N'Third Party Statement Group', N'Warehouse', N'ThirdPartyStatementGroup', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(126, NULL, N'ThirdPartyStatementGroupOnlineStatement', N'ThrdPrtyStmtGrpOlSt', N'Third Party Statement Group Online Statement', N'Warehouse', N'ThirdPartyStatementGroupOnlineStatement', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(127, NULL, N'UsageGroupRoyaltyLine', N'UsageGrpRoyLine', N'Usage Group Royalty Line', N'Warehouse', N'UsgaeGroupRoyaltyLine', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(128, NULL, N'VATInvoice', N'VATInvoice', N'VATInvoice', N'Warehouse', N'VATInvoice', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(129, NULL, N'VATInvoiceLine', N'VATInvoiceLine', N'VATInvoiceLine', N'Warehouse', N'VATInvoiceLine', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(130, NULL, N'DimWorkAttributes', N'dimWorkAttributes', N'Online Statements Dim Work Attributes', N'Warehouse', N'DimWorkAttributes', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(131, NULL, N'TempDistributedRoyalty', N'TempDistributedRoyalty', N'Temp Distributed Royalty', N'Transform', N'TempDistributedRoyalty', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(132, NULL, N'TempDistributedRoyaltyWkdt', N'TempDistributedRoyaltyWkdt', N'Temp Distributed Royalty Wkdt', N'Transform', N'TempDistributedRoyaltyWkdt', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(133, NULL, N'TempDistributedRoyaltyAddt', N'TempDistributedRoyaltyAddt', N'Temp Distributed Royalty Addt', N'Transform', N'TempDistributedRoyaltyAddt', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(134, NULL, N'TempStatement', N'TempStatement', N'Temp Statement', N'Transform', N'TempStatement', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(135, NULL, N'TempStatementShare', N'TempStatementShare', N'Temp Statement Share', N'Transform ', N'TempStatementShare', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(136, NULL, N'SourceStatement', N'SourceStatement', N'Source Statement', N'Warehouse', N'SourceStatement', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(137, NULL, N'ReportsText', N'reportstext', N'Reports Text', N'DATAXCHANGE', N'REPORTS_TEXT', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(138, NULL, N'ReportTypes', N'reporttypes', N'Report Types', N'DATAXCHANGE', N'REPORT_TYPES', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(139, NULL, N'StatementInstrumentLiboList', N'dxstmtinstrlibolist', N'StatementInstrumentLicensingBodyList table', N'DATAXCHANGE', N'DX_STMT_INSTR_LIBO_LIST', N'Emma.Stewart@prsformusic.com',SYSDATETIME()),
		(140, NULL, N'BroadcastDataQualityFormat5', N'brcdqformat5', N'Broadcast DataQuality Format5', N'BRCDataQuality', N'BRC_DQ_Format5', N'vandana.bangera@prsformusic.com',SYSDATETIME()),
		(143, NULL, N'BroadcastDataQualityFormat50', N'brcdqformat50', N'Broadcast DataQuality Format50', N'BRCDataQuality', N'BRC_DQ_Format50', N'vandana.bangera@prsformusic.com',SYSDATETIME()),
		(144, NULL, N'BroadcastDataQualityFormat52', N'brcdqformat52', N'Broadcast DataQuality Format52', N'BRCDataQuality', N'BRC_DQ_Format52', N'vandana.bangera@prsformusic.com',SYSDATETIME()),
		(146, NULL, N'BroadcastDataQualityFormat303', N'brcdqformat303', N'Broadcast DataQuality Format303', N'BRCDataQuality', N'BRC_DQ_Format303', N'vandana.bangera@prsformusic.com',SYSDATETIME()),
		(147, NULL, N'BroadcastDataQualityFormat51', N'brcdqformat51', N'Broadcast DataQuality Format51', N'BRCDataQuality', N'BRC_DQ_Format51', N'vandana.bangera@prsformusic.com',SYSDATETIME()),
		(148, NULL, N'BroadcastDataQualityFormat51a', N'brcdqformat51a', N'Broadcast DataQuality Format51a', N'BRCDataQuality', N'BRC_DQ_Format51a', N'vandana.bangera@prsformusic.com',SYSDATETIME()),
		(149, NULL, N'BroadcastDataQualityFormatS1', N'brcdqformats1', N'Broadcast DataQuality FormatS1', N'BRCDataQuality', N'BRC_DQ_FormatS1', N'vandana.bangera@prsformusic.com',SYSDATETIME()),
		(150, NULL, N'BroadcastDataQualityFormatS2', N'brcdqformats2', N'Broadcast DataQuality FormatS2', N'BRCDataQuality', N'BRC_DQ_FormatS2', N'vandana.bangera@prsformusic.com',SYSDATETIME())
	) AS Src
	(
		 EntityTypeId
		,ParentEntityTypeId
		,Name
		,Code
		,[Description]
		,[Schema]
		,[Table]
		,[CreatedBy]
        ,[CreatedDate]
	)
	ON Tgt.EntityTypeId = Src.EntityTypeId

-- Update matched rows
WHEN MATCHED THEN
	UPDATE
	SET
		[Name]					= Src.[Name],
		[Code]					= Src.[Code],
		[ParentEntityTypeId]	= Src.[ParentEntityTypeId],
		[Description]			= Src.[Description],
		[Schema]				= Src.[Schema],
		[Table]					= Src.[Table],
		[CreatedBy]				= Src.[CreatedBy],
        [CreatedDate]			= Src.[CreatedDate]

-- Insert new rows
WHEN NOT MATCHED BY TARGET THEN
	INSERT
		(
			[EntityTypeId],
			[Name],				
			[Code],				
			[ParentEntityTypeId],
			[Description],		
			[Schema],			
			[Table],				
			[CreatedBy],			
			[CreatedDate]		
		)
	VALUES
		(
			Src.[EntityTypeId],
			Src.[Name],
			Src.[Code],
			src.[ParentEntityTypeId],
			src.[Description],
			src.[Schema],
			src.[Table],
			src.[CreatedBy],			
			src.[CreatedDate]
		)

--  Delete rows that are in the target but not the source
WHEN NOT MATCHED BY SOURCE THEN
	DELETE;
GO
SET IDENTITY_INSERT [Control].[EntityType] OFF;


SET IDENTITY_INSERT [Control].[LoadStatusType] ON;
GO
MERGE INTO [Control].[LoadStatusType] AS Tgt
USING 
	(VALUES
		(1,'In Progress','Load In Progress','InProgress','PostDeployment Script', SYSDATETIME()),
		(2,'Successful','Load Completed Successfully','Success','PostDeployment Script',SYSDATETIME()),
		(3,'Failed','Load Failed','Failed','PostDeployment Script',SYSDATETIME()),
		(4,'Reset','Load flagged for reset','Reset','PostDeployment Script',SYSDATETIME())
	) AS Src
	(
		[LoadStatusTypeId],
		[Name],
		[Description],
		[ShortName],
		[UpdateUser],
		[UpdateTime]
	)
	ON Tgt.[LoadStatusTypeId] = Src.[LoadStatusTypeId]

-- Update matched rows
WHEN MATCHED THEN
	UPDATE
	SET
		[Name]			   = Src.[Name],
		[Description]	   = Src.[Description],
		[ShortName]		   = src.[ShortName],
		[UpdateUser]	   = Src.[UpdateUser],
		[UpdateTime]	   = Src.[UpdateTime]
-- Insert new rows
WHEN NOT MATCHED BY TARGET THEN
	INSERT
		(
			[LoadStatusTypeId],
			[Name],			
			[Description],	
			[ShortName],		
			[UpdateUser],		
			[UpdateTime]	
		)
	VALUES
		(
			Src.[LoadStatusTypeId],
			Src.[Name],			
			Src.[Description],	
			src.[ShortName],		
			src.[UpdateUser],		
			src.[UpdateTime]	
		)

--  Delete rows that are in the target but not the source
WHEN NOT MATCHED BY SOURCE THEN
	DELETE;
GO
SET IDENTITY_INSERT [Control].[LoadStatusType] OFF;


SET IDENTITY_INSERT [Control].[ProcessStream] ON;
GO
MERGE INTO [Control].[ProcessStream] AS Tgt
USING 
	(VALUES
		(1,'EXT2STG',	'External To Stage', ''	,1),
		(2,'STG2CLN',	'Stage To Clean', '' ,2),
		(3,'CLN2TRN',	'Clean To Transform','',3),
		(4,'TRN2WAR',	'Transform To Warehouse','',4),
		(5,'REF2TRN',	'Reference To Transform','',5),
		(6,'CLN2WAR',	'Clean To Warehouse','',6),
		(7,'TRN2TRN',	'Transform To Transform','',7),
		(8,'TRN2REJ',	'Transform To Reject','',8)
	) AS Src
	(
		[ProcessStreamId],
		[Code],
		[Name],
		[Description],
		[ProcessStreamOrder]
	)
	ON Tgt.[ProcessStreamId] = Src.[ProcessStreamId]

-- Update matched rows
WHEN MATCHED THEN
	UPDATE
	SET
		 [Code]					= Src.[Code]
		,[Name]					= src.[Name]
		,[Description]			= src.[Description]
		,[ProcessStreamOrder]	= src.[ProcessStreamOrder]

-- Insert new rows
WHEN NOT MATCHED BY TARGET THEN
	INSERT
		(
			[ProcessStreamId],
			[Code],
			[Name],
			[Description],
			[ProcessStreamOrder]
		)
	VALUES
		(
			Src.[ProcessStreamId],
			Src.[Code],
			Src.[Name],
			src.[Description],
			src.[ProcessStreamOrder]
		)

-- Delete rows that are in the target but not the source
WHEN NOT MATCHED BY SOURCE THEN
	DELETE;
GO
SET IDENTITY_INSERT [Control].[ProcessStream] OFF;

SET IDENTITY_INSERT [Control].[SourceFileType] ON;
GO
MERGE INTO [Control].[SourceFileType] AS Tgt
USING 
	(VALUES
		(1, 'DX','DataXchange Distribution Context', 'DX Partition', 'Out',0,''),
		(2,'UNK','UNKNOWN','Unknown','OUT',0,'UNKNOWN'),
		(3,'SAS','SASOWN','SASOWN','OUT',0,'')) AS Src
	(
		[SourceFileTypeId],	
		[Code],
		[Description],
		[Name],
		[Direction],
		[32BitStageRequired],
		[Collection]
	)
	ON Tgt.[SourceFileTypeId] = Src.[SourceFileTypeId]

-- Update matched rows
WHEN MATCHED THEN
	UPDATE
	SET	
		[Code]					= Src.[Code],
		[Description]			= Src.[Description],
		[Name]					= Src.[Name],
		[Direction]				= Src.[Direction],
		[32BitStageRequired]	= src.[32BitStageRequired],
		[Collection]			= src.[Collection]

-- Insert new rows
WHEN NOT MATCHED BY TARGET THEN
	INSERT
		(
			[SourceFileTypeId],	
			[Code],
			[Description],
			[Name],
			[Direction],
			[32BitStageRequired],
			[Collection]          
		)
	VALUES
		(
			SRC.[SourceFileTypeId],	
			SRC.[Code],
			SRC.[Description],
			SRC.[Name],
			SRC.[Direction],
			SRC.[32BitStageRequired],
			SRC.[Collection]
		)

-- Delete rows that are in the target but not the source
WHEN NOT MATCHED BY SOURCE THEN
	DELETE;
GO
SET IDENTITY_INSERT [Control].[SourceFileType] OFF;

SET IDENTITY_INSERT [Control].[Application] ON;
GO
MERGE INTO [Control].[Application] AS Tgt
USING 
	(VALUES
		(1,'Data Experience Online Statements','DEOS','Data Experience Solution', null, null, null ,'Azure DW ', SYSDATETIME()),
		(2,'BroadcastDataQuality','BRDDQ','DataQuality Solution for AV', null, null, null , 'DataMart', SYSDATETIME())
	) AS Src
	(
		[ApplicationId],
		[Name],
     	[Code],
		[Description],
		[Priority],		   
		[UpTimeHours],	   
		[ETLType],		   
        [WarehouseType],
		[CreatedDate]
	)
	ON Tgt.[ApplicationId] = Src.[ApplicationId]

-- Update matched rows
WHEN MATCHED THEN
	UPDATE
	SET
		[Name]			   = Src.[Name],
		[Code]			   = Src.[Code],
		[Description]	   = Src.[Description],
		[Priority]		   = Src.[Priority],
		[UpTimeHours]	   = Src.[UpTimeHours],
		[ETLType]		   = Src.[ETLType],
		[WarehouseType]	   = Src.[WarehouseType]
-- Insert new rows
WHEN NOT MATCHED BY TARGET THEN
	INSERT
		(
			[ApplicationId],
			[Name],
     		[Code],
			[Description],
			[WarehouseType]		
		)
	VALUES
		(
			Src.[ApplicationId],
			Src.[Name],
			Src.[Code],
			Src.[Description],
			Src.[WarehouseType]
		)
--  Delete rows that are in the target but not the source
WHEN NOT MATCHED BY SOURCE THEN
	DELETE;
GO
SET IDENTITY_INSERT [Control].[Application] OFF;


GO

GO
