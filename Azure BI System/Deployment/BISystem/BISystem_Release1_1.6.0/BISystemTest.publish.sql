/*
Deployment script for BISystemTest

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "BISystemTest"
:setvar DefaultFilePrefix "BISystemTest"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO

PRINT N'Altering table [Control].[SourceFile]...';

ALTER TABLE [Control].[SourceFile]
ADD  [WarehouseParentLoadId]     INT            NULL

GO


PRINT N'Altering [Control].[UpdateSourceFile]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
-- =============================================
-- Author:		Adatis
-- Create date: 18/03/2013
-- Description:	Updates Source File milestone dates
-- =============================================
ALTER PROCEDURE [Control].[UpdateSourceFile]
	@SourceFileId	INT, 
	@Stream			VARCHAR(10),
	@ParentLoadId	INT = NULL
AS
BEGIN
	SET NOCOUNT ON;

	IF @Stream = 'SRC2FILE'
	BEGIN
	    UPDATE Control.SourceFile
		   SET [FileExtractedDate]= GETDATE(),
	           [FileExtractedParentLoadId]= @ParentLoadId,
			   [ModifiedDate] = GETDATE()
	    WHERE SourceFileId = @SourceFileId
	END
	
	IF @Stream = 'FILE2EXT'
	BEGIN
		UPDATE Control.SourceFile
		SET	BlobUploadDate = GETDATE() ,
		[ModifiedDate] = GETDATE()
		WHERE SourceFileId = @SourceFileId
	END
	
	IF @Stream in ('EXT2STG', 'SRC2STG')
	BEGIN
		UPDATE Control.SourceFile
		SET	StageDate = GETDATE()
		, [StageParentLoadId] = @ParentLoadId,
		[ModifiedDate] = GETDATE()
		WHERE SourceFileId = @SourceFileId
	END
	
	IF @Stream = 'STG2CLN'
	BEGIN
		IF @ParentLoadId IS NOT NULL
		BEGIN
			UPDATE Control.SourceFile
			SET	CleanDate = GETDATE()
			, [CleanParentLoadId] = @ParentLoadId,
			[ModifiedDate] = GETDATE()
			WHERE SourceFileId = @SourceFileId
		END
		ELSE
		BEGIN
			UPDATE Control.SourceFile
			SET	CleanDate = GETDATE()
			WHERE SourceFileId = @SourceFileId
		END
	END	
		
	IF @Stream = 'CLN2WAR'
	BEGIN
		UPDATE Control.SourceFile
		SET	WarehouseDate = GETDATE(),
		[ModifiedDate] = GETDATE()
		WHERE SourceFileId = @SourceFileId
	END;

	IF @Stream = 'CLN2TRN'
	BEGIN
		UPDATE Control.SourceFile
		SET	TransformDate = GETDATE(),
		[TransformParentLoadId] = @ParentLoadId,
		[ModifiedDate] = GETDATE()
		WHERE SourceFileId = @SourceFileId
	END;

	IF @Stream = 'STG2TRN'
	BEGIN
		UPDATE Control.SourceFile
		SET	TransformDate = GETDATE(),
		[TransformParentLoadId] = @ParentLoadId,
		[ModifiedDate] = GETDATE()
		WHERE SourceFileId = @SourceFileId
	END;

	IF @Stream = 'TRN2WAR'
	BEGIN
		UPDATE Control.SourceFile
		SET	WarehouseDate = GETDATE(),
		[WarehouseParentLoadId] = @ParentLoadId,
		[ModifiedDate] = GETDATE()
		WHERE SourceFileId = @SourceFileId
	END;

	IF @Stream = 'SRC2STG'
	BEGIN
		UPDATE Control.SourceFile
		SET	StageDate = GETDATE()
		,UnloadFile = 0
		,PurgeFromArchive = 0
		,FileUnloadedDate = NULL
		,FileUnloaded = 0
		,ArchivePurgedDate = NULL
		,ArchivePurged = 0
		WHERE SourceFileId = @SourceFileId
	END

	IF @Stream = 'CLN2MDS'
	BEGIN
		UPDATE Control.SourceFile
		SET	MDSDate = GETDATE()
		WHERE SourceFileId = @SourceFileId
	END

	IF @Stream = 'MDS2CLN'
	BEGIN
		UPDATE Control.SourceFile
		SET	MDSDate = GETDATE()
		WHERE SourceFileId = @SourceFileId
	END


	IF @Stream = 'CLN2WH'
	BEGIN
		UPDATE Control.SourceFile
		SET	WarehouseDate = GETDATE()
		,FileUnloaded = 0
		,UnloadFile = 0
		,IsLoaded = 1
		WHERE SourceFileId = @SourceFileId
	END


	IF @Stream = 'ANA2ARC'
	BEGIN
		UPDATE Control.SourceFile
		SET	WarehouseDate = GETDATE()
		,PurgeFromArchive = 0
		,ArchivePurged = 0
		WHERE SourceFileId = @SourceFileId
	END

	IF @Stream = 'STG2SCR'
	BEGIN
		UPDATE Control.SourceFile
		SET	ScrubDate = GETDATE()
		WHERE SourceFileId = @SourceFileId
	END

	IF @Stream = 'SCR2CLN'
	BEGIN
		UPDATE Control.SourceFile
		SET	CleanDate = GETDATE()
		WHERE SourceFileId = @SourceFileId
	END

	IF @Stream = 'CLN2OLP'
	BEGIN
		UPDATE Control.SourceFile
		SET	OLAPDate = GETDATE()
		,FileUnloaded = 0
		,UnloadFile = 0
		WHERE SourceFileId = @SourceFileId
	END
	
	IF @Stream = 'WAR2TAB'
	BEGIN
		UPDATE Control.SourceFile
		SET	OLAPDate = GETDATE()
		WHERE SourceFileId = @SourceFileId
	END


END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO

SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
PRINT N'Refreshing [Control].[ObtainLatestSourceFileIdByApplication]...';

GO
CREATE PROCEDURE [Control].[ObtainLatestSourceFileIdByApplication] 
	@ApplicationCode VARCHAR(80),
	--@ProcessStream VARCHAR(80), could possibly narrow down by Process Stream if Required
	@SourceFileId INT OUT
AS

DECLARE @ApplicationId int
SELECT @ApplicationId = [ApplicationId] FROM [Control].[Application]  WHERE Code = @ApplicationCode

BEGIN
	SET NOCOUNT ON;

	  SET @SourceFileId = (SELECT TOP (1) [SourceFileId] 
	  FROM [Control].[SourceFile]
	  WHERE [ApplicationId] = @ApplicationId 
	  ORDER BY [ModifiedDate] DESC )	

	SET NOCOUNT OFF;
END
GO

SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO

PRINT N'Refreshing [Audit].[CompareSRC2STGRowCounts]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
EXECUTE sp_refreshsqlmodule N'[Audit].[CompareSRC2STGRowCounts]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [Audit].[CompareSTG2CLNRowCounts]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
EXECUTE sp_refreshsqlmodule N'[Audit].[CompareSTG2CLNRowCounts]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [Audit].[InsertSourceFileProcessStream]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
EXECUTE sp_refreshsqlmodule N'[Audit].[InsertSourceFileProcessStream]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [Audit].[UpdateSourceFileProcessStream]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
EXECUTE sp_refreshsqlmodule N'[Audit].[UpdateSourceFileProcessStream]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [Control].[CheckSourceFilesIfStagedInClean]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
EXECUTE sp_refreshsqlmodule N'[Control].[CheckSourceFilesIfStagedInClean]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [Control].[InsertSourceFile]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
EXECUTE sp_refreshsqlmodule N'[Control].[InsertSourceFile]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [Control].[ObtainActivePartitionKeys]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
EXECUTE sp_refreshsqlmodule N'[Control].[ObtainActivePartitionKeys]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [Control].[ObtainChangedPartitionKeys]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
EXECUTE sp_refreshsqlmodule N'[Control].[ObtainChangedPartitionKeys]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [Control].[ObtainDistributionCodeFromSourceFile]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
EXECUTE sp_refreshsqlmodule N'[Control].[ObtainDistributionCodeFromSourceFile]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [Control].[ObtainDistributionsReadyToProcess]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
EXECUTE sp_refreshsqlmodule N'[Control].[ObtainDistributionsReadyToProcess]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [Control].[ObtainEntityId]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
EXECUTE sp_refreshsqlmodule N'[Control].[ObtainEntityId]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [Control].[ObtainFilesToUnload]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
EXECUTE sp_refreshsqlmodule N'[Control].[ObtainFilesToUnload]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [Control].[ObtainFilesToUnloadDataRetention]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
EXECUTE sp_refreshsqlmodule N'[Control].[ObtainFilesToUnloadDataRetention]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [Control].[ObtainPRBISourceFileId]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
EXECUTE sp_refreshsqlmodule N'[Control].[ObtainPRBISourceFileId]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [Control].[ObtainSourceFileId]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
EXECUTE sp_refreshsqlmodule N'[Control].[ObtainSourceFileId]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [Control].[ObtainSourceFileIdForBlobUpload]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
EXECUTE sp_refreshsqlmodule N'[Control].[ObtainSourceFileIdForBlobUpload]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [Control].[ObtainSourceFileIdForProcess]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
EXECUTE sp_refreshsqlmodule N'[Control].[ObtainSourceFileIdForProcess]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [Control].[ObtainUnprocessedSourceFiles]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
EXECUTE sp_refreshsqlmodule N'[Control].[ObtainUnprocessedSourceFiles]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [Control].[ProcessSourceFile]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
EXECUTE sp_refreshsqlmodule N'[Control].[ProcessSourceFile]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [Control].[ObtainBulkEntityId]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
EXECUTE sp_refreshsqlmodule N'[Control].[ObtainBulkEntityId]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
SET IDENTITY_INSERT [Control].[EntityType] ON;
GO
MERGE INTO [Control].[EntityType] AS Tgt
USING 
	(VALUES
	  --[EI],	[PETI],	[AI],	[IS],	[HMS],	[Name],										[Code],								[Description],											[Schema],				[Table],									[CreatedBy]							[CreatedDate]
		(1,		-1,		1,		1,		0,		N'Address',									N'dxaddress',						N'Address Table',										N'DATAXCHANGE',			N'DX_ADDRESS',								N'Simon.Whiteley@prsformusic.com',	SYSDATETIME()),
		(2,		-1,		1,		1,		0,		N'Country',									N'dxcountry',						N'DX Country Table',									N'DATAXCHANGE',			N'DX_COUNTRY',								N'Simon.Whiteley@prsformusic.com',	SYSDATETIME()),
		(3,		-1,		1,		1,		1,		N'StatementWorkDetail',						N'dxstmtwkdt',						N'DX Statement Work Details',							N'DATAXCHANGE',			N'DX_STMT_WKDT',							N'Simon.Whiteley@prsformusic.com',	SYSDATETIME()),
		(4,		-1,		1,		1,		0,		N'Society',									N'dxsociety',						N'DX Society Table',									N'DATAXCHANGE',			N'DX_SOCIETY',								N'Simon.Whiteley@prsformusic.com',	SYSDATETIME()),
		(6,		NULL,	1,		0,		0,		N'DimSociety',								N'dimSociety',						N'Online Statements Dim Society',						N'Warehouse',			N'DimSociety',								N'Simon.Whiteley@prsformusic.com',	SYSDATETIME()),
		(7,		NULL,	1,		0,		0,		N'DimMember',								N'dimMember',						N'Online Statements Dim Member',						N'Warehouse',			N'DimMember',								N'Simon.Whiteley@prsformusic.com',	SYSDATETIME()),
		(8,		NULL,	1,		0,		0,		N'DimDistribution',							N'dimDistribution',					N'Online Statements Dim Distribution',					N'Warehouse',			N'DimDistribution',							N'Simon.Whiteley@prsformusic.com',	SYSDATETIME()),
		(11,	NULL,	1,		0,		0,		N'FactDistributedRoyalty',					N'DistRoyalty',						N'Fact Distributed Royalty',							N'Warehouse',			N'FactDistributedRoyalty',					N'Simon.Whiteley@prsformusic.com',	SYSDATETIME()),
		(16,	-1,		1,		1,		0,		N'AffiliateStatement',						N'dxastmt',							N'Affilate Statement table',							N'DATAXCHANGE',			N'DX_A_STMT',								N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(17,	-1,		1,		1,		0,		N'AffiliateStatementEDetail',				N'dxastmtedet',						N'Affiliate Statement E Detail table',					N'DATAXCHANGE',			N'DX_A_STMT_EDET',							N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(18,	-1,		1,		1,		0,		N'AffiliateStatementFDetail',				N'dxastmtfdet',						N'Affiliate Statement F Detail table',					N'DATAXCHANGE',			N'DX_A_STMT_FDET',							N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(19,	-1,		1,		1,		0,		N'BroadcastRegion',							N'dxbroadcastregion',				N'DX broadcast region table',							N'DATAXCHANGE',			N'DX_BROADCAST_REGION',						N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(21,	-1,		1,		1,		0,		N'CAE',										N'dxcae',							N'Dx cae table',										N'DATAXCHANGE',			N'DX_CAE',									N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(22,	-1,		1,		1,		0,		N'Currency',								N'dxcurrency',						N'DX Currency table',									N'DATAXCHANGE',			N'DX_CURRENCY',								N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(23,	-1,		1,		1,		0,		N'Distribution',							N'dxdistribution',					N'DX Distribution table',								N'DATAXCHANGE',			N'DX_DISTRIBUTION',							N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(26,	-1,		1,		1,		0,		N'DistributionLoadControl',					N'dxdistributionloadcontrol',		N'DX Distribution Load Control table',					N'DATAXCHANGE',			N'DX_DISTRIBUTION_LOAD_CONTROL',			N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(27,	-1,		1,		1,		0,		N'EEAStatementDetails',						N'dxeeastmtdet',					N'DX EEA Statement Details Table',						N'DATAXCHANGE',			N'DX_EEA_STMT_DET',							N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(28,	-1,		1,		1,		0,		N'EEAStatementSummary',						N'dxeeastmtsumm',					N'DX EEA Statement Summary table',						N'DATAXCHANGE',			N'DX_EEA_STMT_SUMM',						N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(29,	-1,		1,		1,		0,		N'ElectronicStatement',						N'dxestmt',							N'DX ElectronicStatement table',						N'DATAXCHANGE',			N'DX_E_STMT',								N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(30,	-1,		1,		1,		0,		N'ElectronicStatementGeneralAdjustment',	N'dxestmtgnad',						N'DX Electronic statement general adjustment table',	N'DATAXCHANGE',			N'DX_E_STMT_GNAD',							N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(31,	-1,		1,		1,		0,		N'ElectronicStatementPaymentDetail',		N'dxestmtpymtdet',					N'DX Elecronic Statement Payment Details table',		N'DATAXCHANGE',			N'DX_E_STMT_PYMT_DET',						N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(32,	-1,		1,		1,		0,		N'Invoices',								N'dxinvoices',						N'DX Invoices table',									N'DATAXCHANGE',			N'DX_INVOICES',								N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(33,	-1,		1,		1,		0,		N'Licensees',								N'dxlicensees',						N'DX Licensees table',									N'DATAXCHANGE',			N'DX_LICENSEES',							N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(34,	-1,		1,		1,		0,		N'LicensingBodies',							N'dxlicensingbodies',				N'DX Licensing Bodies table',							N'DATAXCHANGE',			N'DX_LICENSING_BODIES',						N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(35,	-1,		1,		1,		0,		N'MajorMember',								N'dxmajormember',					N'DX Major member table',								N'DATAXCHANGE',			N'DX_MAJOR_MEMBER',							N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(36,	-1,		1,		1,		0,		N'Membership',								N'dxmembership',					N'DX Membership tables',								N'DATAXCHANGE',			N'DX_MEMBERSHIP',							N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(37,	-1,		1,		1,		0,		N'MembershipType',							N'dxmembershiptype',				N'DX Membership Type table',							N'DATAXCHANGE',			N'DX_MEMBERSHIP_TYPE',						N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(40,	-1,		1,		1,		0,		N'MemberSourceSocieties',					N'dxmembersourcesocieties',			N'DX Member Source Societies table',					N'DATAXCHANGE',			N'DX_MEMBER_SOURCE_SOCIETIES',				N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(41,	-1,		1,		1,		0,		N'MemberStatements',						N'dxmemberstatements',				N'DX Member Statements table',							N'DATAXCHANGE',			N'DX_MEMBER_STATEMENTS',					N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(42,	-1,		1,		1,		0,		N'StatementInstructionLicensingBodies',		N'dxmvstmtinstrlibos',				N'DX Statement Instruction Licensing Bodies table',		N'DATAXCHANGE',			N'DX_MV_STMT_INSTR_LIBOS',					N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(43,	-1,		1,		1,		0,		N'ProductTypes',							N'dxproducttypes',					N'DX Product Types table',								N'DATAXCHANGE',			N'DX_PRODUCT_TYPES',						N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(44,	-1,		1,		1,		0,		N'PaymentInstruction',						N'dxpymtinstruction',				N'DX PaymentInstruction table',							N'DATAXCHANGE',			N'DX_PYMT_INSTRUCTION',						N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(45,	-1,		1,		1,		0,		N'PaperStatement',							N'dxpstmt',							N'DX Paper Statement table',							N'DATAXCHANGE',			N'DX_P_STMT',								N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(46,	-1,		1,		1,		0,		N'PaperStatementAccountDetails',			N'dxpstmtaccdet',					N'DX Paper Statement Account Details table',			N'DATAXCHANGE',			N'DX_P_STMT_ACC_DET',						N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(47,	-1,		1,		1,		0,		N'PaperStatementCommissionInvoice',			N'dxpstmtcomminvoice',				N'DX Paper Statement Commission Invoice table',			N'DATAXCHANGE',			N'DX_P_STMT_COMM_INVOICE',					N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(48,	-1,		1,		1,		0,		N'PaperStatementGeneralAdjustmentLines',	N'dxpstmtgad',						N'DX Paper Statement General Adjustment Lines table',	N'DATAXCHANGE',			N'DX_P_STMT_GAD',							N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(49,	-1,		1,		1,		0,		N'PaperStatementNOPEarningLines',			N'dxpstmtnopearndet',				N'DX Paper Statement NOP Earning Lines table',			N'DATAXCHANGE',			N'DX_P_STMT_NOP_EARN_DET',					N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(50,	-1,		1,		1,		0,		N'PaperStatementNOPPaymentLines',			N'dxpstmtnoppymtdet',				N'DX Paper Statement NOP Payment Lines table',			N'DATAXCHANGE',			N'DX_P_STMT_NOP_PYMT_DET',					N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(55,	-1,		1,		1,		0,		N'PaperStatementTopFiveEarners',			N'dxpstmttopfiveearners',			N'DX Paper Statement Top Five Eaners table',			N'DATAXCHANGE',			N'DX_P_STMT_TOP_FIVE_EARNERS',				N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(56,	-1,		1,		1,		0,		N'PaperStatementVATLines',					N'dxpstmtvtdt',						N'DX Paper Stateent VAT Lines table',					N'DATAXCHANGE',			N'DX_P_STMT_VTDT',							N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(57,	-1,		1,		1,		0,		N'RollupMember',							N'dxrollupmember',					N'DX Rollup Member table',								N'DATAXCHANGE',			N'DX_ROLLUP_MEMBER',						N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(58,	-1,		1,		1,		0,		N'ScottishPostCodes',						N'dxscottishpostcodes',				N'DX Scottish PostCodes table',							N'DATAXCHANGE',			N'DX_SCOTTISH_POST_CODES',					N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(59,	-1,		1,		1,		0,		N'ServiceTypes',							N'dxservicetypes',					N'DX Service Types table',								N'DATAXCHANGE',			N'DX_SERVICE_TYPES',						N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(60,	-1,		1,		1,		0,		N'SocietyUsageLink',						N'dxsocietyusagelink',				N'DX Society Usage Link table',							N'DATAXCHANGE',			N'DX_SOCIETY_USAGE_LINK',					N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(63,	-1,		1,		1,		0,		N'StatementInstruction',					N'dxstatementinstruction',			N'DX Statement Instruction table',						N'DATAXCHANGE',			N'DX_STATEMENT_INSTRUCTION',				N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(64,	-1,		1,		1,		0,		N'StatementRun',							N'dxstatementrun',					N'DX Statement Run table',								N'DATAXCHANGE',			N'DX_STATEMENT_RUN',						N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(65,	-1,		1,		1,		0,		N'StandardTaxRate',							N'dxstdtaxrate',					N'DX Standard Tax Rate table',							N'DATAXCHANGE',			N'DX_STD_TAX_RATE',							N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(66,	-1,		1,		1,		0,		N'StatementInstructionSocieties',			N'dxstinsocieties',					N'DX Statement Instruction Societies table',			N'DATAXCHANGE',			N'DX_STIN_SOCIETIES',						N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(67,	-1,		1,		1,		0,		N'StatementAddition',						N'dxstmtaddt',						N'DX Statement addition table',							N'DATAXCHANGE',			N'DX_STMT_ADDT',							N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(68,	-1,		1,		1,		0,		N'StatementDetails',						N'dxstmtdetail',					N'DX Statement Detail table',							N'DATAXCHANGE',			N'DX_STMT_DETAIL',							N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(69,	-1,		1,		1,		0,		N'StatementDummyAddress',					N'dxstmtdummyaddress',				N'DX Statement Dummy Address table',					N'DATAXCHANGE',			N'DX_STMT_DUMMY_ADDRESS',					N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(70,	-1,		1,		1,		0,		N'Territory',								N'dxterritorytis',					N'DX Territory table',									N'DATAXCHANGE',			N'DX_TERRITORY_TIS',						N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(71,	-1,		1,		1,		0,		N'UsageCategories',							N'dxusagecategories',				N'DX Usage Categories table',							N'DATAXCHANGE',			N'DX_USAGE_CATEGORIES',						N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(72,	-1,		1,		1,		0,		N'UsageGroup',								N'dxusagegroup',					N'DX Usage Group table',								N'DATAXCHANGE',			N'DX_USAGE_GROUP',							N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(73,	-1,		1,		1,		0,		N'UsageGroupSummary',						N'dxusagegroupsumm',				N'DX Usage Group Summary table',						N'DATAXCHANGE',			N'DX_USAGE_GROUP_SUMM',						N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(74,	-1,		1,		1,		0,		N'UsageGroupType',							N'dxusagegrouptype',				N'DX Usage Group Type table',							N'DATAXCHANGE',			N'DX_USAGE_GROUP_TYPE',						N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(75,	-1,		1,		1,		0,		N'WithheldSocietyTax',						N'dxwithheldsocietytax',			N'DX Withheld society tax table',						N'DATAXCHANGE',			N'DX_WITHHELD_SOCIETY_TAX',					N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(76,	-1,		1,		1,		0,		N'PaperStatementAccountShare',				N'dxpstmtaccshare',					N'DX Paper Statement Account Share table',				N'DATAXCHANGE',			N'DX_P_STMT_ACC_SHARE',						N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(77,	NULL,	1,		0,		0,		N'AdjustmentLine',							N'AdjustmentLine',					N'Online Statements Adjustment Line',					N'Warehouse',			N'AdjustmentLine',							N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(78,	NULL,	1,		0,		0,		N'CommissionInvoice',						N'CommissionInvoice',				N'OnlineStatements Commission Invoice',					N'Warehouse',			N'CommissionInvoice',						N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(84,	NULL,	1,		0,		0,		N'CommissionInvoiceLine',					N'CommInvoiceLine',					N'Online Statements Comm Invoice Line',					N'Warehouse',			N'CommissionInvoiceLine',					N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(85,	NULL,	1,		0,		0,		N'DimAdjustmentReason',						N'dimAdjustmentReason',				N'Online Statements Adjustment Reason',					N'Warehouse',			N'DimAdjustmentReason',						N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(86,	NULL,	1,		0,		0,		N'DimBroadcaster',							N'dimBroadcaster',					N'Online Statements Dim Broadcaster',					N'Warehouse',			N'DimBroadcaster',							N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(87,	NULL,	1,		0,		0,		N'DimCountry',								N'dimCountry',						N'Online Statements Dim Country',						N'Warehouse',			N'DimCountry',								N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(90,	NULL,	1,		0,		0,		N'DimDate',									N'dimDate',							N'Online Statements Dim Date',							N'Warehouse',			N'DimDate',									N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(92,	NULL,	1,		0,		0,		N'DimInterestedParty',						N'dimInterestedParty',				N'Online Statements Dim Interested Party',				N'Warehouse',			N'DimInterestedParty',						N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(93,	NULL,	1,		0,		0,		N'DimInvoice',								N'dimInvoice',						N'Online Statements Dim Invoice',						N'Warehouse',			N'DimInvoice',								N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(94,	NULL,	1,		0,		0,		N'DimLicensingBody',						N'dimLicensingBody',				N'Online Statements Dim Licensing Body',				N'Warehouse',			N'DimLicensingBody',						N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(96,	NULL,	1,		0,		0,		N'DimProduct',								N'dimProduct',						N'Online Statements Dim Product',						N'Warehouse',			N'DimProduct',								N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(97,	NULL,	1,		0,		0,		N'DimRecording',							N'dimRecording',					N'Online Statements Dim Recording',						N'Warehouse',			N'DimRecording',							N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(98,	NULL,	1,		0,		0,		N'DimRoleType',								N'dimRoleType',						N'Online Statements Dim Role Type',						N'Warehouse',			N'DimRoleType',								N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(105,	NULL,	1,		0,		0,		N'DimRoyaltyClassification',				N'dimRoyaltyClass',					N'Dim Royalty Classification',							N'Warehouse',			N'DimRoyaltyClassification',				N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(106,	NULL,	1,		0,		0,		N'DimUsageClassification',					N'dimUsageClass',					N'Dim Usage Classification',							N'Warehouse',			N'DimUsageClassification',					N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(107,	NULL,	1,		0,		0,		N'DimUsageGroup',							N'dimUsageGroup',					N'Online Statements Dim Usage Group',					N'Warehouse',			N'DimUsageGroup',							N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(108,	NULL,	1,		0,		0,		N'DimWork',									N'dimWork',							N'Online Stateents Dim Work',							N'Warehouse',			N'DimWork',									N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(110,	NULL,	1,		0,		0,		N'GeneralRoyaltyLine',						N'GeneralRoyaltyLine',				N'General Loyalty Line',								N'Warehouse',			N'GeneralRoyaltyLine',						N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(112,	NULL,	1,		0,		0,		N'NopEarningLine',							N'NopEarningLine',					N'Nop Earning Line',									N'Warehouse',			N'NopEarningLine',							N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(113,	NULL,	1,		0,		0,		N'NopNoteText',								N'NopNoteText',						N'Nop Note Text ',										N'Warehouse',			N'NopNoteText',								N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(114,	NULL,	1,		0,		0,		N'NopPaymentLine',							N'NopPaymentLine',					N'Nop Payment Line',									N'Warehouse',			N'NopPaymentLine',							N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(115,	NULL,	1,		0,		0,		N'NoteText',								N'NoteText',						N'Note Text',											N'Warehouse',			N'NoteText',								N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(116,	NULL,	1,		0,		0,		N'OnlineStatement',							N'OnlineStatement',					N'Online Statement',									N'Warehouse',			N'OnlineStatement',							N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(117,	NULL,	1,		0,		0,		N'SourceStatement',							N'SourceStatement',					N'Source Statement',									N'Warehouse',			N'SourceStatement',							N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(119,	NULL,	1,		0,		0,		N'StatementLicensingBody',					N'StatemtLicensingBody',			N'Statement Licensing Body',							N'Warehouse',			N'StatementLicensingBody',					N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(120,	NULL,	1,		0,		0,		N'ThirdPartyStatementGroup',				N'ThrdPrtyStmtGroup',				N'Third Party Statement Group',							N'Warehouse',			N'ThirdPartyStatementGroup',				N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(126,	NULL,	1,		0,		0,		N'ThirdPartyStatementGroupOnlineStatement',	N'ThrdPrtyStmtGrpOlSt',				N'Third Party Statement Group Online Statement',		N'Warehouse',			N'ThirdPartyStatementGroupOnlineStatement',	N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(127,	NULL,	1,		0,		0,		N'UsageGroupRoyaltyLine',					N'UsageGrpRoyLine',					N'Usage Group Royalty Line',							N'Warehouse',			N'UsgaeGroupRoyaltyLine',					N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(128,	NULL,	1,		0,		0,		N'VATInvoice',								N'VATInvoice',						N'VATInvoice',											N'Warehouse',			N'VATInvoice',								N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(129,	NULL,	1,		0,		0,		N'VATInvoiceLine',							N'VATInvoiceLine',					N'VATInvoiceLine',										N'Warehouse',			N'VATInvoiceLine',							N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(130,	NULL,	1,		0,		0,		N'DimWorkAttributes',						N'dimWorkAttributes',				N'Online Statements Dim Work Attributes',				N'Warehouse',			N'DimWorkAttributes',						N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(131,	NULL,	1,		0,		0,		N'TempDistributedRoyalty',					N'TempDistributedRoyalty',			N'Temp Distributed Royalty',							N'Transform',			N'TempDistributedRoyalty',					N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(132,	NULL,	1,		0,		0,		N'TempDistributedRoyaltyWkdt',				N'TempDistributedRoyaltyWkdt',		N'Temp Distributed Royalty Wkdt',						N'Transform',			N'TempDistributedRoyaltyWkdt',				N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(133,	NULL,	1,		0,		0,		N'TempDistributedRoyaltyAddt',				N'TempDistributedRoyaltyAddt',		N'Temp Distributed Royalty Addt',						N'Transform',			N'TempDistributedRoyaltyAddt',				N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(134,	NULL,	1,		0,		0,		N'TempStatement',							N'TempStatement',					N'Temp Statement',										N'Transform',			N'TempStatement',							N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(135,	NULL,	1,		0,		0,		N'TempStatementShare',						N'TempStatementShare',				N'Temp Statement Share',								N'Transform ',			N'TempStatementShare',						N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(137,	NULL,	1,		1,		0,		N'ReportsText',								N'reportstext',						N'Reports Text',										N'DATAXCHANGE',			N'REPORTS_TEXT',							N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(138,	NULL,	1,		1,		0,		N'ReportTypes',								N'reporttypes',						N'Report Types',										N'DATAXCHANGE',			N'REPORT_TYPES',							N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(139,	NULL,	1,		1,		0,		N'StatementInstrumentLiboList',				N'dxstmtinstrlibolist',				N'StatementInstrumentLicensingBodyList table',			N'DATAXCHANGE',			N'DX_STMT_INSTR_LIBO_LIST',					N'Emma.Stewart@prsformusic.com',	SYSDATETIME()),
		(140,	NULL,	2,		0,		0,		N'BroadcastDataQualityFormat5',				N'brcdqformat5',					N'Broadcast DataQuality Format5',						N'BRCDataQuality',		N'BRC_DQ_Format5',							N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(143,	NULL,	2,		0,		0,		N'BroadcastDataQualityFormat50',			N'brcdqformat50',					N'Broadcast DataQuality Format50',						N'BRCDataQuality',		N'BRC_DQ_Format50',							N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(144,	NULL,	2,		0,		0,		N'BroadcastDataQualityFormat52',			N'brcdqformat52',					N'Broadcast DataQuality Format52',						N'BRCDataQuality',		N'BRC_DQ_Format52',							N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(146,	NULL,	2,		0,		0,		N'BroadcastDataQualityFormat303',			N'brcdqformat303',					N'Broadcast DataQuality Format303',						N'BRCDataQuality',		N'BRC_DQ_Format303',						N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(147,	NULL,	2,		0,		0,		N'BroadcastDataQualityFormat51',			N'brcdqformat51',					N'Broadcast DataQuality Format51',						N'BRCDataQuality',		N'BRC_DQ_Format51',							N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(148,	NULL,	2,		0,		0,		N'BroadcastDataQualityFormat51a',			N'brcdqformat51a',					N'Broadcast DataQuality Format51a',						N'BRCDataQuality',		N'BRC_DQ_Format51a',						N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(149,	NULL,	2,		0,		0,		N'BroadcastDataQualityFormatS1',			N'brcdqformats1',					N'Broadcast DataQuality FormatS1',						N'BRCDataQuality',		N'BRC_DQ_FormatS1',							N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(150,	NULL,	2,		0,		0,		N'BroadcastDataQualityFormatS2',			N'brcdqformats2',					N'Broadcast DataQuality FormatS2',						N'BRCDataQuality',		N'BRC_DQ_FormatS2',							N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(151,	NULL,	1,		0,		0,		N'TempFactDistributedRoyalty',				N'TempFactDistributedRoyalty',		N'Temp Fact Distributed Royalty',						N'Transform',			N'TempFactDistributedRoyalty',				N'Chris.Ellis@prsformusic.com',		SYSDATETIME()),
		(153,	NULL,	1,		1,		0,		N'StatementMembershipLiboList',				N'dxstmtmbrlibolist',				N'StatementMembershipLicensingBodyList table',			N'DATAXCHANGE',			N'DX_STMT_MBR_LIBO_LIST',					N'Jonathan.Myers@prsformusic.com',	SYSDATETIME()),
		(154,	NULL,	1,		0,		0,		N'TempPayeeStatement',						N'TempPayeeStatement',				N'Temp Payee Statement table',							N'Transform',			N'TempPayeeStatement',						N'vandana.bangera@prsformusic.com',	SYSDATETIME()),
		(155,	NULL,	1,		0,		0,		N'TempMbrStatement',						N'TempMbrStatement',				N'Temp Mbr Statement table',							N'Transform',			N'TempMbrStatement',						N'vandana.bangera@prsformusic.com',	SYSDATETIME()),		
		(157,	NULL,	3,		1,		0,		N'Dim File',								N'prbidimfile',						N'Oracle Dim_File table',								N'PRBI_DW',				N'DIM_FILE',								N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(158,	NULL,	3,		1,		0,		N'Dim Third Party Tree',					N'prbidimthirdpartytree',			N'Oracle Dim_ThirdPartyTree table',						N'PRBI_DW',				N'DIM_THIRD_PARTY_TREE',					N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(159,	NULL,	3,		0,		0,		N'Dim Date',								N'prbidimdate',						N'Oracle Dim_Date table',								N'PRBI_DW',				N'DIM_DATE',								N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(160,	NULL,	3,		1,		0,		N'Dim Production',							N'prbidimproduction',				N'Oracle Dim_Production table',							N'PRBI_DW',				N'DIM_PRODUCTION',							N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(163,	NULL,	3,		1,		0,		N'Dim Broadcaster',							N'prbidimbroadcaster',				N'Oracle Dim_Broadcaster table',						N'PRBI_DW',				N'DIM_BROADCASTER',							N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(164,	NULL,	3,		1,		0,		N'Dim Usage Of Work Status',				N'prbidimusageofworkstatus',		N'Oracle Dim_Usage_Of_Work_Status table',				N'PRBI_DW',				N'DIM_USAGE_OF_WORK_STATUS',				N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(169,	NULL,	3,		1,		0,		N'Dim Right Type',							N'prbidimrighttype',				N'Oracle Dim_Right_Type table',							N'PRBI_DW',				N'DIM_RIGHT_TYPE',							N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(172,	NULL,	3,		1,		0,		N'Dim Work',								N'prbidimwork',						N'Oracle Dim_Work table',								N'PRBI_DW',				N'DIM_WORK',								N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(173,	NULL,	3,		1,		0,		N'Dim Transmission Status',					N'prbidimtransmissionstatus',		N'Oracle Dim_Transmission_Status table',				N'PRBI_DW',				N'DIM_TRANSMISSION_STATUS',					N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(174,	NULL,	3,		1,		0,		N'Dim Usage Distribution Code',				N'prbidimusagedistributioncode',	N'Oracle Dim_Usage_Distribution_Code table',			N'PRBI_DW',				N'DIM_USAGE_DISTRIBUTION_CODE',				N'emma.stewart@prsformusic.com',	SYSDATETIME()),
	    (178,	NULL,	3,		1,		0,		N'Dim Music Origin',						N'prbidimmusicorigin',				N'Oracle Dim_Music_Origin table',						N'PRBI_DW',				N'DIM_MUSIC_ORIGIN',						N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(177,	NULL,	1,		0,		0,		N'TempMbrStatementSociety',					N'TempMbrStatementSociety',			N'Temp Mbr Statement Society table',					N'Transform',			N'TempMbrStatementSociety',					N'jonathan.myers@prsformusic.com',	SYSDATETIME()),
		(200,	-1,		4,		1,		0,		N'CodaBalance',								N'codabalance',						N'CODA oas_balances',									N'CodaStaging',			N'Coda_Balance',							N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(201,	-1,		4,		1,		0,		N'CodaCompany',								N'codacompany',						N'CODA oas_company',									N'CodaStaging',			N'Coda_Company',							N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(202,	-1,		4,		1,		0,		N'CodaDocument',							N'codadocument',					N'CODA oas_document',									N'CodaStaging',			N'Coda_Document',							N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(203,	-1,		4,		1,		0,		N'CodaTransactions',						N'codatransactions',				N'CODA Transactions oas_head joined oas_list',			N'CodaStaging',			N'Coda_Transactions',						N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(204,	-1,		4,		1,		0,		N'CodaElement',								N'codaelement',						N'CODA oas_element',									N'CodaStaging',			N'Coda_Element',							N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(205,	-1,		4,		1,		0,		N'CodaGroupList',							N'codagrouplist',					N'CODA oas_grplist joined oas_group',					N'CodaStaging',			N'Coda_GroupList',							N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(206,	-1,		4,		1,		0,		N'CodaTM1Budgets',							N'codatm1budgets',					N'TM1 Budgets csv export',								N'CodaStaging',			N'Coda_TM1Budgets',							N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(207,	-1,		4,		1,		0,		N'CodaTM1Forecasts',						N'codatm1forecasts',				N'TM1 Forecasts csv export',							N'CodaStaging',			N'Coda_TM1Forecasts',						N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(208,	-1,		4,		1,		0,		N'CodaMDS_EL1',								N'codamdsel1',						N'CODA MDS 2016 EL1 export',							N'CodaStaging',			N'Coda_MDS_EL1',							N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(209,	-1,		4,		1,		0,		N'CodaMDS_EL2',								N'codamdsel2',						N'CODA MDS 2016 EL2 export',							N'CodaStaging',			N'Coda_MDS_EL2',							N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(210,	-1,		4,		1,		0,		N'CodaMDS_EL12',							N'codamdsel12',						N'CODA MDS 2016 EL1 + EL2 export',						N'CodaStaging',			N'Coda_MDS_EL12',							N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(211,	-1,		4,		1,		0,		N'CodaUsrCapab',							N'codausrcapab',					N'CODA USer Capability Security Details',				N'CodaStaging',			N'Coda_UsrCapab',							N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(212,	-1,		4,		1,		0,		N'CodaMDS_EL123',							N'codamdsel123',						N'CODA MDS 2016 EL1 + EL2 +  EL3 export',			N'CodaStaging',			N'Coda_MDS_EL123',							N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(220,	-1,		4,		0,		0,		N'FactBalance',								N'factcodabalance',					N'Finance DataMart oas_balances',						N'CodaWarehouse',		N'Fact_Balance',							N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(221,	-1,		4,		0,		0,		N'DimCompany',								N'dimcompany',						N'Finance DataMart company dimension',					N'CodaWarehouse',		N'Dim_Company',								N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(222,	-1,		4,		0,		0,		N'DimDocument',								N'dimdocument',						N'Finance DataMart document dimension',					N'CodaWarehouse',		N'Dim_Document',							N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(223,	-1,		4,		0,		0,		N'FactTransactions',						N'facttransactions',				N'Finance DataMart Transactions',						N'CodaWarehouse',		N'Fact_Transactions',						N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(224,	-1,		4,		0,		0,		N'DimAccountsEL1',							N'dimaccountsel1',					N'Finance DataMart Coda EL1 Accounts Dimension',		N'CodaWarehouse',		N'Dim_Accounts_EL1',						N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(225,	-1,		4,		0,		0,		N'DimAccountsEL2',							N'dimaccountsel2',					N'Finance DataMart Coda EL2 Accounts Dimension',		N'CodaWarehouse',		N'Dim_Accounts_EL2',						N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(226,	-1,		4,		0,		0,		N'DimAccountsEL3',							N'dimaccountsel3',					N'Finance DataMart Coda EL3 Accounts Dimension',		N'CodaWarehouse',		N'Dim_Accounts_EL3',						N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(227,	-1,		4,		0,		0,		N'DimAccountsEL4',							N'dimaccountsel4',					N'Finance DataMart Coda EL4 Accounts Dimension',		N'CodaWarehouse',		N'Dim_Accounts_EL4',						N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(228,	-1,		4,		0,		0,		N'DimAccountsEL5',							N'dimaccountsel5',					N'Finance DataMart Coda EL5 Accounts Dimension',		N'CodaWarehouse',		N'Dim_Accounts_EL5',						N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(229,	-1,		4,		0,		0,		N'DimAccountsEL6',							N'dimaccountsel6',					N'Finance DataMart Coda EL6 Accounts Dimension',		N'CodaWarehouse',		N'Dim_Accounts_EL6',						N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(230,	-1,		4,		0,		0,		N'FactTM1Planning',							N'codatm1planning',					N'TM1 Budgets csv export',								N'CodaWarehouse',		N'Coda_TM1Planning',						N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(231,	-1,		4,		0,		0,		N'DimDMMappings',							N'dimdmmappings',					N'Finance DataMart Coda EL1+2+3 Dim_DM_Mappings',		N'CodaWarehouse',		N'Dim_DM_Mappings',						N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(232,	-1,		4,		0,		0,		N'DimCustomerScheme',						N'dimcustomerscheme',				N'EL1+2 Dim_CustomerScheme',							N'CodaWarehouse',		N'Dim_CustomerScheme',						N'tim.firmin@prsformusic.com',		SYSDATETIME()),
		(300,	NULL,	3,		0,		0,		N'DimBroadcaster',							N'DimBroadcaster',					N'Play to Pay DimBroadcaster table',					N'PipelneWarehouse',	N'DimBroadcaster',							N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(301,	NULL,	3,		0,		0,		N'DimFile',									N'DimFile',							N'Play to Pay DimFile table',							N'PipelneWarehouse',	N'DimFile',									N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(302,	NULL,	3,		0,		0,		N'DimMusicOrigin',							N'DimMusicOrigin',					N'Play to Pay DimMusicOrigin table',					N'PipelneWarehouse',	N'DimMusicOrigin',							N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(303,	NULL,	3,		0,		0,		N'DimProduction',							N'DimProduction',					N'Play to Pay DimProduction table',						N'PipelneWarehouse',	N'DimProduction',							N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(304,	NULL,	3,		0,		0,		N'DimThirdPartyTree',						N'DimThirdPartyTree',				N'Play to Pay DimThirdPartyTree table',					N'PipelneWarehouse',	N'DimThirdPartyTree',						N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(305,	NULL,	3,		0,		0,		N'DimTransmissionStatus',					N'DimTransmissionStatus',			N'Play to Pay DimTransmissionStatus table',				N'PipelneWarehouse',	N'DimTransmissionStatus',					N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(306,	NULL,	3,		0,		0,		N'DimUsageDistributionCode',				N'DimUsageDistributionCode',		N'Play to Pay DimUsageDistributionCode table',			N'PipelneWarehouse',	N'DimUsageDistributionCode',				N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(307,	NULL,	3,		0,		0,		N'DimUsageOfWorkStatus',					N'DimUsageOfWorkStatus',			N'Play to Pay DimUsageOfWorkStatus table',				N'PipelneWarehouse',	N'DimUsageOfWorkStatus',					N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(308,	NULL,	3,		0,		0,		N'DimWork',									N'DimWork',							N'Play to Pay DimWork table',							N'PipelneWarehouse',	N'DimWork',									N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(309,	NULL,	3,		0,		0,		N'FactUsageOfWork',							N'FactUsageOfWork',					N'Play to Pay FactUsageOfWork table',					N'PipelneWarehouse',	N'FactUsageOfWork',							N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(310,	NULL,	3,		1,		0,		N'Dim Time',								N'prbidimtime',						N'Oracle Dim_Time table',								N'PRBI_DW',				N'DIM_TIME',								N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(311,	NULL,	3,		0,		0,		N'DimTime',									N'DimTime',							N'Play to Pay DimTime table',							N'PipelneWarehouse',	N'DimTime',									N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(312,	NULL,	3,		1,		1,		N'FactUsageOfWorkPl',					N'prbifactusageofworkpl',			N'Oracle Fact_Usage_Of_Work table',						N'PRBI_DW',				N'FACT_USAGE_OF_WORK_PL',					N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(313,	NULL,	3,		1,		1,		N'FactUsageOfWorkWl',					N'prbifactusageofworkwl',			N'Oracle Fact_Usage_Of_Work table',						N'PRBI_DW',				N'FACT_USAGE_OF_WORK_WL',					N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(314,	NULL,	3,		0,		0,		N'TempFactUsageOfWorkExisting',				N'prbitempfactusageofworkexisting',	N'Oracle Fact_Usage_Of_Work table',						N'PipelineTransform',	N'TempFactUsageOfWorkExisting',				N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(315,	NULL,	3,		0,		0,		N'TempFactUsageOfWorkNew',					N'prbitempfactusageofworknew',		N'Oracle Fact_Usage_Of_Work table',						N'PipelineTransform',	N'TempFactUsageOfWorkNew',					N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(316,	NULL,	3,		0,		0,		N'TempFactUsageOfWorkChanged',				N'prbitempfactusageofworkchanged',	N'Oracle Fact_Usage_Of_Work table',						N'PipelineTransform',	N'TempFactUsageOfWorkChanged',				N'emma.stewart@prsformusic.com',	SYSDATETIME()),			
		(317,	NULL,	3,		1,		0,		N'Dim Role Type',							N'prbidimroletype',					N'Oracle DIM_ROLE_TYPE table',							N'PRBI_DW',				N'DIM_ROLE_TYPE',							N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(318,	NULL,	3,		1,		0,		N'Dim Ownership Ip',						N'prbidimownershipip',				N'Oracle DIM_OWNERSHIP_IP table',						N'PRBI_DW',				N'DIM_OWNERSHIP_IP',						N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(319,	NULL,	3,		1,		0,		N'Fact Work Ownership Ip',					N'prbifactworkownershipip',			N'Oracle FACT_WORK_OWNERSHIP_IP table',					N'PRBI_DW',				N'FACT_WORK_OWNERSHIP_IP',					N'emma.stewart@prsformusic.com',	SYSDATETIME()),	
		(320,	NULL,	3,		0,		0,		N'DimRoleType',								N'DimRoleType',						N'Play to Pay DimRoleType table',						N'PipelneWarehouse',	N'DimRoleType',								N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(321,	NULL,	3,		0,		0,		N'DimOwnershipIp',							N'DimOwnershipIp',					N'Play to Pay DimOwnershipIp table',					N'PipelneWarehouse',	N'DimOwnershipIp',							N'emma.stewart@prsformusic.com',	SYSDATETIME()),
		(322,	NULL,	3,		0,		0,		N'FactWorkOwnershipIp',						N'FactWorkOwnershipIp',				N'Play to Pay FactWorkOwnershipIp table',				N'PipelneWarehouse',	N'FactWorkOwnershipIp',						N'emma.stewart@prsformusic.com',	SYSDATETIME())
	) AS Src
	(
		 EntityTypeId
		,ParentEntityTypeId
		,ApplicationId
		,IsSourceEntity
		,[HasMultipleSourceFile]
		,Name
		,Code
		,[Description]
		,[Schema]
		,[Table]
		,[CreatedBy]
        ,[CreatedDate]
	)
	ON Tgt.EntityTypeId = Src.EntityTypeId

-- Update matched rows
WHEN MATCHED THEN
	UPDATE
	SET
		[ApplicationId]			= Src.[ApplicationId],
		[IsSourceEntity]	    = Src.[IsSourceEntity],
		[HasMultipleSourceFile]	= Src.[HasMultipleSourceFile],
		[Name]					= Src.[Name],
		[Code]					= Src.[Code],
		[ParentEntityTypeId]	= Src.[ParentEntityTypeId],
		[Description]			= Src.[Description],
		[Schema]				= Src.[Schema],
		[Table]					= Src.[Table],
		[CreatedBy]				= Src.[CreatedBy],
        [CreatedDate]			= Src.[CreatedDate]

-- Insert new rows
WHEN NOT MATCHED BY TARGET THEN
	INSERT
		(
			[EntityTypeId],
			[ApplicationId],
			[IsSourceEntity],
			[HasMultipleSourceFile],
			[Name],				
			[Code],				
			[ParentEntityTypeId],
			[Description],		
			[Schema],			
			[Table],				
			[CreatedBy],			
			[CreatedDate]		
		)
	VALUES
		(
			Src.[EntityTypeId],
			Src.[ApplicationId],
			Src.[IsSourceEntity],
			Src.[HasMultipleSourceFile],
			Src.[Name],
			Src.[Code],
			src.[ParentEntityTypeId],
			src.[Description],
			src.[Schema],
			src.[Table],
			src.[CreatedBy],			
			src.[CreatedDate]
		)

--  Delete rows that are in the target but not the source
WHEN NOT MATCHED BY SOURCE THEN
	DELETE;
GO
SET IDENTITY_INSERT [Control].[EntityType] OFF;



SET IDENTITY_INSERT [Control].[LoadStatusType] ON;
GO
MERGE INTO [Control].[LoadStatusType] AS Tgt
USING 
	(VALUES
		(1,'In Progress','Load In Progress','InProgress','PostDeployment Script', SYSDATETIME()),
		(2,'Successful','Load Completed Successfully','Success','PostDeployment Script',SYSDATETIME()),
		(3,'Failed','Load Failed','Failed','PostDeployment Script',SYSDATETIME()),
		(4,'Reset','Load flagged for reset','Reset','PostDeployment Script',SYSDATETIME()),
		(5,'Already Run','Load Already Run','AlreadyRun','PostDeployment Script',SYSDATETIME())
	) AS Src
	(
		[LoadStatusTypeId],
		[Name],
		[Description],
		[ShortName],
		[UpdateUser],
		[UpdateTime]
	)
	ON Tgt.[LoadStatusTypeId] = Src.[LoadStatusTypeId]

-- Update matched rows
WHEN MATCHED THEN
	UPDATE
	SET
		[Name]			   = Src.[Name],
		[Description]	   = Src.[Description],
		[ShortName]		   = src.[ShortName],
		[UpdateUser]	   = Src.[UpdateUser],
		[UpdateTime]	   = Src.[UpdateTime]
-- Insert new rows
WHEN NOT MATCHED BY TARGET THEN
	INSERT
		(
			[LoadStatusTypeId],
			[Name],			
			[Description],	
			[ShortName],		
			[UpdateUser],		
			[UpdateTime]	
		)
	VALUES
		(
			Src.[LoadStatusTypeId],
			Src.[Name],			
			Src.[Description],	
			src.[ShortName],		
			src.[UpdateUser],		
			src.[UpdateTime]	
		)

--  Delete rows that are in the target but not the source
WHEN NOT MATCHED BY SOURCE THEN
	DELETE;
GO
SET IDENTITY_INSERT [Control].[LoadStatusType] OFF;


SET IDENTITY_INSERT [Control].[ProcessStream] ON;
GO
MERGE INTO [Control].[ProcessStream] AS Tgt
USING 
	(VALUES
		(1,'EXT2STG',	'Blob External To Stage', ''	,1),
		(2,'STG2CLN',	'Stage To Clean', '' ,3),
		(3,'CLN2TRN',	'Clean To Transform','',4),
		(4,'TRN2WAR',	'Transform To Warehouse','',6),
		(5,'REF2TRN',	'Reference To Transform','',7),
		(6,'CLN2WAR',	'Clean To Warehouse','',8),
		(7,'TRN2TRN',	'Transform To Transform','',9),
		(8,'TRN2REJ',	'Transform To Reject','',10),
		(9,'SRC2FILE',	'Source To File Extract','',11),
		(10,'STG2TRN',	'Stage to Transform','',4),
		(11,'FILE2EXT',	'File Extract To Blob External','',0),
		(12,'SRC2STG',	'Source System to Staging','',2),
		(13,'WAR2TAB',	'Warehouse To Tabular','',12)
	) AS Src
	(	
		[ProcessStreamId],
		[Code],
		[Name],
		[Description],
		[ProcessStreamOrder]
	)
	ON Tgt.[ProcessStreamId] = Src.[ProcessStreamId]

-- Update matched rows
WHEN MATCHED THEN
	UPDATE
	SET
		 [Code]					= Src.[Code]
		,[Name]					= src.[Name]
		,[Description]			= src.[Description]
		,[ProcessStreamOrder]	= src.[ProcessStreamOrder]

-- Insert new rows
WHEN NOT MATCHED BY TARGET THEN
	INSERT
		(
			[ProcessStreamId],
			[Code],
			[Name],
			[Description],
			[ProcessStreamOrder]
		)
	VALUES
		(
			Src.[ProcessStreamId],
			Src.[Code],
			Src.[Name],
			src.[Description],
			src.[ProcessStreamOrder]
		)

-- Delete rows that are in the target but not the source
WHEN NOT MATCHED BY SOURCE THEN
	DELETE;
GO
SET IDENTITY_INSERT [Control].[ProcessStream] OFF;

SET IDENTITY_INSERT [Control].[SourceFileType] ON;
GO
MERGE INTO [Control].[SourceFileType] AS Tgt
USING 
	(VALUES
		(1, 'DX','DataXchange Distribution Context', 'DX Partition', 'Out',0,''),
		(2,'UNK','UNKNOWN','Unknown','OUT',0,'UNKNOWN'),
		(3,'SAS','SASOWN','SASOWN','OUT',0,''),
		(4,'PRBI','PRBI oracle data waehouse','PRBI','OUT',0,''),
		(5,'CODA','CODA Data Warehouse','CODA','OUT',0,''),
		(6,'TM1','TM1 Planning - Forecasts Budgets','TM1','OUT',0,''),
		(7,'MDS','MDS2016 File Load','MDS','OUT',0,'')
		) AS Src
	(
		[SourceFileTypeId],	
		[Code],
		[Description],
		[Name],
		[Direction],
		[32BitStageRequired],
		[Collection]
	)
	ON Tgt.[SourceFileTypeId] = Src.[SourceFileTypeId]

-- Update matched rows
WHEN MATCHED THEN
	UPDATE
	SET	
		[Code]					= Src.[Code],
		[Description]			= Src.[Description],
		[Name]					= Src.[Name],
		[Direction]				= Src.[Direction],
		[32BitStageRequired]	= src.[32BitStageRequired],
		[Collection]			= src.[Collection]

-- Insert new rows
WHEN NOT MATCHED BY TARGET THEN
	INSERT
		(
			[SourceFileTypeId],	
			[Code],
			[Description],
			[Name],
			[Direction],
			[32BitStageRequired],
			[Collection]          
		)
	VALUES
		(
			SRC.[SourceFileTypeId],	
			SRC.[Code],
			SRC.[Description],
			SRC.[Name],
			SRC.[Direction],
			SRC.[32BitStageRequired],
			SRC.[Collection]
		)

-- Delete rows that are in the target but not the source
WHEN NOT MATCHED BY SOURCE THEN
	DELETE;
GO
SET IDENTITY_INSERT [Control].[SourceFileType] OFF;

SET IDENTITY_INSERT [Control].[Application] ON;
GO
MERGE INTO [Control].[Application] AS Tgt
USING 
	(VALUES
		(1,'Data Experience Online Statements','DEOS','Data Experience Solution', null, null, null ,'Azure DW ','DX', SYSDATETIME()),
		(2,'BroadcastDataQuality','BRDDQ','DataQuality Solution for AV', null, null, null , 'DataMart', 'DQ',SYSDATETIME()),
		(3,'Broadcast Play to Pay','BRDPTP','Play to Pay Solution for Broadcast 1 and 2', null, null, null , 'Azure DW', 'BR',SYSDATETIME()),
		(4,'Finance DataMart','FDM','Finance DataMart for CODA and TM1', null, null, null , 'DataMart', 'FDM',SYSDATETIME())
	) AS Src
	(
		[ApplicationId],
		[Name],
     	[Code],
		[Description],
		[Priority],		   
		[UpTimeHours],	   
		[ETLType],		   
        [WarehouseType],
		[Prefix],
		[CreatedDate]
	)
	ON Tgt.[ApplicationId] = Src.[ApplicationId]

-- Update matched rows
WHEN MATCHED THEN
	UPDATE
	SET
		[Name]			   = Src.[Name],
		[Code]			   = Src.[Code],
		[Description]	   = Src.[Description],
		[Priority]		   = Src.[Priority],
		[UpTimeHours]	   = Src.[UpTimeHours],
		[ETLType]		   = Src.[ETLType],
		[WarehouseType]	   = Src.[WarehouseType],
		[Prefix]		   = Src.[Prefix]
-- Insert new rows
WHEN NOT MATCHED BY TARGET THEN
	INSERT
		(
			[ApplicationId],
			[Name],
     		[Code],
			[Description],
			[WarehouseType],
			[Prefix]		
		)
	VALUES
		(
			Src.[ApplicationId],
			Src.[Name],
			Src.[Code],
			Src.[Description],
			Src.[WarehouseType],
			Src.[Prefix]
		)
--  Delete rows that are in the target but not the source
WHEN NOT MATCHED BY SOURCE THEN
	DELETE;
GO
SET IDENTITY_INSERT [Control].[Application] OFF;


SET IDENTITY_INSERT [Config].[Parameter] ON;
GO

MERGE INTO [Config].[Parameter] AS Tgt
USING 
	(
	VALUES
		(1,'ETLState', 'Holds ETL state', NULL, NULL, NULL ,'Ready')
	) 
	AS Src
	(
		[ParmaterId],      
		[ParamaterCode],      
		[ParamaterShortDesc], 
		[ParamaterDesc],      
		[ParameterType],      
		[ParameterValue],     
		[ParameterDataType]  
	)
	ON Tgt.ParmaterId = Src.ParmaterId

-- Update matched rows
WHEN MATCHED THEN
	UPDATE
	SET
		[ParamaterCode]      = Src.[ParamaterCode],     
		[ParamaterShortDesc] = Src.[ParamaterShortDesc], 
		[ParamaterDesc]      = Src.[ParamaterDesc], 
		[ParameterType]      = Src.[ParameterType],     
		[ParameterValue]     = Src.[ParameterValue],    
		[ParameterDataType]  = Src.[ParameterDataType]  
-- Insert new rows
WHEN NOT MATCHED BY TARGET THEN
	INSERT
		(
			[ParmaterId],      
			[ParamaterCode],      
			[ParamaterShortDesc], 
			[ParamaterDesc],      
			[ParameterType],      
			[ParameterValue],     
			[ParameterDataType]  	
		)
	VALUES
		(
			Src.[ParmaterId],	 
			Src.[ParamaterCode],     
			Src.[ParamaterShortDesc],
			Src.[ParamaterDesc], 
			Src.[ParameterType],     
			Src.[ParameterValue],    
			Src.[ParameterDataType]  
		)
--  Delete rows that are in the target but not the source
WHEN NOT MATCHED BY SOURCE THEN
	DELETE;
GO
SET IDENTITY_INSERT [Config].[Parameter] OFF;


SET IDENTITY_INSERT [Control].[CleanseRuleType] ON;
GO
MERGE INTO [Control].CleanseRuleType AS Tgt
USING 
	(VALUES
		(10, 'ReplaceWith'),
		(20, 'RemoveTrailing'),
		(30, 'ToUpper'),
		(40, 'ToLower'),
		(50, 'Capitalise'),
		(60, 'RemoveNonNumbers')
	) AS Src
	(
		  CleanseRuleTypeId
		 ,Name    
	)
	ON Tgt.CleanseRuleTypeId = Src.CleanseRuleTypeId

-- Update matched rows
WHEN MATCHED THEN
	UPDATE
	SET
		  Name = Src.Name

-- Insert new rows
WHEN NOT MATCHED BY TARGET THEN
	INSERT
		(
			 CleanseRuleTypeId
			,Name      
		)
	VALUES
		(
			 Src.CleanseRuleTypeId
			,Src.Name 
		)

-- Delete rows that are in the target but not the source
WHEN NOT MATCHED BY SOURCE THEN
DELETE;
GO

SET IDENTITY_INSERT [Control].CleanseRuleType OFF;

SET IDENTITY_INSERT Control.DataQualityRuleType ON;
GO
MERGE INTO Control.DataQualityRuleType AS Tgt
USING 
	(VALUES
		(10, 'Regex'),
		(20, 'Range'),
		(30, 'Containts'),
		(40, 'BeginsWith'),
		(50, 'Pattern'),
		(60, 'MDM')
	) AS Src
	(
		  DataQualityRuleTypeId
		 ,Name    
	)
	ON Tgt.DataQualityRuleTypeId = Src.DataQualityRuleTypeId

-- Update matched rows
WHEN MATCHED THEN
	UPDATE
	SET
		  Name = Src.Name

-- Insert new rows
WHEN NOT MATCHED BY TARGET THEN
	INSERT
		(
			 DataQualityRuleTypeId
			,Name      
		)
	VALUES
		(
			 Src.DataQualityRuleTypeId
			,Src.Name 
		);

-- Delete rows that are in the target but not the source
--WHEN NOT MATCHED BY SOURCE THEN
--	DELETE;

SET IDENTITY_INSERT Control.DataQualityRuleType OFF;
MERGE INTO DataQuality.HarmoniseRule AS Tgt
USING 
	(VALUES
		 (1,'PostCode','ToUpper',1)
		,(2,'Group','ToUpper',1)
			
	) AS Src
	(
	   [HarmoniseRuleId]
      ,[ColumnName]
      ,[CleanseType]
      ,[EntityTypeID]
	)
	ON Tgt.[HarmoniseRuleId] = Src.[HarmoniseRuleId]

-- Update matched rows
WHEN MATCHED THEN
UPDATE 
   SET [HarmoniseRuleId]	=		src.[HarmoniseRuleId]
      ,[ColumnName]			=		src.[ColumnName]
      ,[CleanseType]		=		src.[CleanseType]
      ,[EntityTypeID]		=		src.[EntityTypeID]
      

-- Insert new rows
WHEN NOT MATCHED BY TARGET THEN
	INSERT
		(
	   [HarmoniseRuleId]
      ,[ColumnName]
      ,[CleanseType]
      ,[EntityTypeID]
     
		)
	VALUES
		(
		 src.[HarmoniseRuleId]
		,src.[ColumnName]
		,src.[CleanseType]
		,src.[EntityTypeID]
		
		);

-- Delete rows that are in the target but not the source
--WHEN NOT MATCHED BY SOURCE THEN
--	DELETE;

	--SET IDENTITY_INSERT  DataQuality.HarmoniseRule  OFF;

SET IDENTITY_INSERT DataQuality.DataIntegrityType ON 
GO

MERGE INTO DataQuality.DataIntegrityType AS Tgt
USING 
	(VALUES
		(0, 'N', 'Not Checked'),
		(1, 'P', 'Passed'),
		(2, 'F', 'Failed')
	) AS Src
	(
		 IntegrityTypeId
		,Code
		,Name
	)
	ON Tgt.IntegrityTypeId = Src.IntegrityTypeId

-- Update matched rows
WHEN MATCHED THEN
	UPDATE
	SET
		 Code				= Src.Code
		,Name		= Src.Name

-- Insert new rows
WHEN NOT MATCHED BY TARGET THEN
	INSERT
		(
			 IntegrityTypeId
			,Code
			,Name
		)
	VALUES
		(
			 Src.IntegrityTypeId
			,Src.Code
			,Src.Name
		)

-- Delete rows that are in the target but not the source
WHEN NOT MATCHED BY SOURCE THEN
	DELETE;
GO
	SET IDENTITY_INSERT  DataQuality.DataIntegrityType  OFF

SET IDENTITY_INSERT DataQuality.Screen ON 
GO
MERGE INTO DataQuality.Screen AS Tgt
USING 
	(VALUES
		-- Column rules

		-- Format 5 Line 10

		(1,'Series Indicator','Valid Series Indicator Check',NULL,NULL,'DataQuality Format5 Line10',	1,	'SeriesIndicator NOT IN(''Y'', ''N'', '''')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(2,'Production/Series Name','Production/Series Name Mandatory Column Check',NULL,NULL,'DataQuality Format5 Line10',	1,	'ProductionName = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(3,'Series Number','Series Number Population Check',NULL,NULL,'DataQuality Format5 Line10',	1,	'SeriesIndicator = ''Y'' AND SeriesNumber = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(4,'Episode Name','Episode Name Population Check',NULL,NULL,'DataQuality Format5 Line10',	1,	'SeriesIndicator = ''Y'' AND EpisodeNumber = '''' AND EpisodeName = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(5,'Episode Number','Episode Number Population Check',NULL,NULL,'DataQuality Format5 Line10',	1,	'SeriesIndicator = ''Y'' AND EpisodeNumber = '''' AND EpisodeName = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(6,'Transmission Station','Transmission Station Population Check',NULL,NULL,'DataQuality Format5 Line10',	1,	'TransmissionStation = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(7,'Daily Transmission Schedule Date','Daily Transmission Schedule Date Population Check',NULL,NULL,'DataQuality Format5 Line10',	1,	'DailyTransmissionScheduleDate = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(8,'Transmission Time','Transmission Time Population Check',NULL,NULL,'DataQuality Format5 Line10',	1,	'TransmissionTime = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(9,'Production Company','Production Company Population Check',NULL,NULL,'DataQuality Format5 Line10',	1,	'ProductionSourceIndicator = ''C'' AND ProductionCompany = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(10,'First Transmission Indicator','Valid First Transmission Indicator Check',NULL,NULL,'DataQuality Format5 Line10',	1,	'FirstTransmissionIndicator NOT IN(''Y'', ''N'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		 --Reference rule previously removed as MDS not available.
		(11,'Music Content Indicator','Valid Music Content Indicator Check',NULL,NULL,'DataQuality Format5 Line10',	1,	'ENT.MusicContentIndicator IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.MusicContent MC ON ENT.MusicContentIndicator = MC.Code',	NULL, NULL, 'AV'),
		(12,'Production Type','Valid Production Type Check',NULL,NULL,'DataQuality Format5 Line10',	1,	'ENT.ProductionType IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.ProductionType PT ON ENT.ProductionType = PT.Code',	NULL, NULL, 'AV'),
		(13,'Production Source Indicator','Valid Production Source Indicator Check',NULL,NULL,'DataQuality Format5 Line10',	1,	'ENT.ProductionSourceIndicator IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.ProductionSource PS ON ENT.ProductionSourceIndicator = PS.Code',	NULL, NULL, 'AV'),
		(14,'Domestic International Indicator','Valid Domestic International Indicator Check',NULL,NULL,'DataQuality Format5 Line10',	1,	'ENT.DomesticInternationalIndicator IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.DomesticInternationalTransmission DI ON ENT.DomesticInternationalIndicator = DI.Code',	NULL, NULL, 'AV'),
		 --Column rule
		(15,'MCPS Blanket Indicator','Valid MCPS Blanket Indicator Check',NULL,NULL,'DataQuality Format5 Line10',	1,	'MCPSBlanketIndicator NOT IN(''Y'', ''N'', '''')',NULL, NULL,	NULL, NULL, 'AV'),
		-- Reference rule
		(16,'Local Network Indicator','Valid Local Network Indicator Check',NULL,NULL,'DataQuality Format5 Line10',	1,	'ENT.LocalNetworkIndicator IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.LocalNetworkBroadcast LN ON ENT.LocalNetworkIndicator = LN.Code',	NULL, NULL, 'AV'),
		(17,'Territory Code','Valid Territory Check',NULL,NULL,'DataQuality Format5 Line10',	1,	'ENT.TerritoryCode IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.Territory T ON ENT.TerritoryCode = T.Code',	NULL, NULL, 'AV'),
	--	 Column rule
		(18,'Valid Amendment Indicator','Valid Amendment Indicator Check',NULL,NULL,'DataQuality Format5 Line10',	1,	'AmendmentIndicator NOT IN(''Y'', ''N'', '''')',NULL, NULL,	NULL, NULL, 'AV'),
		
		
		-- Format 5 Line 20
		(30,'Production Reference Number','Production Reference Number Check',NULL,NULL,'DataQuality Format5 Line20',	1,	'ProductionReferenceNumber = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(31,'Music Item Sequence','Music Item Sequence Check',NULL,NULL,'DataQuality Format5 Line20',	1,	'MusicItemSequence = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(32,'Product Album Promo Title','Product Album Promo Title Check',NULL,NULL,'DataQuality Format5 Line20',	1,	'ProductAlbumPromoTitle = '''' AND MusicOriginClassification IN(''C'',''L'')  AND ProductCatalogueNumber  = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(33,'Product Label','Product Label Check',NULL,NULL,'DataQuality Format5 Line20',	1,	'ProductLabel = '''' AND MusicOriginClassification IN(''C'',''L'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(34,'Product Catalogue Number','Product Catalogue Number Check',NULL,NULL,'DataQuality Format5 Line20',	1,	'ProductCatalogueNumber = '''' AND MusicOriginClassification IN(''C'',''L'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(35,'Music Duration','Music Duration Check',NULL,NULL,'DataQuality Format5 Line20',	1,	'ISNULL(MusicDuration,0) <= 0',	NULL,	NULL,	NULL, NULL, 'AV'),
		(36,'Music Usage Classification','Music Usage Classification Check',NULL,NULL,'DataQuality Format5 Line20',	1,	'MusicUsageClassification NOT IN(''B'',''F'',''M'',''S'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(37,'Music Origin Classification','Music Origin Classification Check',NULL,NULL,'DataQuality Format5 Line20',	1,	'MusicOriginClassification NOT IN(''C'',''L'',''P'',''R'',''T'',''V'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(38,'Prior Approval Indicator','Prior Approval Indicator Check',NULL,NULL,'DataQuality Format5 Line20',	1,	'PriorApprovalIndicator NOT IN(''N'',''Y'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(39,'Music Commission Flag','Music Commission Flag Check',NULL,NULL,'DataQuality Format5 Line20',	1,	'MusicCommissionFlag NOT IN(''N'',''Y'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(40,'Licensing Status Of Commissioned Music','Licensing Status Of Commissioned Music Check', NULL,NULL,'DataQuality Format5 Line20',	1,	'LicensingStatusofCommissionedMusic NOT IN(''N'',''Y'') AND MusicCommissionFlag = ''Y''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(41,'Music Composer/Author','Music Composer/Author Check', NULL,NULL,'DataQuality Format5 Line20',	1,	'MusicComposerAuthor = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(42,'Music Publisher','Music Publisher Check', NULL,NULL,'DataQuality Format5 Line20',	1,	'MusicPublisher = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(43,'Music Performer','Music Performer Check', NULL,NULL,'DataQuality Format5 Line20',	1,	'MusicPerformer = '''' AND MusicOriginClassification = ''C''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(44,'Music Dubbing Flag','Music Dubbing Flag Check', NULL,NULL,'DataQuality Format5 Line20',	1,	'MusicDubbingFlag NOT IN(''Y'',''N'')',	NULL,	NULL,	NULL, NULL, 'AV'),



		--Format 5 Line 00

		(60,'Extract Date','Extract Date Check',NULL,NULL,'DataQuality Format5 Line00',	1,	'ExtractDate IS NULL',	NULL,	NULL,	NULL, NULL, 'AV'),
		(61,'Supplier Name','Supplier Name Check',NULL,NULL,'DataQuality Format5 Line00',	1,	'SupplierName = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(62,'Version Number','Version Number Check',NULL,NULL,'DataQuality Format5 Line00',	1,	'VersionNumber = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(63,'SupplierId','SupplierId Check',NULL,NULL,'DataQuality Format5 Line00',	1,	'SupplierId = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(64,'Log Type','Log Type Check',NULL,NULL,'DataQuality Format5 Line00',	1,	'LogType = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),

		--Format 5 Line 99

		(70,'Number Of Records','Number Of Records Check',NULL,NULL,'DataQuality Format5 Line99',	1,	'RecordCount IS NULL',	NULL,	NULL,	NULL, NULL, 'AV'),

	
		-- Format 303 Line 10

		--(1,'Series Indicator','Valid Series Indicator Check',NULL,NULL,'DataQuality Format303 Line10',	1,	'SeriesIndicator NOT IN(''Y'', ''N'', '''')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(71,'Production/Series Name','Production/Series Name Mandatory Column Check',NULL,NULL,'DataQuality Format303 Line10',	1,	'ProductionName = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		--(3,'Series Number','Series Number Population Check',NULL,NULL,'DataQuality Format303 Line10',	1,	'SeriesIndicator = ''Y'' AND SeriesNumber = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(72,'Episode Name','Episode Name Population Check',NULL,NULL,'DataQuality Format303 Line10',	1,	'EpisodeNumber = '''' AND EpisodeName = '''' AND ProductionName = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(73,'Episode Number','Episode Number Population Check',NULL,NULL,'DataQuality Format303 Line10',	1,	'EpisodeNumber = '''' AND EpisodeName = '''' AND ProductionName = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(74,'Transmission Station','Transmission Station Population Check',NULL,NULL,'DataQuality Format303 Line10',	1,	'TransmissionStation = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		--(75,'Transmission Date','Transmission Date Population Check',NULL,NULL,'DataQuality Format303 Line10',	1,	'TransmissionDate = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(76,'Transmission Time','Transmission Time Population Check',NULL,NULL,'DataQuality Format303 Line10',	1,	'TransmissionTime = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		--(77,'Production Company','Production Company Population Check',NULL,NULL,'DataQuality Format303 Line10',	1,	'ProductionSourceIndicator = ''C'' AND ProductionCompany = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		--(10,'First Transmission Indicator','Valid First Transmission Indicator Check',NULL,NULL,'DataQuality Format303 Line10',	1,	'FirstTransmissionIndicator NOT IN(''Y'', ''N'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		 
		 --Reference rule previously removed as MDS not available.
		
		(78,'Music Content Indicator','Valid Music Content Indicator Check',NULL,NULL,'DataQuality Format303 Line10',	1,	'ENT.MusicContentIndicator IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.MusicContent MC ON ENT.MusicContentIndicator = MC.Code',	NULL, NULL, 'AV'),
		(79,'Production Type','Valid Production Type Check',NULL,NULL,'DataQuality Format303 Line10',	1,	'ENT.ProductionType IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.ProductionType PT ON ENT.ProductionType = PT.Code',	NULL, NULL, 'AV'),
		(80,'Production Source Indicator','Valid Production Source Indicator Check',NULL,NULL,'DataQuality Format303 Line10',	1,	'ENT.ProductionSourceIndicator IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.ProductionSource PS ON ENT.ProductionSourceIndicator = PS.Code',	NULL, NULL, 'AV'),
		--(14,'Domestic International Indicator','Valid Domestic International Indicator Check',NULL,NULL,'DataQuality Format303 Line10',	1,	'ENT.DomesticInternationalIndicator IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.DomesticInternationalTransmission DI ON ENT.DomesticInternationalIndicator = DI.Code',	NULL, NULL, 'AV'),
		 --Column rule
		(81,'MCPS Blanket Indicator','Valid MCPS Blanket Indicator Check',NULL,NULL,'DataQuality Format303 Line10',	1,	'MCPSBlanketIndicator NOT IN(''Y'', ''N'')',NULL, NULL,	NULL, NULL, 'AV'),
		-- Reference rule
		(82,'Local Network Indicator','Valid Local Network Indicator Check',NULL,NULL,'DataQuality Format303 Line10',	1,	'ENT.LocalNetworkIndicator IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.LocalNetworkBroadcast LN ON ENT.LocalNetworkIndicator = LN.Code',	NULL, NULL, 'AV'),
		--(17,'Territory Code','Valid Territory Check',NULL,NULL,'DataQuality Format303 Line10',	1,	'ENT.TerritoryCode IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.Territory T ON ENT.TerritoryCode = T.Code',	NULL, NULL, 'AV'),
	
	--	 Column rule
		(83,'Valid Amendment Indicator','Valid Amendment Indicator Check',NULL,NULL,'DataQuality Format303 Line10',	1,	'AmendmentIndicator NOT IN(''Y'', ''N'')',NULL, NULL,	NULL, NULL, 'AV'),
		
		
		-- Format 303 Line 20
		(84,'Production Reference Number','Production Reference Number Check',NULL,NULL,'DataQuality Format303 Line20',	1,	'ProductionReferenceNumber = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(85,'Music Item Sequence','Music Item Sequence Check',NULL,NULL,'DataQuality Format303 Line20',	1,	'MusicItemSequence = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		--(86,'Product Album Promo Title','Product Album Promo Title Check',NULL,NULL,'DataQuality Format303 Line20',	1,	'ProductAlbumPromoTitle = '''' AND MusicOriginClassification IN(''C'',''L'')  AND ProductCatalogueNumber  = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		--(87,'Product Label','Product Label Check',NULL,NULL,'DataQuality Format303 Line20',	1,	'ProductLabel = '''' AND MusicOriginClassification IN(''C'',''L'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		--(88,'Product Catalogue Number','Product Catalogue Number Check',NULL,NULL,'DataQuality Format303 Line20',	1,	'ProductCatalogueNumber = '''' AND MusicOriginClassification IN(''C'',''L'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(89,'Music Duration','Music Duration Check',NULL,NULL,'DataQuality Format303 Line20',	1,	'ISNULL(MusicDuration,0) <= 0',	NULL,	NULL,	NULL, NULL, 'AV'),
		(90,'Music Usage Classification','Music Usage Classification Check',NULL,NULL,'DataQuality Format303 Line20',	1,	'MusicUsageClassification NOT IN(''B'',''F'',''S'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(91,'Music Origin Classification','Music Origin Classification Check',NULL,NULL,'DataQuality Format303 Line20',	1,	'MusicOriginClassification NOT IN(''C'',''L'',''P'',''R'',''T'',''V'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(92,'Prior Approval Indicator','Prior Approval Indicator Check',NULL,NULL,'DataQuality Format303 Line20',	1,	'PriorApprovalIndicator NOT IN(''N'',''Y'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		--(93,'Music Commission Flag','Music Commission Flag Check',NULL,NULL,'DataQuality Format303 Line20',	1,	'MusicCommissionFlag NOT IN(''N'',''Y'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(94,'Licensing Status Of Commissioned Music','Licensing Status Of Commissioned Music Check', NULL,NULL,'DataQuality Format303 Line20',	1,	'LicensingStatusofCommissionedMusic NOT IN(''N'',''Y'') AND MusicCommissionFlag = ''Y''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(95,'Music Composer/Author','Music Composer/Author Check', NULL,NULL,'DataQuality Format303 Line20',	1,	'MusicComposerAuthor = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(96,'Music Publisher','Music Publisher Check', NULL,NULL,'DataQuality Format303 Line20',	1,	'MusicPublisher = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(97,'Music Performer','Music Performer Check', NULL,NULL,'DataQuality Format303 Line20',	1,	'MusicPerformer = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		--(44,'Music Dubbing Flag','Music Dubbing Flag Check', NULL,NULL,'DataQuality Format303 Line20',	1,	'MusicDubbingFlag NOT IN(''Y'',''N'')',	NULL,	NULL,	NULL, NULL, 'AV'),



		--Format 303 Line 00

		(98,'Extract Date','Extract Date Check',NULL,NULL,'DataQuality Format303 Line00',	1,	'ExtractDate IS NULL',	NULL,	NULL,	NULL, NULL, 'AV'),
		(99,'Supplier Name','Supplier Name Check',NULL,NULL,'DataQuality Format303 Line00',	1,	'SupplierName = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(100,'Version Number','Version Number Check',NULL,NULL,'DataQuality Format303 Line00',	1,	'VersionNumber = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(101,'SupplierId','SupplierId Check',NULL,NULL,'DataQuality Format303 Line00',	1,	'SupplierId = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(102,'Log Type','Log Type Check',NULL,NULL,'DataQuality Format303 Line00',	1,	'LogType = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),

		--Format 303 Line 99

		(103,'Number Of Records','Number Of Records Check',NULL,NULL,'DataQuality Format303 Line99',	1,	'RecordCount IS NULL',	NULL,	NULL,	NULL, NULL, 'AV'),

		-- Format 50 Line 10

		(104,'Series Indicator','Valid Series Indicator Check',NULL,NULL,'DataQuality Format50 Line10',	1,	'SeriesIndicator NOT IN(''Y'', ''N'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(105,'Production/Series Name','Production/Series Name Mandatory Column Check',NULL,NULL,'DataQuality Format50 Line10',	1,	'ProductionName = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		--(106,'Series Number','Series Number Population Check',NULL,NULL,'DataQuality Format50 Line10',	1,	'SeriesIndicator = ''Y'' AND SeriesNumber = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(107,'Episode Name','Episode Name Population Check',NULL,NULL,'DataQuality Format50 Line10',	1,	'SeriesIndicator = ''Y'' AND EpisodeNumber = '''' AND EpisodeName = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(108,'Episode Number','Episode Number Population Check',NULL,NULL,'DataQuality Format50 Line10',	1,	'SeriesIndicator = ''Y'' AND EpisodeNumber = '''' AND EpisodeName = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(109,'Transmission Station','Transmission Station Population Check',NULL,NULL,'DataQuality Format50 Line10',	1,	'TransmissionStation = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(110,'Daily Transmission Schedule Date','Daily Transmission Schedule Date Population Check',NULL,NULL,'DataQuality Format50 Line10',	1,	'DailyTransmissionScheduleDate = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(111,'Transmission Time','Transmission Time Population Check',NULL,NULL,'DataQuality Format50 Line10',	1,	'TransmissionTime = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(112,'Production Company','Production Company Population Check',NULL,NULL,'DataQuality Format50 Line10',	1,	'ProductionSourceIndicator = ''C'' AND ProductionCompany = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(113,'First Transmission Indicator','Valid First Transmission Indicator Check',NULL,NULL,'DataQuality Format50 Line10',	1,	'FirstTransmissionIndicator NOT IN(''Y'', ''N'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		 --Reference rule previously removed as MDS not available.
		(114,'Music Content Indicator','Valid Music Content Indicator Check',NULL,NULL,'DataQuality Format50 Line10',	1,	'ENT.MusicContentIndicator IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.MusicContent MC ON ENT.MusicContentIndicator = MC.Code',	NULL, NULL, 'AV'),
		(115,'Production Type','Valid Production Type Check',NULL,NULL,'DataQuality Format50 Line10',	1,	'ENT.ProductionType IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.ProductionType PT ON ENT.ProductionType = PT.Code',	NULL, NULL, 'AV'),
		(116,'Production Source Indicator','Valid Production Source Indicator Check',NULL,NULL,'DataQuality Format50 Line10',	1,	'ENT.ProductionSourceIndicator IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.ProductionSource PS ON ENT.ProductionSourceIndicator = PS.Code',	NULL, NULL, 'AV'),
		--(117,'Domestic International Indicator','Valid Domestic International Indicator Check',NULL,NULL,'DataQuality Format50 Line10',	1,	'ENT.DomesticInternationalIndicator IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.DomesticInternationalTransmission DI ON ENT.DomesticInternationalIndicator = DI.Code',	NULL, NULL, 'AV'),
		 --Column rule
		(118,'MCPS Blanket Indicator','Valid MCPS Blanket Indicator Check',NULL,NULL,'DataQuality Format50 Line10',	1,	'MCPSBlanketIndicator NOT IN(''Y'', ''N'', '''')',NULL, NULL,	NULL, NULL, 'AV'),
		-- Reference rule
		(119,'Local Network Indicator','Valid Local Network Indicator Check',NULL,NULL,'DataQuality Format50 Line10',	1,	'ENT.LocalNetworkIndicator IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.LocalNetworkBroadcast LN ON ENT.LocalNetworkIndicator = LN.Code',	NULL, NULL, 'AV'),
		--(120,'Territory Code','Valid Territory Check',NULL,NULL,'DataQuality Format50 Line10',	1,	'ENT.TerritoryCode IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.Territory T ON ENT.TerritoryCode = T.Code',	NULL, NULL, 'AV'),
	--	 Column rule
		--(121,'Valid Amendment Indicator','Valid Amendment Indicator Check',NULL,NULL,'DataQuality Format50 Line10',	1,	'AmendmentIndicator NOT IN(''Y'', ''N'', '''')',NULL, NULL,	NULL, NULL, 'AV'),
		
		
		-- Format 50 Line 20
		(122,'Production Reference Number','Production Reference Number Check',NULL,NULL,'DataQuality Format50 Line20',	1,	'ProductionReferenceNumber = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(123,'Music Item Sequence','Music Item Sequence Check',NULL,NULL,'DataQuality Format50 Line20',	1,	'MusicItemSequence = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(124,'Product Album Promo Title','Product Album Promo Title Check',NULL,NULL,'DataQuality Format50 Line20',	1,	'ProductAlbumPromoTitle = '''' AND MusicOriginClassification IN(''C'',''L'')  AND ProductCatalogueNumber  = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(125,'Product Label','Product Label Check',NULL,NULL,'DataQuality Format50 Line20',	1,	'ProductLabel = '''' AND MusicOriginClassification IN(''C'',''L'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(126,'Product Catalogue Number','Product Catalogue Number Check',NULL,NULL,'DataQuality Format50 Line20',	1,	'ProductCatalogueNumber = '''' AND MusicOriginClassification IN(''C'',''L'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(127,'Music Duration','Music Duration Check',NULL,NULL,'DataQuality Format50 Line20',	1,	'ISNULL(MusicDuration,0) <= 0',	NULL,	NULL,	NULL, NULL, 'AV'),
		(128,'Music Usage Classification','Music Usage Classification Check',NULL,NULL,'DataQuality Format50 Line20',	1,	'MusicUsageClassification NOT IN(''B'',''F'',''M'',''S'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(129,'Music Origin Classification','Music Origin Classification Check',NULL,NULL,'DataQuality Format50 Line20',	1,	'MusicOriginClassification NOT IN(''C'',''L'',''P'',''R'',''T'',''V'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(130,'Prior Approval Indicator','Prior Approval Indicator Check',NULL,NULL,'DataQuality Format50 Line20',	1,	'PriorApprovalIndicator NOT IN(''N'',''Y'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(131,'Music Commission Flag','Music Commission Flag Check',NULL,NULL,'DataQuality Format50 Line20',	1,	'MusicCommissionFlag NOT IN(''N'',''Y'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(132,'Licensing Status Of Commissioned Music','Licensing Status Of Commissioned Music Check', NULL,NULL,'DataQuality Format50 Line20',	1,	'LicensingStatusofCommissionedMusic NOT IN(''N'',''Y'') AND MusicCommissionFlag = ''Y''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(133,'Music Composer/Author','Music Composer/Author Check', NULL,NULL,'DataQuality Format50 Line20',	1,	'MusicComposerAuthor = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(134,'Music Publisher','Music Publisher Check', NULL,NULL,'DataQuality Format50 Line20',	1,	'MusicPublisher = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(135,'Music Performer','Music Performer Check', NULL,NULL,'DataQuality Format50 Line20',	1,	'MusicPerformer = '''' AND MusicOriginClassification = ''C''',	NULL,	NULL,	NULL, NULL, 'AV'),
		--(136,'Music Dubbing Flag','Music Dubbing Flag Check', NULL,NULL,'DataQuality Format50 Line20',	1,	'MusicDubbingFlag NOT IN(''Y'',''N'')',	NULL,	NULL,	NULL, NULL, 'AV'),



		--Format 50 Line 00

		(137,'Extract Date','Extract Date Check',NULL,NULL,'DataQuality Format50 Line00',	1,	'ExtractDate IS NULL',	NULL,	NULL,	NULL, NULL, 'AV'),
		(138,'Supplier Name','Supplier Name Check',NULL,NULL,'DataQuality Format50 Line00',	1,	'SupplierName = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(139,'Version Number','Version Number Check',NULL,NULL,'DataQuality Format50 Line00',	1,	'VersionNumber = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(140,'SupplierId','SupplierId Check',NULL,NULL,'DataQuality Format50 Line00',	1,	'SupplierId = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(141,'Log Type','Log Type Check',NULL,NULL,'DataQuality Format50 Line00',	1,	'LogType = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),

		--Format 50 Line 99

		(142,'Number Of Records','Number Of Records Check',NULL,NULL,'DataQuality Format50 Line99',	1,	'RecordCount IS NULL',	NULL,	NULL,	NULL, NULL, 'AV'),


		-- Format 52 Line 10

		(143,'Series Indicator','Valid Series Indicator Check',NULL,NULL,'DataQuality Format52 Line10',	1,	'SeriesIndicator NOT IN(''Y'', ''N'', '''')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(144,'Production/Series Name','Production/Series Name Mandatory Column Check',NULL,NULL,'DataQuality Format52 Line10',	1,	'ProductionName = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(145,'Series Number','Series Number Population Check',NULL,NULL,'DataQuality Format52 Line10',	1,	'SeriesIndicator = ''Y'' AND SeriesNumber = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(146,'Episode Name','Episode Name Population Check',NULL,NULL,'DataQuality Format52 Line10',	1,	'SeriesIndicator = ''Y'' AND EpisodeNumber = '''' AND EpisodeName = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(147,'Episode Number','Episode Number Population Check',NULL,NULL,'DataQuality Format52 Line10',	1,	'SeriesIndicator = ''Y'' AND EpisodeNumber = '''' AND EpisodeName = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(148,'Transmission Station','Transmission Station Population Check',NULL,NULL,'DataQuality Format52 Line10',	1,	'TransmissionStation = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(149,'Daily Transmission Schedule Date','Daily Transmission Schedule Date Population Check',NULL,NULL,'DataQuality Format52 Line10',	1,	'DailyTransmissionScheduleDate = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(150,'Transmission Time','Transmission Time Population Check',NULL,NULL,'DataQuality Format52 Line10',	1,	'TransmissionTime = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(151,'Production Company','Production Company Population Check',NULL,NULL,'DataQuality Format52 Line10',	1,	'ProductionSourceIndicator = ''C'' AND ProductionCompany = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(152,'First Transmission Indicator','Valid First Transmission Indicator Check',NULL,NULL,'DataQuality Format52 Line10',	1,	'FirstTransmissionIndicator NOT IN(''Y'', ''N'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		 --Reference rule previously removed as MDS not available.
		(153,'Music Content Indicator','Valid Music Content Indicator Check',NULL,NULL,'DataQuality Format52 Line10',	1,	'ENT.MusicContentIndicator IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.MusicContent MC ON ENT.MusicContentIndicator = MC.Code',	NULL, NULL, 'AV'),
		(154,'Production Type','Valid Production Type Check',NULL,NULL,'DataQuality Format52 Line10',	1,	'ENT.ProductionType IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.ProductionType PT ON ENT.ProductionType = PT.Code',	NULL, NULL, 'AV'),
		(155,'Production Source Indicator','Valid Production Source Indicator Check',NULL,NULL,'DataQuality Format52 Line10',	1,	'ENT.ProductionSourceIndicator IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.ProductionSource PS ON ENT.ProductionSourceIndicator = PS.Code',	NULL, NULL, 'AV'),
		--(156,'Domestic International Indicator','Valid Domestic International Indicator Check',NULL,NULL,'DataQuality Format52 Line10',	1,	'ENT.DomesticInternationalIndicator IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.DomesticInternationalTransmission DI ON ENT.DomesticInternationalIndicator = DI.Code',	NULL, NULL, 'AV'),
		 --Column rule
		--(157,'MCPS Blanket Indicator','Valid MCPS Blanket Indicator Check',NULL,NULL,'DataQuality Format52 Line10',	1,	'MCPSBlanketIndicator NOT IN(''Y'', ''N'', '''')',NULL, NULL,	NULL, NULL, 'AV'),
		-- Reference rule
		(158,'Local Network Indicator','Valid Local Network Indicator Check',NULL,NULL,'DataQuality Format52 Line10',	1,	'ENT.LocalNetworkIndicator IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.LocalNetworkBroadcast LN ON ENT.LocalNetworkIndicator = LN.Code',	NULL, NULL, 'AV'),
		(159,'Territory Code','Valid Territory Check',NULL,NULL,'DataQuality Format52 Line10',	1,	'ENT.TerritoryCode IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.Territory T ON ENT.TerritoryCode = T.Code',	NULL, NULL, 'AV'),
	--	 Column rule
		--(160,'Valid Amendment Indicator','Valid Amendment Indicator Check',NULL,NULL,'DataQuality Format52 Line10',	1,	'AmendmentIndicator NOT IN(''Y'', ''N'', '''')',NULL, NULL,	NULL, NULL, 'AV'),
		
		
		-- Format 52 Line 20
		(161,'Production Reference Number','Production Reference Number Check',NULL,NULL,'DataQuality Format52 Line20',	1,	'ProductionReferenceNumber = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(162,'Music Item Sequence','Music Item Sequence Check',NULL,NULL,'DataQuality Format52 Line20',	1,	'MusicItemSequence = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(163,'Product Album Promo Title','Product Album Promo Title Check',NULL,NULL,'DataQuality Format52 Line20',	1,	'ProductAlbumPromoTitle = '''' AND MusicOriginClassification IN(''C'',''L'')  AND ProductCatalogueNumber  = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(164,'Product Label','Product Label Check',NULL,NULL,'DataQuality Format52 Line20',	1,	'ProductLabel = '''' AND MusicOriginClassification IN(''C'',''L'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(165,'Product Catalogue Number','Product Catalogue Number Check',NULL,NULL,'DataQuality Format52 Line20',	1,	'ProductCatalogueNumber = '''' AND MusicOriginClassification IN(''C'',''L'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(166,'Music Duration','Music Duration Check',NULL,NULL,'DataQuality Format52 Line20',	1,	'ISNULL(MusicDuration,0) <= 0',	NULL,	NULL,	NULL, NULL, 'AV'),
		(167,'Music Usage Classification','Music Usage Classification Check',NULL,NULL,'DataQuality Format52 Line20',	1,	'MusicUsageClassification NOT IN(''B'',''F'',''M'',''S'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(168,'Music Origin Classification','Music Origin Classification Check',NULL,NULL,'DataQuality Format52 Line20',	1,	'MusicOriginClassification NOT IN(''C'',''L'',''P'',''R'',''T'',''V'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		--(169,'Prior Approval Indicator','Prior Approval Indicator Check',NULL,NULL,'DataQuality Format52 Line20',	1,	'PriorApprovalIndicator NOT IN(''N'',''Y'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(170,'Music Commission Flag','Music Commission Flag Check',NULL,NULL,'DataQuality Format52 Line20',	1,	'MusicCommissionFlag NOT IN(''N'',''Y'')',	NULL,	NULL,	NULL, NULL, 'AV'),
		(171,'Licensing Status Of Commissioned Music','Licensing Status Of Commissioned Music Check', NULL,NULL,'DataQuality Format52 Line20',	1,	'LicensingStatusofCommissionedMusic NOT IN(''N'',''Y'') AND MusicCommissionFlag = ''Y''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(172,'Music Composer/Author','Music Composer/Author Check', NULL,NULL,'DataQuality Format52 Line20',	1,	'MusicComposerAuthor = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(173,'Music Publisher','Music Publisher Check', NULL,NULL,'DataQuality Format52 Line20',	1,	'MusicPublisher = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(174,'Music Performer','Music Performer Check', NULL,NULL,'DataQuality Format52 Line20',	1,	'MusicPerformer = '''' AND MusicOriginClassification = ''C''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(175,'Music Dubbing Flag','Music Dubbing Flag Check', NULL,NULL,'DataQuality Format52 Line20',	1,	'MusicDubbingFlag NOT IN(''Y'',''N'')',	NULL,	NULL,	NULL, NULL, 'AV'),



		--Format 52 Line 00

		(176,'Extract Date','Extract Date Check',NULL,NULL,'DataQuality Format52 Line00',	1,	'ExtractDate IS NULL',	NULL,	NULL,	NULL, NULL, 'AV'),
		(177,'Supplier Name','Supplier Name Check',NULL,NULL,'DataQuality Format52 Line00',	1,	'SupplierName = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(178,'Version Number','Version Number Check',NULL,NULL,'DataQuality Format52 Line00',	1,	'VersionNumber = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(179,'SupplierId','SupplierId Check',NULL,NULL,'DataQuality Format52 Line00',	1,	'SupplierId = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),
		(180,'Log Type','Log Type Check',NULL,NULL,'DataQuality Format52 Line00',	1,	'LogType = ''''',	NULL,	NULL,	NULL, NULL, 'AV'),

		--Format 52 Line 99

		(181,'Number Of Records','Number Of Records Check',NULL,NULL,'DataQuality Format52 Line99',	1,	'RecordCount IS NULL',	NULL,	NULL,	NULL, NULL, 'AV'),

		-- Format 51 Line 00

		(182, 'Extract Date','Extract Date Check',NULL,NULL,'DataQuality Format51 Line00',	1,	'ExtractDate IS NULL',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(183, 'Supplier Name','Supplier Name Check',NULL,NULL,'DataQuality Format51 Line00',	1,	'SupplierName = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(184,'Version Number','Version Number Check',NULL,NULL,'DataQuality Format51 Line00',	1,	'VersionNumber = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(185,'SupplierId','SupplierId Check',NULL,NULL,'DataQuality Format51 Line00',	1,	'SupplierId = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(186,'Log Type','Log Type Check',NULL,NULL,'DataQuality Format51 Line00',	1,	'LogType = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),

		--Format 51 line 10


		(188,'Production Number','Production Number Check',NULL,NULL,'DataQuality Format51 Line10',	1,	'ProductionNumber = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(189,'Production/Series Name','Production/Series Name Mandatory Column Check',NULL,NULL,'DataQuality Format51 Line10',	1,	'ProductionName = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(190,'Transmission Station','Transmission Station Population Check',NULL,NULL,'DataQuality Format51 Line10',	1,	'TransmissionStation = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(191,'Daily Transmission Schedule Date','Daily Transmission Schedule Date Population Check',NULL,NULL,'DataQuality Format51 Line10',	1,	'DailyTransmissionScheduleDate = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(192,'Transmission Time','Transmission Time Population Check',NULL,NULL,'DataQuality Format51 Line10',	1,	'TransmissionTime = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
	 

	    --Reference rule previously removed as MDS not available.
		(193,'Music Content Indicator','Valid Music Content Indicator Check',NULL,NULL,'DataQuality Format51 Line10',	1,	'ENT.MusicContentIndicator IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.MusicContent MC ON ENT.MusicContentIndicator = MC.Code',	NULL, NULL, 'Radio'),
		(194,'Production Type','Valid Production Type Check',NULL,NULL,'DataQuality Format51 Line10',	1,	'ENT.ProductionType IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.ProductionType PT ON ENT.ProductionType = PT.Code',	NULL, NULL, 'Radio'),
	    (195,'Domestic International Indicator','Valid Domestic International Indicator Check',NULL,NULL,'DataQuality Format51 Line10',	1,	'ENT.DomesticInternationalIndicator IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.DomesticInternationalTransmission DI ON ENT.DomesticInternationalIndicator = DI.Code',	NULL, NULL, 'Radio'),
		 
		-- Reference rule
		(196,'Local Network Indicator','Valid Local Network Indicator Check',NULL,NULL,'DataQuality Format51 Line10',	1,	'ENT.LocalNetworkIndicator IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.LocalNetworkBroadcast LN ON ENT.LocalNetworkIndicator = LN.Code',	NULL, NULL, 'Radio'),
		(197,'Territory Code','Valid Territory Check',NULL,NULL,'DataQuality Format51 Line10',	1,	'ENT.TerritoryCode IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.Territory T ON ENT.TerritoryCode = T.Code',	NULL, NULL, 'Radio'),
	   --Column rule
		(198,'Valid Amendment Indicator','Valid Amendment Indicator Check',NULL,NULL,'DataQuality Format51 Line10',	1,	'AmendmentIndicator NOT IN(''Y'', ''N'', '''')',NULL, NULL,	NULL, NULL, 'Radio'),
		
		--Format 51 line 20


		(199,'Production Reference Number','Production Reference Number Check',NULL,NULL,'DataQuality Format51 Line20',	1,	'ProductionReferenceNumber = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(200,'Music Title','Music Title Check',NULL,NULL,'DataQuality Format51 Line20',	1,	'MusicTitle = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(201,'Music Item Sequence','Music Item Sequence Check',NULL,NULL,'DataQuality Format51 Line20',	1,	'MusicItemSequence = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(202,'Product Album Promo Title','Product Album Promo Title Check',NULL,NULL,'DataQuality Format51 Line20',	1,	'ProductAlbumPromoTitle = '''' AND MusicOriginClassification IN(''C'',''L'')  AND ProductCatalogueNumber  = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(203,'Product Label','Product Label Check',NULL,NULL,'DataQuality Format51 Line20',	1,	'ProductLabel = '''' AND MusicOriginClassification IN(''C'',''L'')',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(204,'Product Catalogue Number','Product Catalogue Number Check',NULL,NULL,'DataQuality Format51 Line20',	1,	'ProductCatalogueNumber = '''' AND MusicOriginClassification IN(''C'',''L'')',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(205,'Music Duration','Music Duration Check',NULL,NULL,'DataQuality Format51 Line20',	1,	'ISNULL(MusicDuration,0) <= 0',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(206,'Music Usage Classification','Music Usage Classification Check',NULL,NULL,'DataQuality Format51 Line20',	1,	'MusicUsageClassification NOT IN(''B'',''F'',''M'',''S'')',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(207,'Music Origin Classification','Music Origin Classification Check',NULL,NULL,'DataQuality Format51 Line20',	1,	'MusicOriginClassification NOT IN(''C'',''L'',''P'',''R'',''T'',''V'')',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(208,'Prior Approval Indicator','Prior Approval Indicator Check',NULL,NULL,'DataQuality Format51 Line20',	1,	'PriorApprovalIndicator NOT IN(''N'',''Y'')',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(209,'Music Commission Flag','Music Commission Flag Check',NULL,NULL,'DataQuality Format51 Line20',	1,	'MusicCommissionFlag NOT IN(''N'',''Y'')',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(210,'Music Composer/Author','Music Composer/Author Check', NULL,NULL,'DataQuality Format51 Line20',	1,	'MusicComposerAuthor = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(211,'Music Publisher','Music Publisher Check', NULL,NULL,'DataQuality Format51 Line20',	1,	'MusicPublisher = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(212,'Music Performer','Music Performer Check', NULL,NULL,'DataQuality Format51 Line20',	1,	'MusicPerformer = '''' AND MusicOriginClassification = ''C''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(213,'Music Dubbing Flag','Music Dubbing Flag Check', NULL,NULL,'DataQuality Format51 Line20',	1,	'MusicDubbingFlag NOT IN(''Y'',''N'')',	NULL,	NULL,	NULL, NULL, 'Radio'),

		--Format 51 line 99


		(214,'Number Of Records','Number Of Records Check',NULL,NULL,'DataQuality Format51 Line99',	1,	'NumberOfRecords IS NULL',	NULL,	NULL,	NULL, NULL, 'Radio'),

		
			-- Format 51a Line 00

		(215, 'Extract Date','Extract Date Check',NULL,NULL,'DataQuality Format51a Line00',	1,	'ExtractDate IS NULL',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(216, 'Supplier Name','Supplier Name Check',NULL,NULL,'DataQuality Format51a Line00',	1,	'SupplierName = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(217,'Version Number','Version Number Check',NULL,NULL,'DataQuality Format51a Line00',	1,	'VersionNumber = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(218,'SupplierId','SupplierId Check',NULL,NULL,'DataQuality Format51a Line00',	1,	'SupplierId = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(219,'Log Type','Log Type Check',NULL,NULL,'DataQuality Format51a Line00',	1,	'LogType = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),

		--Format 51a line 10


		(220,'Production Number','Production Number Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'ProductionNumber = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
        (221,'Series Indicator','Valid Series Indicator Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'SeriesIndicator NOT IN(''Y'', ''N'', '''')',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(222,'Production/Series Name','Production/Series Name Mandatory Column Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'ProductionName = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(223,'Series Number','Series Number Population Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'SeriesIndicator = ''Y'' AND SeriesNumber = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(224,'Episode Name','Episode Name Population Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'SeriesIndicator = ''Y'' AND EpisodeNumber = '''' AND EpisodeName = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(225,'Episode Number','Episode Number Population Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'SeriesIndicator = ''Y'' AND EpisodeNumber = '''' AND EpisodeName = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(226,'Transmission Station','Transmission Station Population Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'TransmissionStation = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		--(227,'Originating Network Station','Originating Network Station Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'OriginatingNetworkStation = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(228,'Daily Transmission Schedule Date','Daily Transmission Schedule Date Population Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'DailyTransmissionScheduleDate = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(229,'Transmission Time','Transmission Time Population Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'LTRIM(TransmissionTime) = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
	    (230,'Running Time','Running Time Population Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'RunningTime = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(231,'Production Company','Production Company Check', NULL,NULL,'DataQuality Format51a Line10',	1,	'ProductionCompany = '''' AND ProductionSourceIndicator = ''C''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		--(232,'Production Year','Production Year Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'ProductionYear = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(233,'First Transmission Indicator','First Transmission Indicator Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'FirstTransmissionIndicator NOT IN(''Y'', ''N'', '''')',	NULL,	NULL,	NULL, NULL, 'Radio'),
	    --reference rule previously removed as MDS not available.
		(234,'Music Content Indicator','Valid Music Content Indicator Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'ENT.MusicContentIndicator IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.MusicContent MC ON ENT.MusicContentIndicator = MC.Code',	NULL, NULL, 'Radio'),
		(235,'Production Type','Valid Production Type Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'ENT.ProductionType IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.ProductionType PT ON ENT.ProductionType = PT.Code',	NULL, NULL, 'Radio'),
	    (236,'Production Source Indicator','Valid Production Source Indicator Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'ENT.ProductionSourceIndicator IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.ProductionSource PS ON ENT.ProductionSourceIndicator = PS.Code',	NULL, NULL, 'Radio'),
	    (237,'Domestic International Indicator','Valid Domestic International Indicator Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'ENT.DomesticInternationalIndicator IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.DomesticInternationalTransmission DI ON ENT.DomesticInternationalIndicator = DI.Code',	NULL, NULL, 'Radio'),
		 
		-- Reference rule
		(238,'MCPS Blanket Indicator','Valid MCPS Blanket Indicator Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'MCPSBlanketIndicator NOT IN(''Y'', ''N'', '''')',NULL, NULL,	NULL, NULL, 'Radio'),
		(239,'Local Network Indicator','Valid Local Network Indicator Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'ENT.LocalNetworkIndicator IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.LocalNetworkBroadcast LN ON ENT.LocalNetworkIndicator = LN.Code',	NULL, NULL, 'Radio'),
		(240,'Secondary Exploitation Indicator','Secondary Exploitation Indicator Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'SecondaryExploitationIndicator NOT IN(''Y'', ''N'', '''')',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(241,'Territory Code','Valid Territory Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'ENT.TerritoryCode IS NULL',NULL, 'LEFT JOIN MDS_Ref.MDS.Territory T ON ENT.TerritoryCode = T.Code',	NULL, NULL, 'Radio'),
	   --Column rule
		(242,'Valid Amendment Indicator','Valid Amendment Indicator Check',NULL,NULL,'DataQuality Format51a Line10',	1,	'AmendmentIndicator NOT IN(''Y'', ''N'', '''')',NULL, NULL,	NULL, NULL, 'Radio'),
		
		--Format 51a line 20


		(243,'Production Reference Number','Production Reference Number Check',NULL,NULL,'DataQuality Format51a Line20',	1,	'ProductionReferenceNumber = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(244,'Music Title','Music Title Check',NULL,NULL,'DataQuality Format51a Line20',	1,	'MusicTitle = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(245,'Music Item Sequence','Music Item Sequence Check',NULL,NULL,'DataQuality Format51a Line20',	1,	'MusicItemSequence = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(246,'Product Album Promo Title','Product Album Promo Title Check',NULL,NULL,'DataQuality Format51a Line20',	1,	'ProductAlbumPromoTitle = '''' AND MusicOriginClassification IN(''C'',''L'')  AND ProductCatalogueNumber  = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(247,'Product Label','Product Label Check',NULL,NULL,'DataQuality Format51a Line20',	1,	'ProductLabel = '''' AND MusicOriginClassification IN(''C'',''L'')',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(248,'Product Catalogue Number','Product Catalogue Number Check',NULL,NULL,'DataQuality Format51a Line20',	1,	'ProductCatalogueNumber = '''' AND MusicOriginClassification IN(''C'',''L'')',	NULL,	NULL,	NULL, NULL, 'Radio'),
		--(249,'Product Side Number','Product Side Number Check',NULL,NULL,'DataQuality Format51a Line20',	1,	'ProductSideNumber = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		--(250,'Product Track Number','Product Track Number Check',NULL,NULL,'DataQuality Format51a Line20',	1,	'ProductTrackNumber = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(251,'Music Duration','Music Duration Check',NULL,NULL,'DataQuality Format51a Line20',	1,	'ISNULL(MusicDuration,0) <= 0',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(252,'Music Usage Classification','Music Usage Classification Check',NULL,NULL,'DataQuality Format51a Line20',	1,	'MusicUsageClassification NOT IN(''B'',''F'',''M'',''S'')',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(253,'Music Origin Classification','Music Origin Classification Check',NULL,NULL,'DataQuality Format51a Line20',	1,	'MusicOriginClassification NOT IN(''C'',''L'',''P'',''R'',''T'',''V'')',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(254,'Grand Rights Classification','Grand Rights Classification Check',NULL,NULL,'DataQuality Format51a Line20',	1,	'GrandRightsClassification NOT IN(''B'',''M'',''O'', '''')',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(255,'Prior Approval Indicator','Prior Approval Indicator Check',NULL,NULL,'DataQuality Format51a Line20',	1,	'PriorApprovalIndicator NOT IN(''N'',''Y'')',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(256,'Music Commission Flag','Music Commission Flag Check',NULL,NULL,'DataQuality Format51a Line20',	1,	'MusicCommissionFlag NOT IN(''N'',''Y'')',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(257,'Licensing Status Of Commissioned Music','Licensing Status Of Commissioned Music Check', NULL,NULL,'DataQuality Format51a Line20',	1,	'LicensingStatusofCommissionedMusic NOT IN(''N'',''Y'') AND MusicCommissionFlag = ''Y''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(258,'Music Composer/Author','Music Composer/Author Check', NULL,NULL,'DataQuality Format51a Line20',	1,	'MusicComposerAuthor = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
	    --(259,'Music Arranger Translator Editor etc','Music Arranger Translator Editor etc Check', NULL,NULL,'DataQuality Format51a Line20',	1,	'MusicArrangerTranslatorEditor = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(260,'Music Publisher','Music Publisher Check', NULL,NULL,'DataQuality Format51a Line20',	1,	'MusicPublisher = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(261,'Music Performer','Music Performer Check', NULL,NULL,'DataQuality Format51a Line20',	1,	'MusicPerformer = '''' AND MusicOriginClassification = ''C''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(262,'Music Dubbing Flag','Music Dubbing Flag Check', NULL,NULL,'DataQuality Format51a Line20',	1,	'MusicDubbingFlag NOT IN(''Y'',''N'')',	NULL,	NULL,	NULL, NULL, 'Radio'),

		--Format 51a line 99


		(263,'Number Of Records','Number Of Records Check',NULL,NULL,'DataQuality Format51a Line99',	1,	'NumberOfRecords IS NULL',	NULL,	NULL,	NULL, NULL, 'Radio'),

			--Selector 1 Line 00

		(264, 'Transmission Station','Transmission Station Population Check',NULL,NULL,'DataQuality FormatS1 Line00',	1,	'TransmissionStation = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),

			--Selector 1 Line 10

		(265,'Station Ref','Station Ref Check',NULL,NULL,'DataQuality FormatS1 Line10',	1,	'StationRef = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(266,'Transmission Schedule Date','Transmission Schedule Date Check',NULL,NULL,'DataQuality FormatS1 Line10',	1,	'TransmissionScheduleDate = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
        (267,'Transmission Time','Transmission Time Population Check',NULL,NULL,'DataQuality FormatS1 Line10',	1,	'LTRIM(TransmissionTime) = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
        (268,'Standard Text','Standard Text Check',NULL,NULL,'DataQuality FormatS1 Line10',	1,	'StandardText = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(269,'Page Number','Page Number Check',NULL,NULL,'DataQuality FormatS1 Line10',	1,	'PageNumber = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
        (270,'Selector Version','Selector Version Check',NULL,NULL,'DataQuality FormatS1 Line10',	1,	'SelectorVersion = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		
       
            --Selector 1 Line 20

	    (271,'Artist Name 1','Artist Name 1 Check', NULL,NULL,'DataQuality FormatS1 Line20',	1,	'ArtistName1 = '''' AND ArtistName2 <> ''News''',	NULL,	NULL,	NULL, NULL, 'Radio'),
        (272,'Artist Name 2','Artist Name 2 Check',NULL,NULL,'DataQuality FormatS1 Line20',	1,	'ArtistName2 = '''' AND ArtistName1 = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
        (273,'Music Title','Music Title Check',NULL,NULL,'DataQuality FormatS1 Line20',	1,	'MusicTitle = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
        (274,'Music Duration','Music Duration Check',NULL,NULL,'DataQuality FormatS1 Line20',	1,	'MusicDuration = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		
		

			--Selector 2 Line 00

		--(275, 'Record Type','Record Type Check',NULL,NULL,'DataQuality FormatS2 Line00',	1,	'RecordType = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(276, 'Transmission Station','Transmission Station Population Check',NULL,NULL,'DataQuality FormatS2 Line00',	1,	'TransmissionStation = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),

			--Selector 2 Line 10

		--(277,'Record Type','Record Type Check',NULL,NULL,'DataQuality FormatS2 Line10',	1,	'RecordType = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
        (278,'Transmission Schedule Date','Transmission Schedule Date Check',NULL,NULL,'DataQuality FormatS2 Line10',	1,	'TransmissionScheduleDate = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
        (279,'Transmission Time','Transmission Time Population Check',NULL,NULL,'DataQuality FormatS2 Line10',	1,	'LTRIM(TransmissionTime) = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
       
            --Selector 2 Line 20

	    (280,'Music Title','Music Title Check', NULL,NULL,'DataQuality FormatS2 Line20',	1,	'MusicTitle= ''''',   NULL,	NULL,	NULL, NULL, 'Radio'),
        (281,'Music Performer','Music Performer Check', NULL,NULL,'DataQuality FormatS2 Line20',	1,	'MusicPerformer = '''' AND MusicComposer = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(282,'Music Composer','Music Composer Check', NULL,NULL,'DataQuality FormatS2 Line20',	1,	'MusicComposer = '''' AND MusicPerformer = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
        (283,'Music Duration','Music Duration Check',NULL,NULL,'DataQuality FormatS2 Line20',	1,	'MusicDuration= ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(284,'Music Type','Music Type Check',NULL,NULL,'DataQuality FormatS2 Line20',	1,	'MusicType= ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
     	(285,'Music Duration','Music Duration Check',NULL,NULL,'DataQuality FormatS2 Line20',	1,	'MusicDuration = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),

		--Selector 2 Line 99


		--(286,'Record Type','Record Type Check',NULL,NULL,'DataQuality FormatS2 Line99',	1,	'RecordType = ''''',	NULL,	NULL,	NULL, NULL, 'Radio'),
		(287,'Number Of Records','Number Of Records Check',NULL,NULL,'DataQuality FormatS2 Line99',	1,	'NumberOfRecords IS NULL',	NULL,	NULL,	NULL, NULL, 'Radio')

	



	) AS Src
	(
	   [ScreenId]
      ,[ScreenName]
      ,[ScreenDescription]
      ,[ProjectId]
      ,[EnvironmentId]
      ,[ObjectId]
      ,[ScreenSeverityID]
      ,[ScreenSQL]
	  ,[ReportSQL]
      ,[ScreenReferenceSQL]
      ,[ReportTableName]
	  ,[CleanseSQL]
	  ,[Domain]
	)
	ON Tgt.[ScreenId] = Src.[ScreenId]

-- Update matched rows
WHEN MATCHED THEN
UPDATE 
   SET [ScreenName] = src.ScreenName
      ,[ScreenDescription] = src.ScreenDescription
      ,[ProjectId] = src.ProjectId
      ,[EnvironmentId] = src.EnvironmentId
      ,[ObjectId] = src.ObjectId
      ,[ScreenSeverityID] = src.ScreenSeverityID
      ,[ScreenSQL] = src.ScreenSQL
      ,[ScreenReferenceSQL] = src.ScreenReferenceSQL
      ,[ReportSQL] = src.ReportSQL
      ,[ReportTableName] = src.ReportTableName
	  ,[CleanseSQL] = Src.[CleanseSQL]
	  ,[Domain] = Src.[Domain]

-- Insert new rows
WHEN NOT MATCHED BY TARGET THEN
	INSERT
		(
	   [ScreenId]
      ,[ScreenName]
      ,[ScreenDescription]
      ,[ProjectId]
      ,[EnvironmentId]
      ,[ObjectId]
      ,[ScreenSeverityID]
      ,[ScreenSQL]
      ,[ScreenReferenceSQL]
      ,[ReportSQL]
      ,[ReportTableName]
	  ,[CleanseSQL]
	  ,[Domain]
		)
	VALUES
		(
		   src.[ScreenId]
		  ,src.[ScreenName]
		  ,src.[ScreenDescription]
		  ,src.[ProjectId]
		  ,src.[EnvironmentId]
		  ,src.[ObjectId]
		  ,src.[ScreenSeverityID]
		  ,src.[ScreenSQL]
		  ,src.[ScreenReferenceSQL]
		  ,src.[ReportSQL]
		  ,src.[ReportTableName]
		  ,src.[CleanseSQL]
		  ,src.[Domain]
		);

-- Delete rows that are in the target but not the source
--WHEN NOT MATCHED BY SOURCE THEN
--	DELETE;

SET IDENTITY_INSERT DataQuality.Screen OFF;
--SET IDENTITY_INSERT DataQuality.ScreenSeverity ON 

MERGE INTO DataQuality.ScreenSeverity AS Tgt
USING 
	(VALUES
		(1,'Low','Low'),
		(2,'Medium','Medium'),
		(3,'High','High')				     	
	) AS Src
	(
		ScreenSeverityID, 
		SeverityName, 
		SeverityCategory
	)
	ON Tgt.[ScreenSeverityID] = Src.[ScreenSeverityID]

-- Update matched rows
WHEN MATCHED THEN
UPDATE 
   SET [SeverityName] = src.SeverityName
      ,[SeverityCategory] = src.SeverityCategory

-- Insert new rows
WHEN NOT MATCHED BY TARGET THEN
	INSERT
		(
		ScreenSeverityID, 
		SeverityName, 
		SeverityCategory
		)
	VALUES
		(
			src.ScreenSeverityID, 
			src.SeverityName, 
			src.SeverityCategory
		);
-- Delete rows that are in the target but not the source
--WHEN NOT MATCHED BY SOURCE THEN
--	DELETE;

--SET IDENTITY_INSERT  DataQuality.ScreenSeverity  OFF;

--SET IDENTITY_INSERT DataQuality.[CleanseRule] ON 

MERGE INTO [DataQuality].[StandardiseRule] AS Tgt
USING 
	(VALUES
		 (1,1,'Name','Contains','Central','ReplaceWith','Middle',1)
		,(2,2,'Name','EndsWith','Cty','ReplaceWith','City',1)

		
	) AS Src
	(
	   [StandardiseRuleId]
      ,[DataQualityRuleId]
      ,[ColumnName]
      ,[PatternMatchType]
      ,[Criteria]
      ,[StandardiseType]
      ,[StandardiseTypeValue]
      ,[EntityTypeID]
	)
	ON Tgt.[StandardiseRuleId] = Src.[StandardiseRuleId]

-- Update matched rows
WHEN MATCHED THEN
UPDATE 
   SET [StandardiseRuleId] = src.[StandardiseRuleId]
      ,[DataQualityRuleId] = src.[DataQualityRuleId]
      ,[ColumnName] = src.[ColumnName]
      ,[PatternMatchType] = src.[PatternMatchType]
      ,[Criteria] = src.[Criteria]
      ,[StandardiseType] = src.[StandardiseType]
      ,[StandardiseTypeValue] = src.[StandardiseTypeValue]
      ,[EntityTypeID] = src.[EntityTypeID]
    

-- Insert new rows
WHEN NOT MATCHED BY TARGET THEN
	INSERT
		(
	   [StandardiseRuleId]
      ,[DataQualityRuleId]
      ,[ColumnName]
      ,[PatternMatchType]
      ,[Criteria]
      ,[StandardiseType]
      ,[StandardiseTypeValue]
      ,[EntityTypeID]
		)
	VALUES
		(
		   src.[StandardiseRuleId]
		  ,src.[DataQualityRuleId]
		  ,src.[ColumnName]
		  ,src.[PatternMatchType]
		  ,src.[Criteria]
		  ,src.[StandardiseType]
		  ,src.[StandardiseTypeValue]
		  ,src.[EntityTypeID]

		);

-- Delete rows that are in the target but not the source
--WHEN NOT MATCHED BY SOURCE THEN
--	DELETE;

	--SET IDENTITY_INSERT  DataQuality.[CleanseRule]  OFF;

GO

GO
