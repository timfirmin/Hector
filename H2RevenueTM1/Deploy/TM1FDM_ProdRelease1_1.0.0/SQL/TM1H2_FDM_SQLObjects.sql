/*
Deployment script for FinanceDataMart

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "FinanceDataMart"
:setvar DefaultFilePrefix "FinanceDataMart"
:setvar DefaultDataPath "F:\SQLServerDatabases\"
:setvar DefaultLogPath "G:\SQLServerXLogs\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];

GO
CREATE SCHEMA [TM1reporting]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [TM1reporting].[BatchLoadSummary]...';

/****** Object:  Table [CodaWarehouse].[FactTM1Planning]    Script Date: 04/05/2018 17:49:16 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [CodaWarehouse].[FactTM1Planning](
	[TM1PlanningKey] [bigint] IDENTITY(1,1) NOT NULL,
	[CompanyKey] [bigint] NULL,
	[DocumentKey] [bigint] NULL,
	[AccountKey_EL1] [bigint] NULL,
	[AccountCode_EL1] [varchar](150) NULL,
	[AccountKey_EL2] [bigint] NULL,
	[AccountCode_EL2] [varchar](150) NULL,
	[TM1CostRevenue] [varchar](150) NULL,
	[TM1Class] [varchar](150) NOT NULL,
	[TM1Level4] [varchar](150) NOT NULL,
	[TM1Level3] [varchar](150) NOT NULL,
	[TM1Level2] [varchar](150) NOT NULL,
	[TM1Level1] [varchar](150) NOT NULL,
	[CodaFiscalDate] [datetime] NULL,
	[BudgetValue] [money] NOT NULL,
	[ForecastQ1Value] [money] NOT NULL,
	[ForecastQ2Value] [money] NOT NULL,
	[ForecastQ3Value] [money] NOT NULL,
	[SourcePlanningFileLogKey] [int] NULL,
	[InsertLoadId] [int] NULL,
	[InsertTimestamp] [datetime] NULL,
 CONSTRAINT [PK_FactTM1Planning] PRIMARY KEY CLUSTERED 
(
	[TM1PlanningKey] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

ALTER TABLE [CodaWarehouse].[FactTM1Planning] ADD  CONSTRAINT [DF_FactTM1Planning_InsertTimestamp]  DEFAULT (getdate()) FOR [InsertTimestamp]
GO


create view	[CodaTabular].[FactTM1Planning] 
as

	SELECT 
	    [CompanyKey]
	  , [DocumentKey]
		  --,tm1.[Company]
		  , TM1CostRevenue
		  , TM1Class
		  , TM1Level4
		  , TM1Level3
		  , TM1Level2
		  , TM1Level1

		  ,AccountKey_EL1 as [AccountEL1Key]
		  --,tm1.[EL1Description]
		  --,tm1.[EL1Code]
		  ,AccountKey_EL2 as [AccountEL2Key]

		  ,[CodaFiscalDate] as DateDt		 
		   , BudgetValue
		  , ForecastQ1Value
		  , ForecastQ2Value
		  , ForecastQ3Value
		  , 0 as ActualValue

	  FROM [CodaWarehouse].[FactTM1Planning]


GO
CREATE VIEW TM1Reporting.BatchLoadSummary
as
SELECT [BatchId]
      ,[BatchSummaryMessage]
      ,[FilesAttemptedforProcess]
      ,[StagingNotValid]
      ,[StagingSuccess]
      ,[TransformNotValid]
      ,[TransformSuccess]
      ,[ExtractNotValid]
      ,[ExtractSuccess]
  FROM [FinanceStage].[TM1Control].[BatchLoadSummary]
GO
PRINT N'Creating [TM1reporting].[BatchMoveSummary]...';


GO
CREATE VIEW TM1Reporting.[BatchMoveSummary]
as
SELECT [LoadId] as BatchId
      ,[FileKey]
      ,[DerivedFileType]
      ,[FileMovedActionTaken]
      ,[FileName]
      ,[FileMovedTimeStamp]
  FROM [FinanceStage].[TM1Control].[BatchMoveSummary]
GO
PRINT N'Creating [TM1reporting].[BatchRowSummary]...';


GO
CREATE VIEW TM1Reporting.[BatchRowSummary]
as
SELECT [LoadId] as BatchId
      ,[FileKey]
      ,[DerivedFileType]
      ,[FileName]
      ,[FileStartPeriodString]
      ,[FileEndPeriodString]
      ,[FileRawRowCount]
      ,[FileModifiedTimeStamp]
      ,[StagingTotalRows]
      ,[StagingValidStatus]
      ,[TransformValidRows]
      ,[TransformValidStatus]
      ,[ExtractFDMRows]
      ,[ExtractFPVRows]
      ,[ExtractValidStatus]
  FROM [FinanceStage].[TM1Control].[BatchRowSummary]
GO
PRINT N'Creating [TM1reporting].[ImportFileLog]...';


GO

CREATE VIEW [TM1reporting].[ImportFileLog]
as
	SELECT [FileLogUniqueKey]
		  ,[FileRawRowCount]
		  ,[FileCreatedTimeStamp]
		  ,[FileModifiedTimeStamp]
		  ,[FilePath]
		  ,[FileName]
		  ,[FileSource]
		  ,[FileStartPeriodString]
		  ,[FileEndPeriodString]
		  ,[FileStartPeriodSeq]
		  ,[FileEndPeriodSeq]
		  ,[FileTypeKey] as [RevenueFileTypeKey]
		  ,[DerivedFileType]
		  ,[FileSize]
		  ,[SourceFileID]
		  ,[SourceFileInsertTimeStamp]
		  ,[StagingValidToLoadFlag]
		  ,[StagingStartPeriodSeq]
		  ,[StagingEndPeriodSeq]
		  ,[StagingTotalRows]
		  ,[StagingValidValue]
		  ,[StagingValidStatus]
		  ,[StagingTimeStamp]
		  ,[TransformTimeStamp]
		  ,[TransformValidValue]
		  ,[TransformValidRows]
		  ,[TransformValidStatus]
		  ,[ExtractFDMTimeStamp]
		  ,[ExtractFDMValue]
		  ,[ExtractFDMRows]
		  ,[ExtractFPVTimeStamp]
		  ,[ExtractFPVValue]
		  ,[ExtractFPVRows]
		  ,[ExtractValidStatus]
		  ,[FileMovedAtSourceFlag]
		  ,[FileMovedActionTaken]
		  ,[FileMovedTimeStamp]
		  ,[FileMovedDestinationFolder]
		  ,[FileDeletedLoadId]
		  ,[FileDeletedTimeStamp]
		  ,[LoadId]
		  ,[LoadTimeStamp]
	  FROM [FinanceStage].[TM1Control].[ImportFileLog]
GO
PRINT N'Creating [TM1reporting].[PlanningData]...';


GO
CREATE VIEW TM1Reporting.[PlanningData]
as
	SELECT [PlanningDataKey]
      ,[PlanningScenarioKey]
      ,[PlanningFileLogKey]
      ,[PlanningFileTypeKey]
      ,[PlanningCalendarKey]
      ,[PlanningFilePeriodSeq]
      ,[PlanningPeriodFirstDay]
      ,[Company]
      ,[Class]
      ,[Level4]
      ,[Level3]
      ,[Level2]
      ,[Level1]
      ,[EL1Description]
      ,[EL1Code]
      ,[EL2Description]
      ,[EL2Code]
      ,[PlanningPeriod]
      ,[PlanningYear]
      ,[PlanningScenario]
      ,[ValueGBP]
      ,[InsertTimeStamp]
      ,[InsertLoadId]
  FROM [FinanceStage].[TM1Transform].[PlanningData]
GO
PRINT N'Creating [TM1reporting].[DataCheckStagingRevenue]...';


GO




CREATE VIEW [TM1reporting].[DataCheckStagingRevenue]
AS

select 
	Company,	
	RevenueFileTypeName, 
	FinanceSection, 
	[PlanningYear],
	isnull([Budget],0) as [Budget], 
	isnull([Forecast Q1],0) as [ForecastQ1], 
	isnull([Forecast Q2],0) as [ForecastQ2], 
	isnull([Forecast Q3],0) as [ForecastQ3], 
	[StagingLoadId] ,
	[StagingFileName]
from 
(
(
SELECT  
       pec.[Company]
	  ,replace(ift.PlanningFileTypeName, 'Data','') as RevenueFileTypeName 
      ,pec.Level2 as FinanceSection
      ,pec.[PlanningScenario]
      ,pec.[PlanningYear]
	  ,sum([ValueGBP]) as ScenarioYearValue
	  ,pec.[InsertLoadId] as StagingLoadId
	  ,ifl.[FileName] as StagingFileName

  FROM [FinanceStage].[TM1Staging].[PlanningExtractRevenue] pec

JOIN [FinanceStage].[TM1Control].[ImportFileLog] ifl on pec.FileLogUniqueKey = ifl.[FileLogUniqueKey]
JOIN [FinanceStage].[TM1Control].[PlanningScenario] ps on pec.PlanningScenarioKey = ps.PlanningScenarioUniqueKey
JOIN [FinanceStage].[TM1Control].[ImportFileType] ift on pec.PlanningFileTypeKey = ift.PlanningFileTypeUniqueKey

WHERE [PlanningScenarioValidFDM] = 'Y'

GROUP BY 
	   pec.[Company]
	  ,ift.PlanningFileTypeName
      ,pec.Level2
      ,pec.[PlanningScenario]
      ,pec.[PlanningYear]
      ,pec.[InsertLoadId]
	  ,ifl.[FileName]
)) PivotBase
PIVOT
(SUM(ScenarioYearValue) FOR 
[PlanningScenario] IN ([Budget], [Forecast Q1], [Forecast Q2], [Forecast Q3])
) AS PivotTable;
GO
PRINT N'Creating [TM1reporting].[DataCheckStagingCosts]...';


GO




   --    ,pec.[BusinessUnit] as Class
   --   ,pec.[SubBusinessUnit] as Level4
   --   ,pec.[Category] as Level3
   --   ,pec.[Mapping] as Level2
	  --,'Costs' as Level1

CREATE VIEW [TM1reporting].[DataCheckStagingCosts]
AS

select 
	Company,	
	RevenueFileTypeName, 
	FinanceSection, 
	[PlanningYear],
	isnull([Budget],0) as [Budget], 
	isnull([Forecast Q1],0) as [ForecastQ1], 
	isnull([Forecast Q2],0) as [ForecastQ2], 
	isnull([Forecast Q3],0) as [ForecastQ3], 
	[StagingLoadId] ,
	[StagingFileName]
from 
(
(
SELECT  
       pec.[Company]
	  ,replace(ift.PlanningFileTypeName, 'Data','') as RevenueFileTypeName 
      ,pec.Mapping as FinanceSection
      ,pec.[PlanningScenario]
      ,pec.[PlanningYear]
	  ,sum([ValueGBP]) as ScenarioYearValue
	  ,pec.[InsertLoadId] as StagingLoadId
	  ,ifl.[FileName] as StagingFileName

  FROM [FinanceStage].[TM1Staging].[PlanningExtractCosts] pec

JOIN [FinanceStage].[TM1Control].[ImportFileLog] ifl on pec.FileLogUniqueKey = ifl.[FileLogUniqueKey]
JOIN [FinanceStage].[TM1Control].[PlanningScenario] ps on pec.PlanningScenarioKey = ps.PlanningScenarioUniqueKey
JOIN [FinanceStage].[TM1Control].[ImportFileType] ift on pec.PlanningFileTypeKey = ift.PlanningFileTypeUniqueKey

WHERE [PlanningScenarioValidFDM] = 'Y'

GROUP BY 
	   pec.[Company]
	  ,ift.PlanningFileTypeName
      ,pec.Mapping
      ,pec.[PlanningScenario]
      ,pec.[PlanningYear]
      ,pec.[InsertLoadId]
	  ,ifl.[FileName]
)) PivotBase
PIVOT
(SUM(ScenarioYearValue) FOR 
[PlanningScenario] IN ([Budget], [Forecast Q1], [Forecast Q2], [Forecast Q3])
) AS PivotTable;
GO
PRINT N'Creating [TM1reporting].[DataCheckTransform]...';


GO




CREATE VIEW [TM1reporting].[DataCheckTransform]
AS

select 
	Company,	
	RevenueFileTypeName, 
	FinanceSection, 
	[PlanningYear],
	isnull([Budget],0) as [Budget], 
	isnull([Forecast Q1],0) as [ForecastQ1], 
	isnull([Forecast Q2],0) as [ForecastQ2], 
	isnull([Forecast Q3],0) as [ForecastQ3], 
	[StagingLoadId] ,
	[StagingFileName]
from 
(
(
SELECT
       ods.[Company]
	  ,replace(ift.PlanningFileTypeName, 'Data','') as RevenueFileTypeName 
      ,ods.Level2 as FinanceSection
      ,ods.[PlanningScenario]
      ,ods.[PlanningYear]
	  ,sum([ValueGBP]) as ScenarioYearValue
	  ,ods.[InsertLoadId] as StagingLoadId
	  ,ifl.[FileName] as StagingFileName

  FROM [FinanceStage].[TM1Transform].[PlanningData] ods

JOIN [FinanceStage].[TM1Control].[ImportFileLog] ifl on ods.PlanningFileLogKey = ifl.[FileLogUniqueKey]
JOIN [FinanceStage].[TM1Control].[PlanningScenario] ps on ods.PlanningScenarioKey = ps.PlanningScenarioUniqueKey
JOIN [FinanceStage].[TM1Control].[ImportFileType] ift on ods.PlanningFileTypeKey = ift.PlanningFileTypeUniqueKey

WHERE [PlanningScenarioValidFDM] = 'Y'

GROUP BY
       ods.[Company]
	  ,ift.PlanningFileTypeName
      ,ods.Level2 
      ,ods.[PlanningScenario]
      ,ods.[PlanningYear]
	  ,ods.[InsertLoadId] 
	  ,ifl.[FileName] 
)) PivotBase
PIVOT
(SUM(ScenarioYearValue) FOR 
[PlanningScenario] IN ([Budget], [Forecast Q1], [Forecast Q2], [Forecast Q3])
) AS PivotTable;
GO
PRINT N'Creating Permission...';

GO

CREATE VIEW [TM1reporting].[DistributionRevenueOutput]
AS
SELECT 
 
	 pd.[Company] AS [CompanyCode]
	,pd.[EL1Code] as AccountCodeEL1
	,pd.EL1Description as AccountDescrEL1
	,pd.[EL2Code] as AccountCodeEL2
	,pd.EL2Description as AccountDescrEL2
	,pd.[PlanningScenario]
	,pd.[PlanningPeriod]
	,pd.[PlanningYear]
	,pd.[PlanningFilePeriodSeq]
	,pd.[PlanningPeriodFirstDay]
	,[Level4] as TM1CategoryOnlineBroadcast
	,[Level1] as TM1BroadcastGroup
	,sum(pd.[ValueGBP]) as [ValueGBP]
	,[PlanningFileLogKey] as TM1PlanningFileLogKey
	,pd.[InsertLoadId]


  FROM FinanceStage.[TM1Transform].[PlanningData] pd
  JOIN FinanceStage.[TM1Control].[PlanningScenario] ps on pd.PlanningScenarioKey = ps.PlanningScenarioUniqueKey

  WHERE ps.PlanningScenarioValidFDM = 'Y'
  and pd.[EL2Code] like 'C%'
  and pd.[Class] = 'Revenue'

 GROUP  BY 
	 pd.[Company]
	,pd.[EL1Code]
,pd.EL1Description 
	,pd.[EL2Code]
,pd.EL2Description 
	,pd.PlanningScenario
	,pd.[PlanningPeriod]
	,pd.[PlanningYear]
	,pd.[PlanningFilePeriodSeq]
	,pd.[PlanningPeriodFirstDay] 
	,pd.[Level4] 
	,pd.[Level1]
	,pd.[PlanningFileLogKey] 
	,pd.[InsertLoadId]



GO