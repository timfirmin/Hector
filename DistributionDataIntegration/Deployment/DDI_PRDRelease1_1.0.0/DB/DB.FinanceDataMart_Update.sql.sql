/*
Deployment script for FinanceDataMart

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "FinanceDataMart"
:setvar DefaultFilePrefix "FinanceDataMart"
:setvar DefaultDataPath "F:\SQLServerDatabases\"
:setvar DefaultLogPath "G:\SQLServerXLogs\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];

GO
CREATE SCHEMA [DDI]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [DDI].[DistributionMusicMinutes]...';


GO
CREATE TABLE [DDI].[DistributionMusicMinutes] (
    [DistributionMusicMinutesKey] BIGINT          NULL,
    [DistributionGroupCode]       VARCHAR (50)    NULL,
    [DistributionCode]            VARCHAR (50)    NULL,
    [CompanyCode]                 VARCHAR (50)    NULL,
    [StationCode]                 VARCHAR (50)    NULL,
    [StationName]                 VARCHAR (100)   NULL,
    [MasterStationID]             VARCHAR (50)    NULL,
    [SongsProgrammeForecast]      DECIMAL (18, 3) NULL,
    [NonSongNonProgrammeForecast] DECIMAL (18, 3) NULL,
    [CommercialForecast]          DECIMAL (18, 3) NULL,
    [TotalInPeriodForecast]       DECIMAL (18, 3) NULL,
    [LateDataForecast]            DECIMAL (18, 3) NULL,
    [TotalForecast]               DECIMAL (18, 3) NULL,
    [HighPeakPercent]             DECIMAL (12, 5) NULL,
    [LowPeakPercent]              DECIMAL (12, 5) NULL,
    [NonPeakPercent]              DECIMAL (12, 5) NULL,
    [Comment]                     VARCHAR (255)   NULL,
    [FileLogKey]                  INT             NULL,
    [InsertTimeStamp]             DATETIME        CONSTRAINT [DF_DistributionMusicMinutes_InsertTimeStamp] DEFAULT (getdate()) NOT NULL,
    [InsertLoadId]                INT             NULL,
    [InsertBy]                    VARCHAR (150)   CONSTRAINT [DF_DistributionMusicMinutes_InsertBy] DEFAULT (suser_sname()) NULL
);


GO
PRINT N'Creating [DDI].[DistributionMusicMinutes].[IX_DistributionMusicMinutes]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_DistributionMusicMinutes]
    ON [DDI].[DistributionMusicMinutes]([DistributionMusicMinutesKey] ASC) WITH (IGNORE_DUP_KEY = ON);

GO
PRINT N'Creating [DDI].[DistributionMissingMinutes]...';


GO
CREATE TABLE [DDI].[DistributionMissingMinutes] (
    [DistributionMissingMinutesKey] BIGINT          NULL,
    [DistributionGroupCode]         VARCHAR (50)    NULL,
    [DistributionCode]              VARCHAR (50)    NULL,
    [CompanyCode]                   VARCHAR (50)    NULL,
    [StationCode]                   VARCHAR (50)    NULL,
    [StationName]                   VARCHAR (100)   NULL,
    [MasterStationId]               VARCHAR (50)    NULL,
    [MinutesMissingData]            DECIMAL (18, 3) NULL,
    [MinutesCarryForwards]          DECIMAL (18, 3) NULL,
    [MinutesTotal]                  DECIMAL (18, 3) NULL,
    [RevenueMissingData]            DECIMAL (18, 3) NULL,
    [RevenueCarryForwards]          DECIMAL (18, 3) NULL,
    [RevenueTotal]                  DECIMAL (18, 3) NULL,
    [Comment]                       VARCHAR (255)   NULL,
    [FileLogKey]                    INT             NULL,
    [InsertTimeStamp]               DATETIME2 (2)   CONSTRAINT [DF_DistributionMissingMinutes_InsertTimeStamp] DEFAULT (getdate()) NULL,
    [InsertLoadId]                  INT             NULL,
    [InsertBy]                      VARCHAR (150)   CONSTRAINT [DF_DistributionMissingMinutes_InsertBy] DEFAULT (suser_sname()) NULL
);


GO
PRINT N'Creating [DDI].[DistributionMissingMinutes].[IX_DistributionMissingMinutes]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_DistributionMissingMinutes]
    ON [DDI].[DistributionMissingMinutes]([DistributionMissingMinutesKey] ASC) WITH (IGNORE_DUP_KEY = ON);


GO
PRINT N'Creating [DDI].[DistributionPublicReception]...';


GO
CREATE TABLE [DDI].[DistributionPublicReception] (
    [DistributionPublicReceptionKey] BIGINT          NULL,
    [DistributionGroupCode]          VARCHAR (50)    NULL,
    [DistributionCode]               VARCHAR (50)    NULL,
    [CompanyCode]                    VARCHAR (50)    NULL,
    [StationCode]                    VARCHAR (50)    NULL,
    [StationName]                    VARCHAR (100)   NULL,
    [MasterStationId]                VARCHAR (50)    NULL,
    [TotalPRAllocation]              DECIMAL (18, 3) NULL,
    [Comment]                        VARCHAR (255)   NULL,
    [FileLogKey]                     INT             NULL,
    [InsertTimeStamp]                DATETIME2 (2)   CONSTRAINT [DF_DistributionPublicReception_InsertTimeStamp] DEFAULT (getdate()) NULL,
    [InsertLoadId]                   INT             NULL,
    [InsertBy]                       VARCHAR (150)   CONSTRAINT [DF_DistributionPublicReception_InsertBy] DEFAULT (suser_sname()) NULL
);




GO
PRINT N'Creating [DDI].[DistributionPublicReception].[IX_DistributionPublicReception]...';
GO

CREATE UNIQUE NONCLUSTERED INDEX [IX_DistributionPublicReception]
    ON [DDI].[DistributionPublicReception]([DistributionPublicReceptionKey] ASC) WITH (IGNORE_DUP_KEY = ON);

GO
PRINT N'Creating [DDI].[DistributionCodes]...';
GO

CREATE view [DDI].[DistributionCodes]
as

with cte_yrs
as
(SELECT TOP (5) DistributionYear = year(getdate())+1 - CONVERT(INT, ROW_NUMBER() OVER (ORDER BY s1.[object_id]))
FROM sys.all_objects AS s1 CROSS JOIN sys.all_objects AS s2)
,cte_Distributions
as
(
select DistributionYear, 'D' + right(cast(DistributionYear as char(4)),2) + '1' as DistributionCode
	, cast('01-01-' + cast(DistributionYear as char(4)) as datetime) as DistributionStartDate , cast('04-15-' + cast(DistributionYear as char(4)) as datetime) as DistributionEndDate from cte_yrs cte
union
select DistributionYear, 'D' + right(cast(DistributionYear as char(4)),2) + '2'
	, cast('04-16-' + cast(DistributionYear as char(4)) as datetime) as DistributionStartDate , cast('07-15-' + cast(DistributionYear as char(4)) as datetime) as DistributionEndDate from cte_yrs cte
union
select DistributionYear, 'D' + right(cast(DistributionYear as char(4)),2) + '3'
	, cast('07-16-' + cast(DistributionYear as char(4)) as datetime) as DistributionStartDate , cast('10-15-' + cast(DistributionYear as char(4)) as datetime) as DistributionEndDate from cte_yrs cte
union
select DistributionYear, 'D' + right(cast(DistributionYear as char(4)),2) + '4'
	, cast('10-16-' + cast(DistributionYear as char(4)) as datetime) as DistributionStartDate , cast('12-31-' + cast(DistributionYear as char(4)) as datetime) as DistributionEndDate from cte_yrs cte
)
select *
,row_number() OVER(ORDER BY DistributionCode ASC) as SortOrder 
,case when getdate() between DistributionStartDate and DistributionEndDate then 1 else 0 end as CurrentDistribution
from cte_Distributions

GO
PRINT N'Creating [DDI].[NotificationLog]...';
GO

CREATE VIEW [DDI].[NotificationLog]
AS
SELECT 
		nl.[NotificationUniqueKey]
		,fl.DerivedFileType
		,fl.FileName
		,fl.FileSourcePath
		,fl.DerivedDistributionCode
		,fl.DerivedCompany
		,fl.DerivedDistributionGroupCode
		,nl.[NotificationPackageName]
		,nl.[NotificationTaskName]
		,nl.[NotificationFieldName]
		,nl.[NotificationFieldCode]
		,nl.[NotificationFieldDescription]
		,nl.[InsertTimeStamp]
		,nl.[InsertBy]
		,fl.LoadId
  FROM [FinanceStage].[DDIstaging].[NotificationLog] nl
  JOIN [FinanceStage].[DDIstaging].[FileLog] fl on nl.[NotificationFileLogKey]  = fl.FileLogUniqueKey

GO
PRINT N'Creating DDI.ReportMusicMinutesALL...';
GO

create view DDI.ReportMusicMinutesALL
as


SELECT 
	   dmm.[DistributionGroupCode]
      ,dmm.[DistributionCode]
	  ,dc.[DistributionYear]
	  ,dc.[SortOrder] DistributionOrder
      ,dmm.[CompanyCode]
      ,dmm.[StationCode]
      ,dmm.[StationName]
      ,dmm.[MasterStationId]
      ,dmm.[SongsProgrammeForecast]
      ,dmm.[NonSongNonProgrammeForecast]
      ,dmm.[CommercialForecast]
      ,dmm.[LateDataForecast]
      ,dmm.[TotalForecast]

  FROM [FinanceDataMart].[DDI].DistributionMusicMinutes dmm
  JOIN [DDI].[DistributionCodes] dc on dmm.[DistributionCode] = dc.[DistributionCode]

GO
PRINT N'Creating DDI.ReportMusicMinutesTotalForecastYR...';
GO

create view DDI.ReportMusicMinutesTotalForecastYR
as
SELECT 
[DistributionGroupCode]
,[CompanyCode]
,[StationCode]
,[StationName]
,'AverageTotalForecast' as [AverageMinutesTotal], 
[2017],[2018],[2019],[2020],[2021]
FROM	  
(SELECT 
	   dmm.[DistributionGroupCode]
	  ,dc.[DistributionYear]
      ,dmm.[CompanyCode]
      ,dmm.[StationCode]
      ,dmm.[StationName]
      ,dmm.[TotalForecast]
  FROM [FinanceDataMart].[DDI].DistributionMusicMinutes dmm
  JOIN [DDI].[DistributionCodes] dc on dmm.[DistributionCode] = dc.[DistributionCode]) src
  PIVOT
  (
  AVG([TotalForecast])
  FOR 
[DistributionYear]
	IN
	([2017],[2018],[2019],[2020],[2021])
  ) as PivotTable;

GO
PRINT N'Creating DDI.ReportPublicReceptionALL...';
GO


create view DDI.ReportPublicReceptionALL
as

SELECT 
	   pr.[DistributionGroupCode]
      ,pr.[DistributionCode]
	  ,dc.[DistributionYear]
	  ,dc.[SortOrder] DistributionOrder
      ,pr.[CompanyCode]
      ,pr.[StationCode]
      ,pr.[StationName]
      ,pr.[MasterStationId]
      ,pr.TotalPRAllocation

  FROM [DDI].DistributionPublicReception pr
  JOIN [DDI].[DistributionCodes] dc on pr.[DistributionCode] = dc.[DistributionCode]


GO
PRINT N'Update complete.';


GO
